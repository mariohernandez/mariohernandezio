# https://mariohernandez.io llms-full.txt

## Web Development Insights
[Skip to content](https://mariohernandez.io/#main-content)

and write about it on this blog

- [Instagram](https://www.instagram.com/_mariorhernandez/ "Like me on Instagram")
- [Twitter](https://twitter.com/imariohernandez "Follow me on Twitter")
- [Github](https://github.com/mariohernandez "Collaborate with me on Github")
- [LinkedIn](https://www.linkedin.com/in/mariorhernandez/ "Network with me on LinkedIn")

[More about me](https://mariohernandez.io/#aboutme)

![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/heroes/webp.webp)

Featured post

April 12, 2025

Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

[Read the full article](https://mariohernandez.io/blog/using-modern-image-formats-to-improve-performance/)

## Blog series

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Portrait of Mario Hernandez](https://mariohernandez.io/images/headshot.webp)

I am a software enginner from Los Angeles and I help large and small organizations build and deploy web systems. I am a regular speaker and trainer at many Open Source events around the United States. I also enjoy writing and sharing content about the things I am working on or learning about.

- ![Person holding a wrapped gift box](https://mariohernandez.io/images/thumbs/wrap.webp)





  December 8, 2023



  In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![Image of a net showing interlaced mesh](https://mariohernandez.io/images/thumbs/integrate.webp)





  June 17, 2021



  Components integration with Drupal can be a complicated task, but there are also ways in which this task can be simplified. This post shows you how.


 [See more posts](https://mariohernandez.io/blog)

## Conducting Training Workshops
[Skip to content](https://mariohernandez.io/blog/running-a-training-workshop/#main-content) [Training](https://mariohernandez.io/tag/training/)

![Developers looking at computer screen](https://mariohernandez.io/images/training-workshop.webp)

[Photo by: Unsplash.com](https://unsplash.com/)

**Update 1-10-19**

I wrote an extended version of this post at [Mediacurrent's blog](https://www.mediacurrent.com/blog/planning-effective-training/), check it out.

* * *

As long as I can remember I've enjoyed public speaking. This doesn't mean I am good at it, it simply means I enjoy it. School events, class president, my jobs, etc., they all taught me great lessons about public speaking. So when I started as a developer, sharing my knowledge with others at conferences or meetups came pretty natural.

I'd like to clarify, that after years of doing talks and other methods of public speaking, I am still terrified. I get nervous, my hands sweat, my legs shake, and my voice gets weird. Basically what I am trying to say is that I'm not an expert by any means, but I overcome the phobia of public speaking by doing it frequently.

For many years I have speaking at conferences, but in the past few years I started conducting longer workshops. I first started doing online workshops, which have their pros and cons. While they don't put you face to face with your audience, it also does not give you a good sense for how effective your training is because you can't see people reactions. For this reason I prefer to do face-to-face training.

As part of my job I conduct periodic Front-End training workshops for clients and recently I started conducting all-day training workshops at conferences. I really enjoy it and I'ld like to share some of the lessons learned.

## Picking a topic

Ideally you want to pick a topic you feel 100% confident about. I have learned that people attending your training or talks welcome any information you can share no matter how simple or elementary it may feel to you. Don't ever think what you know may not be of interest to others because you would be wrong.

Lately I have been challenging myself a little more when picking a topic to train about. While is good to know the topic well, it is also extremely rewarding to pick a topic you'd like to learn more about. This may feel contrary to what I said ealier but hear me out. When you decide to train on a topic, you will spend a lot of time preparing, training, testing and reharsing. This is exactly how you learn a new skill. I can't tell you how many times I come out of training I did knowing more about the topic than before and also learning from people who attended the training. If you want to learn a new skill, teaching others about it could be the best way for you to learn it.

## Preparing for the training

Everyone has their own style for teaching or doing a presentation. Some people like to use slides and screenshots, others show recordings of their project or code. My personal preference is to build a working prototype. This to me presents many advantages, but it also means you will spend more time getting ready.

My training workshops usually include very little slides because the majority of the training will be spent writing actual code and building the prototype during the training.

Here's my typical process for preparing for a training workshop:

- Identify a prototype that serves the purpose of the training. If I am teaching a workshop about component based development I would normally pick something that involves the different aspects of component based development (attoms, nested components, reusable components, etc.)

- Build the prototype upfront to ensure you have a working model to demo and go by.

- Once prototype is built, create a public repo so you can share the working prototype

- Write step-by-step instructions to building the prototype. Normally I would break the prototype down into small components, [atoms](http://bradfrost.com/blog/post/atomic-web-design/#atoms).

- Test, test and test. You want to make sure yoru audience will not run insto unexpected issues while following your instructions. For this reason you need to make sure you test your instructions. Ask a friend or colleague to go through each of your excercises to ensure thing work as expected.

- Provide a pre-training evaluation. A quick set of questions that will give you an idea of people's skills level as well as environment (Linux, Widows, OSX). This will help you plan ahead of time.

- Build a simple slide deck for introductions and agenda purposes. Mainly I move away from slides as soon as introduction and agenda is done. The rest of the training is all hands on.


## Communicate with your audience ahead of time

As you will learn, one thing that can really kill a lot of the time during training is assisting people with their local environment setup. I have conducted training workshops where I've spent half the time helping people with their environment. For this reason, nowadays I communicate with the people ahead of time to ensure everyone's local environment is ready to go.

I normally make myself available once or twice in an evening through a google hangout to assit anyone who may need help. I also provide detailed instructions on how to get their local environment ready. This could save you a lot of time during training. In addition, for those who did spend the time on getting their environment ready, it's not fair that they have to be held back because someone did not make an effort to setup their environment.

I make myself available ahead of training but if someone is still having issues because of neglect, I don't hold the rest of the class back. I try to help them but at some point I move on.

## During training

If possible, get help from someone who is also well-versed with the topic so they can assist you help people who may get stuck. Nothing is more frustrating that havign to break the flow of the training to help people who get stuck. Having someone else help you with this allows you to continue with the training and not have everyone loose momentum.

## Finally

Enjoy yourself. Make sure you and your audience have fun. If you show excitement in what you are doing people will get excited as well.

Tags for this post

- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Four black wall arts on brown wall](https://mariohernandez.io/images/thumbs/frames.webp)





  December 13, 2020



  Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

- ![Train tracks surrounded by tree lines](https://mariohernandez.io/images/thumbs/attributes.webp)





  January 10, 2019



  As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.

- ![Person taking a picture with their phone](https://mariohernandez.io/images/thumbs/crop-thumb.webp)





  August 18, 2024



  Cropping images in Drupal is a great way to ensure your images always look their best.


 [See more posts](https://mariohernandez.io/blog)

## Flexible Headings with Twig
[Skip to content](https://mariohernandez.io/blog/flexible-headings-with-twig/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Stacked rocks by the beach](https://mariohernandez.io/images/flexible-headings.webp)

> Proper use of headings h1-h6 in your project presents many advantages incuding semantic markup, better SEO ranking and better accesibility.

**_Updated April 3, 2020_**

Building websites using the component based approach presents all kinds of advantages over the traditional page building approach. Today I’m going to show how to create what would normally be an Atom if we use the atomic design approach for building components. We are going to take this simple component to a whole new level by providing a way to dynamically controlling how it is rendered.

## The heading component

Headings are normally used for page or section titles and are a big part of making your website SEO friendly. As simple as this may sound, headings need to be carefully planned. A typical heading would look like this:

```html
<h1>This is a Heading 1</h1>
```

The idea of components is that they are reusable, but how can we possibly turn what already looks like a bare bones component into one that provides options and flexibility? What if we wanted to use a h2 or h3? or what if the title field is a link to another page? Then the heading component would probably not work because we have no way of changing the heading level from h1 to any other level or add a URL. Let's improve the heading component so we make it more dynamic.

## Enter Twig and JSON

Twig offers many advantages over plain HTML and today we will use some logic to transform the static heading component into a more dynamic one.

Let’s start by creating a simple JSON object which we will use as data for Twig to consume. We will build some logic around this data to make the heading component more dynamic. This is typically how I build components on projects I work on.

1. In your project, typically within the components/patterns directory create a new folder called **heading**
2. Inside the heading folder create a new file called **heading.json**
3. Inside the new file paste the code snippet below

```json

{
  "heading": {
    "heading_level": "",
    "modifier": "",
    "title": "This is the best heading I've seen!",
    "url": ""
  }
}

```

So we created a simple JSON object with 4 keys: **heading\_level**, **modifier**, **title**, and **url**.

- The `heading_level` is something we can use to change the headings from say, h1 to h2 or h3 if we need to.
- The `modifier` key allows us to pass a modifier CSS class when we make use of this component. The modifier class will make it possible for us to style the heading differently than other headings, if needed.
- The `title` key is the title's string of text that will become the title of a page or a component.
- ... and finally, the `url` key, if present, will allow us to wrap the title in an `<a>` tag, to make it a link.

4. Inside the heading folder create a new file called **heading.twig**
5. Inside the new file paste the code snippet below

```php

<h{{ heading.heading_level|default('2') }} class="heading{{ heading.modifier ? ' ' ~ heading.modifier }}">
  {% if heading.url %}
    <a href="{{ heading.url }}" class="heading__link">
      {{ heading.title }}
    </a>
  {% else %}
    {{ heading.title }}
  {% endif %}
</h{{ heading.heading_level|default('2') }}>

```

* * *

Wow! What's all this? 😮

Let's break things down to explain what's happening here since the twig code has changed significantly:

- First we make use of `heading.heading_level` to complete the number part of the heading. If a value is not provided for _heading\_level_ in the JSON file, we are setting a default of 2. This will ensue that by default we will have a `<h2>` as the title, much better than `<h1>` as we saw before. This value can be changed every time the heading isused. The same approach is taken to close the heading tag at the last line of code.
- Also, in addition to adding a class of `heading`, we check whether there is a value for the `modifier` key in JSON. If there is, we pass it to the heading as a CSS class. If no value is provided nothing will be added.
- In the next line line, we check whether a URL was provided in the JSON file, and if so, we wrap the `Flexible Headings with Twig` variable in a `<a>` tag to turn the title into a link. The `href` value for the link is \`\`. If no URL is provided in the JSON file, we simply print the value of `Flexible Headings with Twig` as plain text.

## Now what?

Well, our heading component is ready but unfortunately the component on its own does not do any good. The best way to take advantage of our super smart component is to start using it within other components.

## Putting the heading component to use

As previously indicated, the idea of components is so they can be reusable which eliminates code duplication. Now that we have the heading component ready, we can reuse it in other templates by taking advantage of twig’s `include` statements. That will look like this:

```php

<article class="card">
  {%
    include '@components/heading/heading.twig' with {
      "heading": heading
    } only
  %}
</article>

```

The example above shows how we can reuse the heading component in the `card` component by using a Twig’s `include` statement.

**NOTE**: For this to work, the same data structure for the heading needs to exist in the card’s JSON file. Or, you could also alter the heading's values in twig, like this:

```php

<article class="card">
  {%
    include '@components/heading/heading.twig' with {
      "heading": {
        "heading_level": 3,
        "modifier": 'card__title',
        "title": "This is a super flexible and smart heading",
        "url": "https://mariohernandez.io"
      }
    } only
  %}
</article>

```

You noticed the part `@components`? this is only an example of a namespace. If you are not familiar with the [component libraries](https://www.drupal.org/project/components) Drupal module, it allows you to create namespaces for your theme which you can use to nest or include components as we see above.

### End result

The heading component we built above would look like this when it is rendered:

```html
<h3 class="heading card__title">
  <a href="https://mariohernandez.io" class="heading__link">
    This is a super flexible and smart heading
  </a>
</h3>
```

## In closing

The main goal of this post is to bring light on how important it is to build components that are not restricted and can be used throughout the site in a way that does not feel like you are repeating yourself.

* * *

#### Additional Resources:

[Managing heading levels in design systems](https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3).

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Twig](https://mariohernandez.io/tag/twig/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A book, tablet, mouse, keyboard and monitor on a desktop](https://mariohernandez.io/images/thumbs/emily-bernal.webp)





  October 27, 2023



  In this seven-part guide I cover everything you need to know about responsive images and how to manage them in a Drupal site.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Building Card Components
[Skip to content](https://mariohernandez.io/blog/how-to-build-a-card-component/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Person holding a card](https://mariohernandez.io/images/featured-image.webp)

One of the most popular components on any website I've worked on is the "Card" component. Depending on the website, the card component is used to group various pieces of content into a container which can be used throughout your website.

Read the full article on [how to build a card comonent](https://www.mediacurrent.com/blog/how-build-card-component/).

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.


 [See more posts](https://mariohernandez.io/blog)

## Social Share Links
[Skip to content](https://mariohernandez.io/blog/adding-social-share-links-to-gatsby/#main-content) [Gatsby](https://mariohernandez.io/tag/gatsby/)

![Beach waves coming to shore](https://mariohernandez.io/images/beach.webp)

> Sharing is caring.

I've been working on my personal blog (this site), for a while. I built it with [Gatsby](https://www.gatsbyjs.org/) and little by little I have been adding extra functionality. Today I'm going to show you how I added social sharing links to allow visitors to share my posts with others using Twitter, Facebook, LinkedIn, and other channels.

For an example of the Sharing links, look at the icons above the hero image on this and every post on this site.

There are many ways to accomplish this but from the begining I wanted to use something that was simple and did not require too much overhead to run. There are solutions out there that require third libraries and scripts and I wanted to avoid that. A while back I was introduced to [Responsible Social Share Links](https://jonsuh.com/blog/social-share-links/). The beauty of Responsible Social Links is that they do not need any Javascript to work. They use the sharing links available for most social media channels.

Let's take a look at some examples of what these links look like:

**Facebook**

```html
https://www.facebook.com/sharer/sharer.php?u=URL_TO_SHARE
```

**Twitter**

```html
<a href="https://twitter.com/intent/tweet/
     ?text=Check this out
     &url=https://mariohernandez.io
     &via=imariohernandez"
   target="_blank">Share on Twitter</a>
```

Most of these links accepts several parameters. You can see these parameters in more details at the Responsible Social Share Links page for additional information. In addtion, some systems may require you to encode the links but luckily for us Reacts does this for us automatically.

## Using the links in a Gatsby site (or React for that matter)

You may think, that's so easy, just modify each of the links with my personal information and done. That's true to an extend. However, the tricky part is dynamically passing the current page's URL and post title to your sharing link. So here's how I did it:

1. Edit your blog post template. In my case my blog post template is `/src/templates/blog-post.js` This is based on the Gatsby starter I used. Your mileage may vary.

2. Add the following code where you wish to display the sharing links to generate a twitter share link:


```javascript
<Share>
    <ShareLink
      href={`https://twitter.com/intent/tweet/?text=${post.frontmatter.title}
      &url=https://mariohernandez.io${post.frontmatter.path}%2F&via=imariohernandez`}>
      // Optional icon
      <LinkLabel>Share on Twitter</LinkLabel>
    </ShareLink>
</Share>
```

The example above creates a twitter share link and uses the data variables I am already using to print the blog post content. As you know, Gatsby uses GraphQL to query the posts and by doing this you have access to each of the fields in your post (i.e. title, path, tags, date, etc.).

In the example above, I am passing `${post.frontmatter.title}` so when the post is shared the title of the post is included as your tweet text. In addition, I am linking to the current post by passing `${post.frontmatter.path}`. Finally I am passing my twitter handle.

There are other parameters you can pass to your share links. Things like hashtags, mentions, and more. Following the same pattern you can do the same for Facebook, LinkedIn and others.

## A much cleaner approach

You may have noticed that I created the sharing snippet directly in the blog-post.js template. A much cleaner approach would be to create a new React component for all yoru sharing links and include the component in your blog-post.js.

Here's the full snippet for all the social channels I am using:

```javascript
<Share>
  <ShareLabel>Share this post</ShareLabel>
  <ShareSocial>
    <ShareItem>
      <ShareLink
        href={`https://twitter.com/intent/tweet/?text=${
          post.frontmatter.title
        }&url=https://mariohernandez.io${post.frontmatter.path}%2F&via=imariohernandez`}
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-twitter"
          >
            <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" />
          </svg>
        </span>
        <LinkLabel>Share on Twitter</LinkLabel>
      </ShareLink>
    </ShareItem>
    <ShareItem>
      <ShareLink
        href={`https://www.facebook.com/sharer/sharer.php?u=https://mariohernandez.io${
          post.frontmatter.path
        }`}
        target="_blank"
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-facebook"
          >
            <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
          </svg>
        </span>
        <LinkLabel>Share on Facebook</LinkLabel>
      </ShareLink>
    </ShareItem>
    <ShareItem>
      <ShareLink
        href={`https://www.linkedin.com/shareArticle?mini=true&url=https://mariohernandez.io${
          post.frontmatter.path
        }&title=${post.frontmatter.title}&source=${post.frontmatter.title}`}
        target="_blank"
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-linkedin"
          >
            <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
            <rect x="2" y="9" width="4" height="12" />
            <circle cx="4" cy="4" r="2" />
          </svg>
        </span>
        <LinkLabel>Share on LinkedIn</LinkLabel>
      </ShareLink>
    </ShareItem>
  </ShareSocial>
</Share>
```

* * *

## In Closing

If you want to have a clean and light weight way to share your content with others, the Responsible Sharing Links may just be what you need.

Tags for this post

- [Gatsby](https://mariohernandez.io/tag/gatsby/)
- [Social Share](https://mariohernandez.io/tag/social-share/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Person holding a card](https://mariohernandez.io/images/thumbs/featured-image.webp)





  August 2, 2018



  Building components is a lot of fun but it takes good planning and attention to detail to build components which are flexible and reusable.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Attributes in Twig
[Skip to content](https://mariohernandez.io/blog/handling-drupal-attributes-in-components/#main-content) [Twig](https://mariohernandez.io/tag/twig/)

![Train tracks surrounded by tree lines](https://mariohernandez.io/images/attributes.webp)

[Photo by: Antoine Beauvillain](https://unsplash.com/@antoinebeauvillain)

In Drupal's twig templates you'll often see an attributes variable being output within the template. This variable is how core and contrib modules inject their CSS classes, an ID, or data attributes onto template markup. You'll also find `title_prefix` and `title_suffix` variables. These are used by core and contrib modules to inject markup into twig templates. A good example of this is the core Contextual Links module. If you were to remove the attributes , title\_prefix , and title\_suffix variables from a node template, for example, then the Contextual Links module would no longer have a way to add its drop-down to the display of nodes.

In some cases this may not be an issue for you, but in general it's best to plan to accommodate those Drupal-specific variables in your component markup so that when you integrate Drupal content into your components, other features can be available too.

Since the attributes variable can include class, id, and data attributes in one variable, we need to make sure we only combine Drupal’s classes with ours, and let the other attributes render without Drupal classes. This can be accomplished on the main wrapper of the component template.

```php

<article class="card{{ attributes ? ' ' ~ attributes.class }}"
  {{ attributes ? attributes|without(class) }}>
  {{ title_prefix }}
  {{ title_suffix }}
  {% if image %}
    <div class="card__image">
      {{ image }}
    </div>
  {% endif %}
  <div class="card__content">
    {% if heading %}
      {%
        include '@components/heading/heading.twig' with {
          "heading": {
            "title": heading.title,
            "url": heading.url,
            "heading_level": heading.heading_level,
            "classes": 'card__heading'
          }
        } only
      %}
    {% endif %}
  </div>
</article>

```

Note that the `without` twig filter in this example is a Drupal-specific filter, so for the component we'll want to make sure we’re using one that supports Drupal’s custom filters (most design systems such as KSS node, and Pattern Lab have configuration options that support Drupal twig filters).

Now if we integrate our card component with Drupal (i.e. `node--card.html.twig`), we can ensure Drupal's attributes and contextual links will be available when the component is rendered. The node template, also known as presenter template, would look something like this:

```php

{% set rendered_content = content|render %}
{%
   set heading = {
     title: label,
     url: url,
     heading_level: '4',
     attributes: title_attributes
 }
%}
{%
  embed '@components/card/card.twig' with {
    attributes: attributes,
    title_prefix: title_prefix,
    title_suffix: title_suffix,
    heading: heading,
    image: content.field_image is not empty ? content.field_image,
  } only
%}

```

- First we're triggering a full render of the content variable.
- Then we set up a variable for the Heading field,
- Finally we are using an `embed` twig statement to integrate the Card component. In the embed we are mapping all the Card fields with Drupal's data. We also pass in Drupal-specific items such as `title_prefix`, `title_suffix`, `attributes`, etc.

Our card component will be rendered with all Drupal's attributes and the ability to be edited inline thanks to the contextual links.

Hope this helps you in your component development journey.

Tags for this post

- [Twig](https://mariohernandez.io/tag/twig/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Four black wall arts on brown wall](https://mariohernandez.io/images/thumbs/frames.webp)





  December 13, 2020



  Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Effective Training Workshop
[Skip to content](https://mariohernandez.io/blog/our-best-training-yet/#main-content) [Drupalcon](https://mariohernandez.io/tag/drupalcon/)

![Team members conducting training workshop](https://mariohernandez.io/images/students.webp)

For the past few years we've been working on a training curriculum around [Component Based Development](https://events.drupal.org/seattle2019/training/component-based-development) and every time we finish updating it for an upcoming event we feel really good about it and think we finally got it. In reality, a training curriculum for a topic so complex as Component Development is probably never finished.

After BADCamp's training workshop last year we thought we were done updating the training material and we felt it was so good that it would carry us all the way to DrupalCon Seattle 2019. We could not have been more wrong. Soon after BADCamp we made the decision to move from [KSS Node](https://github.com/kss-node/kss-node) to [Pattern Lab](https://patternlab.io/) for handling our pattern's workflow and living styleguide. This meant our entire training material needed to be updated in time for DrupalCon. Needless to say we spent months ensuring the material was current, relevant and effective.

DrupalCon Seattle was a total success. Our training sold out in about two weeks and end up with almost 50 people in attendance which is probably a record for us. But with more students the chances of more issues or something going wrong increase. We make a big effort to ensure we provide an automated environment for student to use. This allows us provide all tools needed during training pre-configued and tested ensuring a more predictable and consistent behavior by students' systems. However, there are always cases in which a student decides not to use our environment and either due to technical skills or strict restrictions on their systems they need to use a workflow we have not tested.

This was certainly the case at DrupalCon and we had to find ways to help those students to be able to follow along during training.

One way to help people with their local setup is by conducting what we call "Office Hours". We reserve an hour or two weeks before the training where anyone who needs assistance with their local environment can join us online and we attempt to get them up and running. We helped several individuals this way. Although it is more work for us it allows us to address any issues off hours rather than spending valuable training time fixing computer problems.

![Team members standing infront of large Drupal Icon](https://mariohernandez.io/images/team.jpg)

The training was engaging and we received great feedback. Our curriculum, although not perfect, is relevant and well received. Having done this a few times at small and large events gives us confidence and makes it easier next time we do it.

Our team is dedicated and passionate about training and this would not be possible without them. Especial thanks go to [Eric Huffman](https://www.mediacurrent.com/who-we-are/team/eric-huffman/) who has done most of the heavy lifting with the local environment automation. [Kelly Dassing](https://www.mediacurrent.com/who-we-are/team/kelly-dassing/), who as a Director of Project Management provides a unique perspective to those in attendance who may not be developers. [Tobias Williams](https://www.mediacurrent.com/who-we-are/team/tobias-williams/) who is an all around great FE develper and Engineer, and [Mark Casias](https://www.mediacurrent.com/who-we-are/team/mark-casias/), who is able to answer the hard Back-end question that the rest of the team may not be as proficient as he is.

Should you have training needs please reach out and we would be happy to put together a curriculum that fits your specific needs or that of your team.

For a more in-depth look at how we prepare for a training workshop ready my blog post on [Planning for an Effective Training Workshop](https://www.mediacurrent.com/blog/planning-effective-training/).

Until next time ... Cheers!.

Tags for this post

- [Drupalcon](https://mariohernandez.io/tag/drupalcon/)
- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.


 [See more posts](https://mariohernandez.io/blog)

## Automated DDEV Drupal Setup
[Skip to content](https://mariohernandez.io/blog/building-an-automated-ddev-based-drupal-environment/#main-content) [Ddev](https://mariohernandez.io/tag/ddev/)

![Rocks stack from big to small](https://mariohernandez.io/images/rocks.webp)

[Photo by: Markus Spiske](https://unsplash.com/photos/IiEFmIXZWSw)

A successful training experience begins before we step foot in the training room. Or, in these days of distance learning, it begins before students login to your training platform. The challenge is having an environment that is easy for students to setup and provides all the tooling required for the training. Configuring a native development environment is no easy task. Web development tools have gotten more complex with the years and it's a huge barrier for even experienced developers. My goal in setting up this new environment was to have everything completely configured and automated so students only needed to run one command. Very ambitious.

**WARNING**: The codebase shared in this post is only intended for local development. **DO NOT** use this project in a production website.

**About DDEV**: The official name is [DDEV-Local](https://ddev.readthedocs.io/en/stable/). For simplicity I use DDEV in this tutorial.

* * *

**Here are the tools and configuration requirements for this environment**:

- Docker
- DDEV
- Composer
- Drush
- Drupal 8 and contrib modules
- Pre-built Drupal entities (content types, paragraph types, views, view modes, taxonomy, image styles, and more)
- Custom Drupal 8 theme
- Twig debugging enabled by default and Drupal cache disabled by default
- NodeJS, NPM, and NVM
- Pattern Lab
- Gulp, ESLint, Sass Lint, BrowserSync, Autoprefixer, and many many more node dependencies

## Desired behavior

My main objective was to simplify the building and interaction with the environment, by:

- Only require Docker and DDEV to be installed on host computer
- Reducing the number of steps for building the environment to one command, `ddev start`
- Execute most if not all commands in the containers, not the host machine (Drush, Composer, Pattern Lab, etc.)
- Access Pattern Lab running in the web container, from the host machine

**Yes, it is crazy, but let's see how this turned out**

First things first. As I said before, installing Docker and DDEV are the only two things students will need to install. There is no way around this. Luckily there are a lot of resources to help you with this. [The DDEV docs](https://ddev.readthedocs.io/en/stable/#installation) is a great place to start.

## Setting up a Drupal site

Before we start, I'd like to clarify that this post focuses on outlining the process and steps for automating a local environment. However, before we can automate, we need to build all the pieces. If you just want to grab the final product [here's the repo](https://github.com/mariohernandez/drupaltraining), otherwise, read on.

As of Drupal 8.8.0, [Composer project templates](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates) are now available as part of Drupal core. These project templates are recommended for building new Drupal sites as they serve as a starting point for creating a Composer-managed Drupal site.

Two things we will be doing with our Drupal project:

1. Drupal dependencies and modules will not be commited to the git repo. They will be downloaded with Composer when the project is being built.
2. Composer will not be installed in the host system, instead, we will use the composer version that comes with DDEV's web container.

### Let's start

01. Create a new directory for your project. The directory name should be lowercase and alpha-numeric characters only. For this example I will name it **drupaltraining** and will create it in my **/Sites** directory. Using your command line tool create the new directory


    ```bash
    mkdir drupaltraining
    ```

02. Now navigate into the newly created directory


    ```bash
    cd drupaltraining
    ```

03. Run the DDEV command below to setup a new Drupal project


    ```bash
    ddev config --project-type=drupal8 --docroot=web --create-docroot
    ```


    - This will create a `.ddev` directory with basic Drupal configuration.
    - It will also create `settings.php` and settings.ddev.php\` files inside **web/sites/default**.
    - Finally, it creates a Drush directory.
    - Keep in mind, Drupal is not in place yet, this simply sets the environment for it.
04. Now start DDEV to create the containers.


    ```bash
    ddev start
    ```


    - After the project has been built, you will see a link to open Drupal in the browser. For this project the link should be `https://drupaltraining.ddev.site` (ignore for now). If you have not installed **mkcert** ( `mkcert -install`), the link you see may use `http` instead of `https`. That's fine, but I'd recommend always using https by installing `mkcert`.
05. Now we are going to create the codebase for Drupal by using the official [Drupal community\\
    \\
    Composer template](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates).


    ```bash
    ddev composer create "drupal/recommended-project:^8"
    ```


    _Respond **Yes** when asked if it's okay to override everything in the existing directory_.

    - This will setup the codebase for Drupal. This could take a while depending on your connection.
    - `composer.json` will be updated so Drupal is added as a project's dependency.
    - New `settings.php` and `settings.ddev.php` files are created.
    - Using `ddev composer create` uses the version of composer that comes as part of the DDEV's web container. This means composer is not required to be installed in the host's computer.
    - One thing I love about using the new composer template is the nice list of next steps you get after downloading Drupal's code base. So useful!
06. Now let's grab some modules


    ```bash
    ddev composer require drupal/devel drupal/admin_toolbar drupal/paragraphs drupal/components drupal/viewsreference drupal/entity_reference_revisions drupal/twig_field_value
    ```


    - This will download the modules and update **composer.json** to set them as dependencies along with Drupal. The modules and Drupal's codebase will not be commited to our repo.
07. Let's add Drush to the project


    ```bash
    ddev composer require drush/drush
    ```


    - Installing Drush as part of the project which will run in the web container will make it possible to run drush commands ( `ddev drush <command>`), even if the host does not have drush installed.
08. Now launch Drupal in the browser to complete the installation


    ```bash
    ddev launch
    ```


    - This will launch Drupal's intall page. Drupal's url will be **[https://drupaltraining.ddev.site](https://drupaltraining.ddev.site/)**. Complete the installation by using the Standard profile. Since the `settings.ddev.php` file already exists, the database configuration screen will be skipped from the installation.
09. Make a copy of `example.settings.local.php` into **web/sites/default**


    ```bash
    cp web/sites/example.settings.local.php web/sites/default/settings.local.php
    ```


    - This is recommended to override or add new configuration to your Drupal site.
10. Update `settings.php` to include `settings.local.php`.


    ```php
    if (file_exists($app_root . '/' . $site_path . '/settings.local.php')) {
      include $app_root . '/' . $site_path . '/settings.local.php';
    }
    ```


    - I'd suggest adding the above code right after the `settings.ddev.php` include already in settings.php. This will allow us to override configuration found in settings.ddev.php.
11. Let's change Drupal's default config directory. Doing this will export any configuration outside the `web` directory in Drupal. This is a good security measure. Let's also ignore a couple of folders to avoid drupal errors.


    ```php
    if (empty($settings['config_sync_directory'])) {
      $settings['config_sync_directory'] = '../config/sync';
    }

    $settings['file_scan_ignore_directories'] = [\
      'node_modules',\
      'bower_components',\
    ];
    ```


    - First block changes the default sync directory to `drupaltraining/config/sync`. If you look inside settings.ddev.php you will see that this directory is inside `web`. We want to store any configuration changes outside the web directory.
    - Second block sets up Drupal to ignore `node_modules` and `bower_components`. Drupal may look for twig templates inside these directories and could cause Drupal to crash. Ignoring these directories solves these issues.
12. Since we've made changes to DDEV's configuration, restart DDEV


    ```bash
    ddev restart
    ```


That's quite the process, isn't it? The good news is this entire process will be eliminated when we finish automating the environment.

## Drupal 8 custom theme

The project's theme is called `training_theme`. This is a node-based theme, and will be built with [Mediacurrent's theme generator](https://github.com/mediacurrent/theme_generator_8), which will provide:

- A best-practices Drupal 8 theme
- Pattern Lab integration
- Automated Front-End workflow
- Component-based-ready environment
- Production-ready theme

The final DDEV project will include the new Drupal 8 theme so there is no need to create it now, but if you want to see how the Theme Generator works, [Watch the video tutorial](https://mariohernandez.io/blog/mediacurrent-theme-generator) I recorded.

## Automating our environment

Now that Drupal has been setup let's begin the automation process.

### Dockerfile

A web Docker container comes with Node and NPM installed. This will work in most cases, but the Drupal theme may use a version of node not currently available in the container. In addition, the web container does not include Node Version Manager ( [NVM](https://github.com/nvm-sh/nvm)), to manage multiple node versions. If the tools we need are not available in the web or db images/containers, there are ways to modify them to include the required tools. One of those ways is an add-onDockerfile in your project's **.ddev/web-build** or **.ddev/db-build**, depending which container you are trying to modify.

Inside **.ddev/web-build** create a file called **Dockerfile** (case sensitive), and in it, add the following code:

```bash
ARG BASE_IMAGE
FROM $BASE_IMAGE
ENV NVM_DIR=/usr/local/nvm
ENV NODE_DEFAULT_VERSION=v14.2.0
RUN curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh -o install_nvm.sh
RUN mkdir -p $NVM_DIR && bash install_nvm.sh
RUN echo "source $NVM_DIR/nvm.sh" >>/etc/profile
RUN bash -ic "nvm install $NODE_DEFAULT_VERSION && nvm use $NODE_DEFAULT_VERSION"
RUN chmod -R ugo+w $NVM_DIR
```

The code above sets an environment variable for default node version (v14.2.0), which is the node version the theme uses at the time of this setup. It installs and configures NVM, and makes NVM executable by updating the container's bash profile. A Dockerfile runs while the image or container is being built to alter any default configuration with the code found in the Dockerfile.

### Custom DDEV commands

The Drupal 8 theme for this project uses Node for most of its tasks. To compile CSS, JavaScript, and Twig we need to run commands such as `npm install`, `npm run build`, `npm run watch`, and others. Our goal is to be able to run these commands in the web container, not the host computer. Doing this eliminates the need for students to install any node-related tools which can get really complicated. While we could achieve this by asking students to first SSH into the web container ( `ddev ssh`), then navigate into **/web/themes/custom/training\_theme/**, then run the commands, I want to make it even easier for them. I want them to be able to run the commands from any directory within the project and to not have to ssh into the web container. To achieve this we need to create a couple of custom commands.

Custom commands can be created to run in containers as well as the host machine. Since we want to run these commands in the web container, we are going to create the commands inside **.ddev/commands/web/**. Custom commands are bash script files.

#### NVM custom command

- Inside **.ddev/commands/web/** create a new file called **nvm**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run any nvm command.
## Usage: nvm [flags] [args]
## Example: "nvm use or nvm install"
source /etc/profile && cd /var/www/html/web/themes/custom/training_theme && nvm $@
```

- Since this is a bash script, `#!/bin/bash` is required as the first line in the file.
- A description of the script is a good practice to explain what the script does.
- Pay close attention to `## Usage: nvm [flgas] [args]`. This is what makes the commands work. The \[flags\] and \[args\] are ways to pass arguments to the command. For example, `nvm` on its own won't do much, but `use` or `install` can be passed as parameters to complete the commands `nvm use` or `nvm install`. Being able to run these commands will allow us to install new versions of Node later on if needed.
- Next we are adding examples of potential commands that can be run.
- Finally, you see the code or actual commands. `source /etc/profile` is basically resetting the container's bash profile so NVM can run. Then we navigate into the `training_theme` directory within the container where the nvm commands will be executed. So technically in the script above we are running 3 commands in one. Using `&&` in between each command lets us combine or concatenate them. The `$@` after nvm represent the flags or arguments we can pass (i.e. _use_ or _install_).

**Running the new commands**: Every custom command needs to be executed by adding `ddev` before the command. For example: `ddev nvm use`. Using ddev infront of the command instructs the system to run the commands in the containers, rather than the host computer.

#### NPM custom commands

We will also create a custom script to run NPM commands. This will be similar to the NVM script. This new script will be executed as `ddev npm install` or `ddev npm run build`, etc. The npm commands will allow us to install node dependencies by the theme as well as execute tasks like compiling code, linting code, compressing assets, and more.

- Create a new file inside **.ddev/commands/web** and call it **npm**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run npm commands inside theme.
## Usage: npm [flags] [args]
## Example: "npm install or npm rebuild node-sass or npm run build or npm run watch"
cd /var/www/html/web/themes/custom/training_theme && npm $@
```

- Most of the code here is similar to the previous script, except instead of **nvm** we will run **npm**.
- Notice we are again navigating into the theme directory before running the command. This make is possible for the custom commands we are creating to be ran from any directory within our project while still being executed inside the **training\_theme** directory in the container.

#### Drush custom command

Let's create one last custom command to run drush commands within the DDEV containers

- Create a new file inside **.ddev/commands/web** and call it **drush**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run drush inside the web container
## Usage: drush [flags] [args]
## Example: "ddev drush uli" or "ddev drush sql-cli" or "ddev drush --version"
drush $@
```

- This will allow us to run drush commands in the container but using `ddev drush <command>` (i.e. `ddev drush cr`, `ddev drush updb -y`, etc.).

So that's it for custom commands. By having custom commands for nvm and npm, we can now successfully run any theming related tasks.

## Automating Drupal's setup

We want to streamline the drupal installation process. In addition, we want to be able to import a custom database file to have access to all the infrastructure needed during training. This includes content types, paragraph types, views, view modes, image styles, and more. Enter [DDEV hooks](https://ddev.readthedocs.io/en/stable/users/extending-commands/).

### DDEV Hooks

Hooks are a great way to perform tasks before or after DDEV starts. There are tasks that need to happen in specific sequence and hooks allow us to do just that. So what's the differnce between custom commands and hooks? Technically hooks can be considered custom commands, but the difference is that they are executed automatically before or after DDEV starts, whereas custom commands are ran on demand at any time. DDEV needs to be running if custom commands are intended to run in containers. Back to hooks, Let's build a **post-start** hook.

Hooks can be ran as **pre-start**, **post-start**, and **after-db-import**. Also, hooks can be executed inside containers and/or the host machine. In our case all the tasks we outlined above will be ran after DDEV starts and most of them in Docker's containers.

- Open **.ddev/config.yaml** and add the following code at the bottom of the file. There may already be a **hooks** section in your file. Be sure indentation in the file is correct.

```yaml
  hooks:
      post-start:
        - composer: install
        - exec: /var/www/html/db/import-db.sh
        - exec: drush updb -y
        - exec: drush cim -y
        - exec-host: cp -rf web/sites/example.development.services.yml web/sites/development.services.yml
        - exec-host: cp -rf web/assets/images/* web/sites/default/files/images/
        - exec: drush cr
        - exec-host: ddev launch /user
```

- **post-start:** indicates tasks declared will run after DDEV container's have started. We want the web and db containers available before running any of the tasks.
- `composer: install` will download all dependencies found in `composer.json` (Drupal core, modules, drush and others).
- `exec: /var/www/html/db/import-db.sh` is a custom script which imports a custom database file (provided in this project). We will go over this script shortly. Importing a custom database builds the Drupal site without having to install Drupal as long as Drupal's codebase exists.
- `exec: drush cim -y`, `exec: drush updb -y`, and `exec: drush cr`, are basic drush commands.
- `exec-host: cp -rf web/sites/example.development.services.yml web/sites/development.services.yml` will create a new `development.services.yml`. This is needed because when Drupal is setup, `development.services.yml` is overridden and since we are using custom configuration in that file to enable twig debugging, we need to restore the configuration by replacing the file with a copy of our own.
- `exec-host: cp -rf web/assets/images/* web/sites/default/files/images/` copies a collection of images used in the demo content added to the site.
- Finally, `exec-host: ddev launch /user` will open a fully configured Drupal website in the browser.

**Login to Drupal**: Username: `admin`, password: `admin`

### Import database script

Now let's write the script to import the database we are using in the hook above.

- In your project's root, create a new directory called **db**
- In the new directory create a new file called `import-db.sh` and add the following code:

```bash
#!/bin/bash
# Use a table that should exist in your database.
if ! mysql -e 'SELECT * FROM node__field_hero;' db 2>/dev/null; then
  echo 'Importing the database'
  # Provide path to custom database.
  gzip -dc /var/www/html/db/drupaltraining.sql.gz | mysql db
fi
```

- This is again another bash script which performs a database import but only if the database is empty or clean. We do this by checking if one of the tables we expect in the database exists ( `node__field_hero`). If it does, the database is not imported, but if it doesn't it will import the database. This table can be any table you know it should exist.

- Notice the script calls for a database file named `drupaltraining.sql.gz`. This means the database file shold exist inside the **db** directory alongside the `import-db.sh` script. This database file was created/exported after Drupal was configured with all training required infrastructure and settings.

- Make the script executable


```bash
chmod +x db/import-db.sh
```

- This will ensure the script can be executed by DDEV, otherwise we would get a **permission denied** error.

This does it for automation. The next few tasks are things that improve the development environment. Some of these tasks are optional.

## Exposing Pattern Lab's port in host computer

Since our goal is to not have to install any Front-End tools in the host computer, running Pattern Lab has to be done in the web container. The problem is we can't open Pattern Lab in the host's browser if Pattern Lab is running in the container. For this to work we need to expose the port in which Pattern Lab runs to the host machine. In this environment, that port is 3000 (this port number may vary). We identify this port by running `npm run watch` inside the `training_theme` directory. This will provide a series of links to access Pattern Lab in the browser.

Under the hood, DDEV uses docker-compose to define and run the multiple containers that make up the local environment for a project. docker-compose supports defining multiple compose files to facilitate sharing Compose configurations between files and projects, and DDEV is designed to leverage this ability.

### Creating a new docker-compose.\*.yaml

A docker-compose file allows to do many things including exposing ports from the containers to the host computer.

On a typical Pattern lab project if you run `npm start` you will see Pattern Lab running on `http://localhost:3000`. In this environment the equivalent command is `ddev npm run watch`. Since this environment is running Pattern Lab in the web container, the only way to access Pattern Lab in the browser is by having access to the container's port 3000. Exposing the port via the `http` or `https` protocols makes it possible to access Pattern Lab's UI page from the host machine.

1. Inside **.ddev/**, create a new file called **docker-compose.patternlab.yaml**

2. In the new file add the following code:


```yaml
# Override the web container's standard HTTP_EXPOSE and HTTPS_EXPOSE
# to access patternlab on https://drupaltraining.ddev.site:3000, or http://drupaltraining.ddev.site:3001.
version: '3.6'
services:
     web:
       # ports are a list of exposed *container* ports
       ports:
      - "3000"
    environment:
      - HTTP_EXPOSE=${DDEV_ROUTER_HTTP_PORT}:80,${DDEV_MAILHOG_PORT}:8025,3001:3000
      - HTTPS_EXPOSE=${DDEV_ROUTER_HTTPS_PORT}:80,${DDEV_MAILHOG_HTTPS_PORT}:8025,3000:3000
```

   - The name of the file is completely optional. It makes sense to use a name that is related to the action, app, or service you are trying to implement. In this example the name **docker-compose.patternlab.yaml** made sense.
   - How did we arrive at the content above for this file? DDEV comes with two files that can be used as templates for new configuration, one of those files is called **.ddev-docker-compose-base.yaml**. You can find all the code we added above in this file.
3. Restart DDEV to allow for the new changes to take effect:


```bash
ddev restart
```


   - The basics of the code above is modifying the web container's port 3000. We are exposing this port through the `http` and `https` protocols on the host machine.
4. For the above to work Pattern Lab needs to be running in the container:


```bash
ddev npm run watch
```


**Viewing Pattern Lab in the host machine**

- [https://drupaltraining.ddev.site:3000](https://drupaltraining.ddev.site:3000/) or
- [http://drupaltraining.ddev.site:3001](http://drupaltraining.ddev.site:3001/)

## Using NFS (optional)

Last but not least, enabling NFS in DDEV can help with performance of your application. NFS (Network File System) is a classic, mature Unix technique to mount a filesystem from one device to another. It provides significantly improved webserver performance on macOS and Windows. This is completely optional and in most cases you may not even need to do this. The steps below are for macOS only. [Learn more about NFS](https://ddev.readthedocs.io/en/stable/users/performance/#using-nfs-to-mount-the-project-into-the-web-container) and how to enable it in other Operating Systems like Windows.

- In your command line run

```bash
id
```

- Make note of `uid` (user id) and `gid` (group id).
- Open `etc/exports` in your code editor, and add the following code, preferably at the top of the file:

```bash
/System/Volumes/Data/Users/xxxx/Sites/Docker -alldirs -mapall=502:20 localhost
```

- Replace `xxxx` with your username. The full path shown above is required if you are using macOS Catalina.

- Replace `Sites/Docker` (This is my personal project's directory), with the directory name where your DDEV projects are created. Most people would mount the entire user's home directory, but I think only mounting the directory where your projects live is good enough ( `/Sites/Docker/`).

- Replace `502` and `20` with the values you got when you ran the `id` command above.

- Update DDEV's config.yml to enable NFS


```yaml
nfs_mount_enabled: true
```

- Restart DDEV

```bash
ddev restart
```

You should notice an improvement in performance in your Drupal website.

## In closing

I realize there is a lot here, but I am pretty happy with how this turned out. Thanks to all the work in this article, when one of the students wants to setup their training environment, all the have to do is run `ddev start`. I think that's pretty sweet! 🙌 Happy DDEVing!

* * *

### Giving credit

Before I started on this journey, I knew very little about DDEV. Thanks to the amazing help from [Randy Fray](https://www.drupal.org/u/rfay) from [Drud.com](http://drud.com/) and [Michael Anello](https://www.drupal.org/u/ultimike) from [DrupalEasy.com](http://drupaleasy.com/), I have learned a lot in the past weeks and wanted to share with other community members. You can find both, Randy and Michael on [Drupal's DDEV Slack Channel](https://drupal.slack.com/#/). They are extremely helpful and responsive.

### Resources

- [Final product repo](https://github.com/mariohernandez/drupaltraining)
- [Drupal composer project template](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates)
- [DDEV docs](https://ddev.readthedocs.io/en/stable/#installation)
- [Local Web Development with DDEV Explained](https://www.drupaleasy.com/blogs/ultimike/2018/11/new-book-local-web-development-ddev-explained) (Book)

Tags for this post

- [Ddev](https://mariohernandez.io/tag/ddev/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Styling Web Forms
[Skip to content](https://mariohernandez.io/blog/styling-forms-elements/#main-content) [Css](https://mariohernandez.io/tag/css/)

![Four black wall arts on brown wall](https://mariohernandez.io/images/frames.webp)

[Photo by: Leonardo Yip](https://unsplash.com/@yipleonardo)

Whether you are a veteran or just getting started with web development, working with web forms is not the sexiest thing but there is no avoiding them. Forms on a website are critical to the website's mission and the visitors using them. In this post I am going to show you how to properly style webforms and form elements so you can ensure they are consistent with your brand and provide a pleasant user experience.

#### Resources:

I have recording video tutorials on some of the concepts covered in this post. Scroll to the bottom if you are the kind of person who learns better watching tutorials.

## Where to start

One thing about forms you can count on is that they are not consistent. In today's API era forms can be generated from any source and you don't always have control of their HTML. I personally work with [Drupal](https://drupal.org/) a lot and even within it forms can originate from Views, Blocks, Nodes, Paragraphs, Modules, and more. I imagine this is the case with most Content Management Systems. So how do you address something where you can't always predict source or markup of forms?

### If you can't beat them, join them

Whether is Drupal or other system, it is best to let that system dictate the markup of forms. Try to bend a system to your needs can prove challenging and not worth the trouble. This is the approach I take and so far this has worked very well for me.

## Attributes are your friends

As a Front-End developer for many years, I love a good css class. They make my job a lot easier than not having a class. When it comes to form elements however, it is best to ignore classes and rely solely in attributes. What attributes you may be asking yourself? Let's take a look

### From element types

The **type** attribute in form elements make it easy to style them in a global manner. Rather than styling form elements based on their css class or ID, the type attribute is the best approach. Each form field has a type attribute which makes it possible for browsers to render the element as expected. The type attribute can also play a factor in Javascript and form handling, but for now we are going to focus on styling.

- **Input fields**: Input fields such as text fields, are probably the most common form elements in a form. But don't let its simplicity fool you because text fields come in many types; the most common being `text`. this is the type for a typical text box where you can type just about any kind of information. This sometimes leads to developers using it for anything including for data that should be in a different form type. Let's take a look at the various types a text field can be:

  - **text**: Used for most text fields and accept any string of text
  - **email**: Used to capture email address. Using this type is recommended for email addresses as it provides _regular expressions_ to validate the data entered in the field meets the patterns of an email addresses. In addition, using this type of field makes it possible for your mobile devices to show a custom keyboard where the "@" sign is available without having to toggle your keyborad characters to find it.
  - **password**: As you can imagine, this makes it possible to hide passwords from view as you type them.
  - **search**: Elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent.
  - **tel**: Similarly to the email address, using this type allows for the keyboard on mobile devices to display numbers by default rather than alpha characters.
  - **url**: Similarly to `email`, this provides you with a custom keyboard on mobile devices that make it easier to type a common url.

As you can see from the examples above, text fields may seem simple but they come in all flavors. In most cases, the goal of form elements is to be styled the same across an entire site. So it is recommended you style these elements globally so no matter where they are used they automatically inherit the intended styles. So how do you style them globally? Let's take a look:

Here are a couple of examples of differnt input fields which we will style to ensure they all look similarly everywhere.

```html
<input type="text" name="firstname">

<input type="password" name="password">

<input type="email" name="email">
```

### Styling

```css
  input[type='text'],
  input[type='password'],
  input[type='email'],
  input[type='tel'],
  input[type='search'],
  textarea {
    background-color: #ffffff;
    border: 1px solid #000000;
    height: 40px;
    padding: 10px;
    width: 100%;
  }

  textarea {
    height: initial;
  }
```

By using the element's `type` attribute we can collectively style them with a single set of rules. As you may have noticed I included `textarea` as on of the elements because I want textareas boxes (multi-row textbox), to inherit all of the styles from text boxes with the exception of the height property; thus we override the height property while keeping all other styles the same as text boxes.

## Button elements

Buttons are elements you typically want to display with consistent styles across your entire website. This includes buttons you may create yourself and those provided by the content management system you may be working with. So similarly to input fields above, we can't always rely on IDs or classes to style them. However, similarly to the input fields above, we can rely on the `type` attribute to style the different type of buttons in our site. Different type of buttons? yes, there are different types. Let's tae a look.

### Markup

```html
<a class='button'>I want to look like a button</a>

<button>I'm an actual button</button>

<input type='submit' value='Yo tambien'>

<input type='reset' value='Me too'>
```

- All elements above will have the same look and feel.
- The first 3 elements should look identical, but the last one ( `type=['reset']`) should look slightly different because it's not a primary button, it's more of a secondary button.
- Sometimes this secondary button will be used to cancel or to reset someting on a page. While the top 3 will be used for important actions such as submit, save, etc.
- Let's style them now

### Styles

```css
.button,
button,
input[type='submit'],
input[type='reset'] {
  background-color: rebeccapurple;
  border-radius: 2px;
  border: 2px solid rebeccapurple;
  color: #ffffff;
  cursor: pointer;
  display: inline-block;
  font-size: 18px;
  line-height: 1;
  padding: 20px 40px;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  margin-bottom: 20px;
}

.button:hover,
.button:focus,
button:hover,
button:focus,
input[type='submit']:hover,
input[type='submit']:focus {
  background-color: rgb(126, 63, 189); /* lighter purple */
  color: #ffffff;
  text-decoration: none;
}
```

- We are including all the button elements in our initial set of styles. The reason for this is that we want all the buttons (regardless of their type of function), to share the same shape, font size, font-weight, border width, hover behavior, and other properties.

```css
input[type='reset'] {
  background-color: #ffffff;
  border-color: rebeccapurple;
  color: rebeccapurple;
}

input[type='reset']:hover,
input[type='reset']:focus {
  background-color: #ffffff;
  border-color: #444444;
  color: #444444;
}
```

- Then for the reset type only, we are styling this button with white background and purple text. This will ensure this button will not stand out as much as the other buttons.

## Radio buttons and Check boxes

Probably the hardest elements to style due to their dynamic nature, they have a hard time fitting in with the rest of HTML elements. Rather than link you to another blog post where you can copy and paste the necessary CSS to style these elements, I am walk you through the process of styling them.

Checkout the [Codepen](https://codepen.io/mariohernandez/pen/dyMGoyO?editors=1100) for these elements.

### Markup

The typical markup for a checkbox or radio button looks like this:

```html
<div class="checkbox__item">
  <input type="checkbox" id="checkbox1" name="checkboxname" value="Item 2">
  <label for="checkbox1">Item 2</label>
</div>
<div class="checkbox__item">
  <input type="checkbox" id="checkbox2" name="checkboxname" value="Item 2">
  <label for="checkbox2">Item 2</label>
</div>
```

```html
<div class="radio__item">
  <input type="radio" id="radio1" name="radioname" value="Item 2">
  <label for="radio1">Item 1</label>
</div>
<div class="radio__item">
  <input type="radio" id="radio2" name="radioname" value="Item 2">
  <label for="radio2">Item 2</label>
</div>
```

### Styles

Out of the box, you can not style the native checkbox nor radio button elements. To be able to apply custom styles we need to do it in a hacky way. This is my favorite way to style these elements.

#### Drawing the checkbox

```css
/* visually hide the native checkbox and radio buttons. */
input[type='checkbox'],
input[type='radio'] {
  position: absolute;
  opacity: 0;
}
```

- By setting absolute position and opacity to zero, we are hiding the native radio and checkbox elements from view. However, we need the elements to still function as expected so using `visibility-hidden` or `display: none` are not viable options.
- Although we are visually hiding the elements, they are still available in the DOM so we can interact with them and also so they can be available to assistive technologies such as screen readers.

```css
/* Add space to the left of the label for later use. */
label {
  position: relative;
  padding-left: 35px;
}
```

- We set `relative` position on the label as we prepare to add pseudo elements in the next steps.
- The left padding here will allow us to draw a box or a circle for the checkbox/radio button. More on this later.

```css
/* Draw a square box with border  using a pseudo element (`::before`). */
input[type='checkbox'] + label::before {
  border: 2px solid #e15b00;
  content: '';
  display: inline-block;
  height: 24px;
  left: 0;
  position: absolute;
  top: -2px;
  width: 24px;
}
```

- First we define a sibling element of the checkbox with the `+` sign. The sibling element being the `label` element. If you look at the markup we wrote above, you will notice that the checkbox and the label are siblings. This is also true for the radio button and its label.
- Using a `::before` pseudo element on the label, we are drawing a `24px` square box.
- For any pesudo element to be visible on the page, we need to assign the property of `content:`, even if it's value is empty as shown above.
- We then add a `2px` border on the box. This box is what will be presented as the actual checkbox for the user to interact with (check/uncheck).
- By setting the box with `absolute` position, we are positioning just to the left of the label. The position of the box is in relation to the label's position (hence `relative` position on the label).

```css
/* Draw checkmark using a ::after pseudo elment on the label */
input[type='checkbox'] + label::after {
  border-bottom: 3px solid #fff;
  border-left: 3px solid #fff;
  content: '';
  display: inline-block;
  height: 10px;
  left: 4px;
  position: absolute;
  top: 2px;
  transform: rotate(-45deg);
  width: 18px;
}
```

- The same way we drew the box previously, now we draw a checkmark symbol using a `::after` pseudo element on the label. This means we are drawing the checkmark symbol after the `label` element.
- In reality, we are drawing a rectangular box with left and bottom borders of `3px`. By rotating the box negative 45 degrees, this makes it look like a checkmark.
- We then use `absolute` position on the checkmark so we can position it right in the middle of the box we drew before.

#### Drawing the radio button

Before proceeding with the styles, let's repeat the steps above but this time for the radio buttons. These styles are extremely similar with the exception of in stead of drawing a square box, we will be drawing a circle with an outline, and instead of a checkmark, we will be drawing a filled circle in the middle of the outlined circle.

```css
/* Draw a circle and add borders to it */
input[type='radio'] + label::before {
  border-radius: 50%;
  border: 2px solid #e15b00;
  content: '';
  display: inline-block;
  height: 24px;
  left: 2px;
  position: absolute;
  top: -4px;
  width: 24px;
}

/* Draw an inner circle */
input[type='radio'] + label::after {
  background-color: #e15b00;
  border-radius: 50%;
  content: '';
  display: inline-block;
  height: 20px;
  left: 6px;
  position: absolute;
  top: 0;
  width: 20px;
}
```

- This time we are targeting the input type of `radio` and we are using `border-radius` to draw a perfect circle.

```css
/* Hide checkmark and inner circle by default */
.radio input[type='radio'] + label::after,
.checkbox input[type='checkbox'] + label::after {
  content: none;
}
```

- By default, we don't want either the checkboxes or radio buttons to be checked. So we set the value of `content:` to `none`. This will present the checkboxes and radio buttons unchecked.

```css
/* Show checkmark and inner circle when input is checked */
input[type='radio']:checked + label::after,
input[type='checkbox']:checked + label::after {
  content: '';
}
```

- Using the `:checked` pseudo class ( `input[type='radio']:checked`, `input[type='checkbox']:checked`), we then show the checkmark or inner circle by setting the `content:` property's value to empty ( `''` i.e. removing `none`). The `:checked` pseudo class becomes available when the checkbox or radio buttons are click-checked and when that happens, then we show the checkmark or inner circle.

```css
/* When box is checked, add background color. */
input[type='checkbox']:checked + label::before {
  content: '';
  background-color: #e15b00;
}
```

- Since the checkmark we drew is white, we are adding a background color inside the checkbox to display the checkmark. We are doing this only when the `:checked` pseudo class is present.

```css
/* Add focus styles when elements are in focus */
input[type='radio']:focus + label::before,
input[type='checkbox']:focus + label::before {
  outline: rgb(59, 153, 252) auto 5px;
}
```

- Finally, using the `:focus` pseudo class, we are adding basic outline styles to show the "on focus" state of the inputs. We need to do this since we are not using the native input elements. If we were, the browser would automatically add these styles to our inputs.

## Resources

I have recorded tutorials on severalof these things. Check them out if you are the kind of person who learns better through video tutorials.

- [Styling Checkboxes and Radio Buttons](https://youtu.be/6KsCwVacfLs)
- [CSS Pseudo Elements](https://youtu.be/KNsEpsCui8c)
- [Styling Checkboxes and Radio Buttons (Codepen)](https://codepen.io/mariohernandez/pen/dyMGoyO?editors=1100)

Tags for this post

- [Css](https://mariohernandez.io/tag/css/)
- [Forms](https://mariohernandez.io/tag/forms/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Rocks stack from big to small](https://mariohernandez.io/images/thumbs/rocks.webp)





  June 29, 2020



  As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Component Integration
[Skip to content](https://mariohernandez.io/blog/demystifying-components-integration-with-drupal/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Image of a net showing interlaced mesh](https://mariohernandez.io/images/integrate.webp)

[Photo by: JJ ying](https://unsplash.com/@jjying)

Component-based development is something I have been doing for at least five years and it is incredible that I still find myself learning something new every time I work on a new project. In addition to development, I write training curriculums on the topic and this gives me more exposure to this topic than most people. You’d think by now I should have learned all there is to learn about components and integrating them with Drupal, but that’s not the case, and I love it because I alway look forward to learning something new.

## The inspiration for this post

I came across an outstanding blog series about _Building with Emulsify Part 3: Component Complexity_ by [Evan Willhite of Four Kitchens](https://www.fourkitchens.com/blog/development/building-emulsify-part-3-component-complexity/).

## It's not you, it's me

I’d say I’m about 90% onboard with how Evan approaches component integration, but the part I am not a fan of is writing preprocess functions to achieve full integration, mainly because I am not well-versed in preprocess functions or PHP in general. There is absolutely nothing wrong with this, but what if you are someone like me who is not comfortable with preprocess functions or custom modules? So I decided to use most of the work Evan put together, but will perform the integration slightly differently so we only work with Twig and not PHP.

Both instances for which PHP code was required in Evan’s post were the result of using a Paragraph type to reference nodes. My approach will be to eliminate the paragraph type and work directly with the node entity.

Let’s start. I will pick up from **Architecture** since everything prior to this is typically the approach I take as well.

## Architecture

We want administrators to create Nodes of any type and using a Display View Mode we can automatically display them using the card component. The one difference for me is that I don’t have a card variation.

## Passing data between entities

Following Evan’s instructions, create a new Display view mode called Card. Here's another minor difference in that my Card uses an image field and date field in addition to title, body, and link fields. Here’s what the card looks like.

![Woman smiling while looking up](https://mariohernandez.io/images/card.png)

In the Card display view mode of an Article content type, ensure Body and Image are available. All other fields should be placed under Disabled. The Title and Date fields don’t display in the Manage Display screens, but they are always available in all Entity templates.

## Integrating the Card component within a Node template

Just like in Evan’s post, we still need to associate a Node template with our Card. For this we will use the same template suggestion as Evan, `node--card.html.twig`.

```php

{% include '@molecules/card/card.twig' with {
    'image': content.field_image,
    'date': date,
    'title': label,
    'body': content.body,
    'link_url': url,
    'link_text': "Read the article",
  } only
%}

```

## Displaying a list of cards with Views

Now that the Card component has been integrated with Drupal, let’s create a simple view to display a collection of nodes displayed as Cards.

The views' settings can be seen below with description of the important configurations to note.

![Screenshot of settings for Latest Articles view](https://mariohernandez.io/images/view.png)

A few things about the view:

- It’s called Latest Articles
- The page built by the view can be viewed at /blog
- Rather than using fields it uses the Card view mode we created earlier. This is the biggest advantage of integrating the Card component with the Entity, any time a node is displayed using the Card Display View Mode, the node will be displayed automatically as a Card.
- It only pulls nodes of type Article

With some minor CSS the articles would look like this:

![List of latest articles shown as cards](https://mariohernandez.io/images/latestarticles.png)

### In closing

There will be times when writing a preprocess will be required based on the requirements, but whenever possible I’d like to avoid it.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Integration](https://mariohernandez.io/tag/integration/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- ![Watter color mountains](https://mariohernandez.io/images/thumbs/media.webp)





  December 1, 2023



  In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.


 [See more posts](https://mariohernandez.io/blog)

## Building Better Components
[Skip to content](https://mariohernandez.io/blog/five-principles-for-building-better-components/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Hand drawing website wireframes](https://mariohernandez.io/images/wireframes.webp)

[Photo by: Sigmund](https://unsplash.com/@sigmund)

When working on a component-based project, building components or patterns, can be a liberating experience because we are able to draft the best markup possible to build the most flexible, scalable and reusable components. If you work with third party platforms such as SharePoint, WordPress, Drupal, or others, this becomes even more rewarding as in most cases content management systems are not known for producing the best markup possible. However, this liberating experience can come a a price if you are not taking the appropriate measures and checks when building your library of patterns.

In this post I am going to discuss five critical principles I follow when building components. My goal is always to achieve first and foremost, semantic markup that works in all devices including assistive technologies, reusability, scalability, and finally, ease of use. In some cases it is hard to achieve all of these goals so it is important to understand where you draw the line and what is more important in the long term.

**Disclaimer**: _Components and Paterns are used interchangeably_.

## Find patterns in your patterns

Ideally, before you begin building patterns, or components, you want to fully understand how and when these patterns will be used. Certainly there are times when we don’t have all this information when we first start working on a project, but if you do, take a detailed inventory of your patterns. Doing this will help you build better and more reusable patterns.

Failing to identify the patterns in your patterns can lead to bad decisions when building them. For example, let’s say we have a card component for displaying latest news articles, if we don’t know that there are cards for events that look similar to news articles, we may miss an opportunity to turn the card component into one we can use for multiple purposes in our website. But don’t let this get you down, building a website is an iteration process. If you later discover that the news card component can be leveraged for events, it’s perfectly okay to update the card component so it can be used with events as well. My point is that it is preferred if you can catch these patterns early on, but we all know that sometimes designs are not always available in full when a project is started and when they become available we may need to re-think our process of component-building.

## Don't sacrifice simplicity over reusability

Reusability when working with components is important and should be at the forefront when building components, however, don’t paint yourself in a corner by over-engineering your components because you found a way to turn a component into a multi-level reusable machine. Trying to make your components do too much can lead to over complex development and in the long run, very hard to maintain. It is better to have components that are simple and easy to maintain even if it means you may have some components that are similar. It is hard to find the balance between simplicity and reusability and this discovery will only come as you work on your components. If you have to choose between simple and reusable, simple may be the way to go.

## One set of markup for all devices

Earlier I mentioned that before you start building components you should have a full picture of how and when those components will be used by looking at the design comps. Of course this is not always possible, but in an ideally designs comps give us opportunities to identify areas of improvement or areas that could lead to potential problems. An example of a problem would be if you are provided the designs for mobile, tablet, and desktop. This is great, but let’s say the information displayed at each device type changes in such a way that you don’t know how to best write the markup so it works on all devices. In a perfect world, you should not have to alter the markup of your components per breakpoint. Doing so could lead to confusion on how content is rendered, not to mention problems with accessibility or even SEO. If you find that markup may be a challenge from breakpoint to breakpoint, it is perfectly okay to go back to the designer and propose updates to the design so a unified markup structure could serve all devices. In my experience, the designer would be okay with your recommendations as long as you are not completely changing the layout of the website but instead are simply proposing minor adjustments that don’t change the overall look and feel of the website.

In some cases a designer may not be fully aware that the designs they are proposing could lead to issue when the site is rendered in different device sizes, so it’s okay to bring these issues to their attention and you may find that they are onboard with your suggestions.

## Find the right names for your patterns

Another way to paint yourself in a corner is by the name you choose for your components. Component names should be generic and yet descriptive so they can be used on different scenarios. Conversely, names that are too specific will limit when and how you can use those components. Let’s take a look at some bad component names and propose a better name:

- News Card: If we think back of how we can reuse components, naming a component News Card will limit us on what kind of content we can use this component on. What if Events use a similar card with minor differences? A better name for this component may be Card or Content Card. This allows us to use on any type of content.

- FAQ Accordion: We have seen this before, we want to build a collapsible list of Frequently Asked Questions so the name makes sense. However, what if we want the same functionality for other type of content such as Forums or Knowledge base content? A better name would simply be Accordion which describes the functionality of the component, not the content that it can hold.

- Latest News List: Again, we are limiting ourselves to only showing content of type news. A list of content should be generic so we can use them for any kind of content (i.e. Blog posts, events, popular content etc.). A more appropriate name would be Content List.

- Finally, Homepage Hero: It is not uncommon for Hero sections to be in multiple pages other than the homepage. By naming this component simply Hero, we can leverage it and use it in more than just the homepage. You may wonder, what if I have other types of heroes in non-homepage pages? Well, perhaps we can find alternative names for those, things like Hero Short, or Page Breaker, something that is descriptive and yet provides the ability to be used in multiple pages.


The above are only some examples of how a bad name can not only limit where or what type of content you can use your components with, but it can also lead to building unnecessary components.

## Document your components

One of the great things about design systems like Pattern Lab, Storybook and others, is that they provide a way to document the details of your components. Documenting components can go a long way to ensure your entire team is fully aware of the why and how of your components.

I practice that I follow when building components is documenting the technical aspects of the component such as its name, where it is used, and details about any variants of the components. Just as important, I like to define the components fields, their data type and values they accept. This architectural information ensures gives your team and your stakeholders a detailed view of a components role in your project.

In closing, before you begin building components, take the time to study your design comps and take notes of how you feel you can make the most out of your components library. You will not get it right the first time, that’s okay. As long as you are giving yourself the room to iterate through the process, you can always go back and update a component if it will give you more flexibility and will turn your project into a solid component-based system.

### In closing

You may not always get it righ the first time, but keeping these principles in mind will help you achieve better implementation of your website's patterns.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# [2 Comments](https://github.com/mariohernandez/mariohernandezio/issues/107) _\- powered by_ _[utteranc.es](https://utteranc.es/)_

[![@philalonso](https://avatars.githubusercontent.com/u/940773?v=4?v=3&s=88)](https://github.com/philalonso)

Thanks for the helpful advice, Mario. Your reminders to keep things simple with generic names as well as the encouragement to discuss changes with designers create a framework in which components can be reused easily. I'm anxious to incorporate this advice into my work.

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Ffive-principles-for-building-better-components%2F) to add your reaction.

[![@mariohernandez](https://avatars.githubusercontent.com/u/1289805?v=4?v=3&s=88)](https://github.com/mariohernandez)

I'm glad you found the post useful, [@philalonso](https://github.com/philalonso). Thanks for sharing your thoughts.

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Ffive-principles-for-building-better-components%2F) to add your reaction.

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.


 [See more posts](https://mariohernandez.io/blog)

## Dynamic Image Paths in Drupal
[Skip to content](https://mariohernandez.io/blog/drupal-base-path/#main-content) [Twig](https://mariohernandez.io/tag/twig/)

![Person confronted with two paths to choose from](https://mariohernandez.io/images/paths.webp)

[Photo by: Caleb Jones](https://unsplash.com/@gcalebjones)

Recently I was building a component that required a static image which was not stored in the database but instead needed to be stored somewhere in the file system of the site. There are several ways for serving a static image for example we could have stored the image in the `sites/default/files/images/` directory. A very common approach which in many cases would work just fine, however, in my case I was building a component and I wanted for the component image to be located within the same component's directory. This makes sense because if I wanted to reuse or share this component, all component assets would be included in a single directory.

## Requirements

My goal with this task was to dynamically point to the image regardless the site this component was running on. Oh yeah, we are running a multi-site architecture with hundreds of sites and a single code base. So this component needed to work in all of these hundreds of sites. Now the challenge seems a little more... "challenging".

## ¡Manos a la hobra'!'

I started by doing research to determine the best way possible to achieve this. I read about using a pre-process function that would generate a dynamic base path of the site but I was hoping I could keep things simple and do everything on the front-end with only Twig. This would make it a more appealing approach for front-end developers.

After some research, I came across two little gems that became game-chargers for my project. One of these gems is the `{{ url('<front>') }}` Twig function. This will provide the current site's homepage/base path. The other very handy Twig function is `{{ active_theme_path() }}` which prints the path of the current active theme ( `themes/custom/my_theme`). While researching for this task, I also found you can use the `{{ directory }}` Twig variable in your theme's templates to print the active theme's path. A word of coution when using either the `{{ active_theme_path() }}` function of the `{{ directory }}` variable as these could have different results depending on your whether you are using them in a base or sub theme. Here's a [drupal.org issue](https://www.drupal.org/project/drupal/issues/3049414) that discusses this in more detail.

Armed with these two little functions, and one Twig variable, we can now work in generating a dynamic path to our theme's directory where the static image for our component is located. So this may seem like a simple thing but remember, our component's image should work regardless of the site the component is used on within our multi-site architecture. Some sites even use a different sub-theme but the parent theme is always the same which is where our image is stored.

## Building the dynamic path

Before we can use the first function we need to run it through the `|render` Twig filter. Since Twig will return an array from the `{{ url() }}` function, we need to convert it to a string because we need the value of the function. Let's take a look:

```php
{{ url('<front>')|render }} # This will give us http://my-site.com/
```

Next let's work with the theme path function. Similarly to the function above, we will use the `|render` Twig filter to convert it from an array to a string.

```php
{{ active_theme_path()|render }} # This will give us themes/custom/my-theme
```

Now that we have two strings we can joint them together to compose the full path to our image:

```php
<img src="{{ url('<front>')|render }}{{ active_theme_path()|render }}/images/image.jpg" alt="alt text" />
```

If we want to get fancy we could actually set a variable to shorten things a bit:

```php
{% set theme_url = url('<front>')|render ~ active_theme_path()|render %}
<img src="{{ theme_url ~ '/images/image.jpg' }}" alt="alt text" />
```

And there you have it. A dynamic path that will work on any of our sites.

I realized some people reading this already knew all of this but I didn't. So I figured I would share it because I bet there are others out there that also do not know about the `{{ url('<front>') }}` or `{{ active_theme_path() }}` Twig functions as well as the `{{ directory }}` variable. As I said before, there are many ways to handle this challenge, but in my case this is exactly how I wanted to approachh it. I hope this was helpful. Cheers!

Tags for this post

- [Twig](https://mariohernandez.io/tag/twig/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# [1 Comment](https://github.com/mariohernandez/mariohernandezio/issues/88) _\- powered by_ _[utteranc.es](https://utteranc.es/)_

[![@mariohernandez](https://avatars.githubusercontent.com/u/1289805?v=4?v=3&s=88)](https://github.com/mariohernandez)

Testing the comments system 🫶

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Fdrupal-base-path%2F) to add your reaction.

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.

- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Images in Drupal
[Skip to content](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![A book, tablet, mouse, keyboard and monitor on a desktop](https://mariohernandez.io/images/emily-bernal.webp)

[Photo by: Emily Bernal](https://unsplash.com/@emilybernal)

Images are an essential part of a website. They enhance the appeal of the site and make the user experience a more pleasant one. The challenge is finding the balance between enhancing the look of your website through the use of images and not jeopardizing performance. In this guide, we'll dig deep into how to find that balance by going over knowledge, techniques and practices that will provide you with a solid understanding of the best way to serve images to your visitors using the latest technologies and taking advantage of the advances of web browsers in recent years.

Hi, I hope you are ready to dig into responsive images. This is a seven-part guide that will cover everything you need to know about responsive images and how to manage them in a Drupal site. Although the excercises in this guide are Drupal-specific, the core principles of responsive images apply to any platform you use to build your sites.

## Where do we start?

Choosing Drupal as your CMS is a great place to start. Drupal has always been ahead of the game when it comes to managing images by providing features such as image compression, image styles, responsive images styles and media library to mention a few. All these features, and more, come out of the box in Drupal. In fact, most of what we will cover in this guide will be solely out of the box Drupal features. We may touch on third party or contrib techniques or tools but only to let you know what's available not as a hard requirement for managing images in Drupal.

It is important to become well-versed with the tools available in Drupal for managing images. Only then you will be able to make the most of those tools. Don't worry though, this guide will provide you with a lot of knowledge about all the pieces that take part in building a solid system for managing and serving responsive images.

Let's start by breaking down the topics this guide will cover:

1. [What are responsive images?](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/#responsive-images)
2. [Art Direction using the `<picture>` HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element)
3. [Image resolution switching using `srcset` and `sizes` attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes)
4. [Image styles](https://mariohernandez.io/blog/image-styles-in-drupal) and [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles) in Drupal
5. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media)
6. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up)

## What are responsive images?

A responsive image is one whose dimensions adjust to changes in screen resolutions. The concept of responsive images is one that developers and designers have been strugling with ever since Ethan Marcotte published his famous blog post, [Responsive Web Design](https://alistapart.com/article/responsive-web-design/), back in 2010 followed by his book of the same title. The concept itself is pretty straight forward, serve the right image to any device type based on various factors such as screen resolution, internet speed, device orientation, viewport size, and others. The technique for achieving this concept is not as easy. I can honestly say that over 10 years after reponsive images were introduced, we are still trying to figure out the best way to render images that are responsive. Read more about [responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).

So if the concept of responsive images is so simple, why don't we have one standard for effectively implementing it? Well, images are complicated. They bring with them all sorts of issues that can negatively impact a website if not properly handled. Some of these issues include: Resolution, file size or weight, file type, bandwidth demands, browser support, and more.

Some of these issues have been resolved by fast internet speeds available nowadays, better browser support for file tyes such as webp, as well as excellent image compression technologies. However, there are still some issues that will probably never go away and that's what makes this topic so complicated. One issue in particular is using poorly compressed images that are extremely big in file size. Unfortunately often times this is at the hands of people who lack the knowledge of creating images that are light in weight and properly compressed. So it's up to us, developers, to anticipate the problems and proactively address them.

### Ways to improve image files for your website

If you are responsible for creating or working with images in an image editor such as Photoshop, Illustrator, GIMP, and others, you have great tools at your disposal to ensure your images are optimized and sized properly. You can play around with the image quality scale as you export your images and ensure they are not bigger than they need to be. There are many other tools that can help you with compression. One little tool I've been using for years is this little app called [ImageOptim](https://imageoptim.com/howto.html), which allows you to drop in your images in it and it compresses them saving you some file size and improving compression.

Depending on your requirements and environment, you could also look at using different file types for your images. One highly recommended image type is **[webp](https://developers.google.com/speed/webp)**. With the ability to do lossless and lossy compression, webp provides significant improvements in file sizes while still maintaining your images high quality. The browser support for webp is excellent as it is supported by all major browsers, but do some research prior to start using it as there are some hosting platforms that do not support webp.

To give you an example of how good webp is, the image in the header of this blog post was originally exported from Photoshop as a `.JPG`, which resulted in a 317KB file size. This is not bad at all, but then I ran the image through the ImageOptim app and the file size was reduced to 120KB. That's a 62% file size reduction. Then I exported the same image from Photoshop but this time in `.webp` format and the file size became 93KB. That's 71% in file size reduction compared to the original JPG version.

## A must have CSS rule in your project

By now it should be clear that the goal for serving images on any website is doing it by using the responsive images approach. The way you implement responsive images on your site may vary depending on your platform, available tools, and skillset. Regardless, the following CSS rule should always be available within your project base CSS styles and should apply to all images on your site:

```css
img {
  display: block;
  max-width: 100%;
}
```

Easy right? That's it, we're done 😃

The CSS rule above will in fact make your images responsive (images will automatically adapt to the width of their containers/viewport). This rule should be added to your website's base styles so every image in your website becomes responsive by default. However, this should not be the extend of your responsive images solution. Although your images will be responsive with the CSS rule above, this does not address image compression nor optimization and this will result in performance issues if you are dealing with extremly large file sizes. [Take a look at this example](https://codepen.io/mariohernandez/full/ZEVVKab) where the rule above is being used. Resize your browser to any width including super small to simulate a mobile device. Notice how the image automatically adapts to the width of the browser. Here's the problem though, the image in this example measures `5760x3840` pixels and it weights 6.7 MB. This means, even if your browser width is super narrow, and the image is resized to a very small visual size, you are still loading an image that is 6.7 MB in weight. No good 👎

In the next post of this series, we will begin the process of implementing a solution for handling responsive images the right way.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- ![Watter color mountains](https://mariohernandez.io/images/thumbs/media.webp)





  December 1, 2023



  In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.


 [See more posts](https://mariohernandez.io/blog)

## Art Direction in HTML
[Skip to content](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Pencils of different sizes over a blue background](https://mariohernandez.io/images/picture-element.webp)

[Photo by: Markus Spiske](https://unsplash.com/@markusspiske)

In the [previous article](https://mariohernandez.io/blog/responsive-images-in-drupal-a-guide) of this guide we covered the concept of responsive images and some of the challenges that come with implementing an effective system for them. In this article we will go in detail about the concept of "Art Direction" and how this applies to responsive images.

## What is art direction?

In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size. For example, a large landscape shot of a person rowing in the middle of a lake is shown when viewed on a large desktop device. If we were to use the same image on a mobile device, that image would shrunk down, making the person in the image very small and hard to see. A better option would be to show a different version of the image that zooms in and focuses on the most important part of the image, the person rowing. See an example of this image below.

![Person rowing shown in different devices](https://mariohernandez.io/images/art-direction.webp)

## Enter the `<picture>` HTML element

In order to achieve art direction we need to be able to query for the size of the device being used to view the website. Once we've identified the device size we instruct the browser which image to use based on the device size. This will allow us to provide a better user experience as each device will display an image intended specifically for that device. Going back to the image above, we can see that the main image has been cropped differently to ensure the most important part of the image is displayed on each divice.

So how do we query for the device size and how do we instruct the browser which image to use? This is where the `<picture>` element/tag comes in. Let's take a look at the code that makes all this possible and break it down.

```html
<picture>
  <source
    media="(min-width: 2400px)"
    srcset="images/rowing-2400.jpg 1x, images/rowing-4800.jpg 2x"
    type="image/webp">

  <source
    media="(min-width: 1280px)"
    srcset="images/rowing-1400.jpg 1x, images/rowing-2800.jpg 2x"
    type="image/webp">

  <source
    media="(min-width: 640px) and (max-width: 1279px)"
    srcset="images/rowing-1200.jpg 1x, images/rowing-2400.jpg 2x"
    type="images/webp">

  <img
    src="images/rowing-1200.jpg" srcset="images/rowing-2400.jpg 2x"
    alt="Person rowing on a lake" width="1200" height="800">
</picture>
```

**Note**: The order in which the media queries are written within the `<picture>` tag matters. The browser will use the first match it finds even if it's not the intended one. Therefore, consider the media query order very carefully to ensure the right image is served.

- `<picture>`: The `<picture>` tag is simply a wrapper. On its own it does not do anything.
- `<source>`: The `<picture>` HTML element contains zero or more `<source>` elements. The browser will consider each child `<source>` element and choose the best match among them. If no matches are found—or the browser doesn't support the `<picture>` element—the URL of the `<img>` element's src attribute is selected. The selected image is then presented in the space occupied by the `<img>` element.
- Within the `<source>` element, you will find some very handy attributes ( `media`, `srcset`, and `type`):
  - `media`: Rembember earlier we said we need to query for the device size? Well, within the `media` attribute you can write media queries much like the media queries you write in CSS ( `media="(min-width: 600px)"`). This is how we check the size of the device when a page is rendered.
  - `srcset`: This attribute allows us to provide a list of images the browser can use when the media query finds a match ( `srcset="img-768.jpg, img-1440.jpg"`).
  - `type`: The `type` attribute specifies a MIME type for the resource URL(s). This is optional if using common image types such as JPG, PNG, TIFF, etc. If you plan on providing images in different file formats, you can do so using the `type` attribute. This is handy in the event the browser does not support a specific file type ( `type="image/avif"`), as you can then provide a supported file type.
- `<img>`: The img element serves two purposes:
  - It describes the dimensions of the image and its presentation
  - It provides a fallback in case none of the offered `<source>` elements are able to provide a usable image.

And there you have it. The `<picture>` element is a great way to serve different images based on things like device size or screen density. When the `<picture>` element was first introduced it required a pollyfill as not all browsers supported it. Nowadays, unless you are supporting Internet Explorer 11 (sorry bro), all other major browsers provide native support for it. Take a look at the chart below for current browser support.

![List of all browsers that support the picture element](https://mariohernandez.io/images/picture.webp)

### Great! Let's use `<picture>` on all our images ...NOOOOOOOO!!!!!!

Say what? If the `<picture>` element is so great, why can't we use it for rendering all of our images? Well, as great as the `<picture>` element is, it should not be the default solution for serving responsive images in your site. The only use case for the `<picture>` element is when you are trying to achieve "Art Direction" (cropping your images differently for each device size).

Remember at the begining of this post when I said " _In order to achieve art direction we need to be able to query for the device size. Once we've identified the device size_ **_we instruct the browser which image to use_**..."? There lies the problem. Let me explain.

The issue with the statement above is that "we are telling the browser which image". Not only that, but we are doing so solely based on the size of the device. This may not always be the best way to determine which image a device should use. Imagine you are using a nice relatively new laptop with a super high density screen. Based on our rules established within the `<picture>` element code snippet above, we would end up with an image that is 4800px in size. This is a pretty large image but it's the one that meets our creteria defined in the media query above. If you're home with a decent wifi connection you will never see any issue loading an image this large, but imagine you are working out of a coffee shop, or at a conference with poor wifi connection, or worse yet, you're on the road using your phone as a hotspot and your signal is very bad, now you will really experience some performance issues because we are telling the browser to load the largest image possible because your computer screen is big (relatively speaking). With the `<picture>` element we can't check how fast your internet connection is, or whether there are browser preferences a user has configured to account for slow internet speeds. We are basing everything on the size of the device.

Then why use the picture element? Well, when developing a website, the developer does not have all the information they need to serve the best image. Likewise, when rendering a page and using the `<picture>` tag, the browser does not know everything about the environment. The table below shows this in more detail and exposes the gap between the developer and the browser.

## Identifying the gap when using `<picture>`

| Environment conditions | What the developer knows<br>during development | What the browser knows<br>during image rendering |
| --- | --- | --- |
| Viewport dimensions | No | Yes |
| Image size relative to the viewport | Yes | No |
| Screen density | No | Yes |
| Images dimensions | Yes | No |

You may be wondering: " _Why did you get us all excited about the `<picture>` element if we can't really use it?_" well, if you are trying to achieve art direction, then you use the `<picture>` element. It's the recommended approach for that use case. If you are looking for resolution switching, a use case for most images in the web, you need to use the `srcset` and `sizes` attributes approach. In the next post we'll dive deep into this technique.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Picture Element](https://mariohernandez.io/tag/picture-element/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Image Resolution Switching
[Skip to content](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![White measuring tape on a yellow background](https://mariohernandez.io/images/srcset-sizes.webp)

[Photo by: Diana Polekhina](https://unsplash.com/@diana_pole)

In the [previous article](https://mariohernandez.io/blog/responsive-images-and-the-picture-html-element) we defined what art direction is and how to address it using the `<picture>` element. In this post, the focus will be how to address responsive images when the requirement is image resolution switching. Resolution switching, in the context of responsive images, is rendering identical image content on all devices. Unlike art direction where each device gets a differently cropped image that may vary on aspect ratio, resolution switching uses images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings. Resolution switching is how most images are rendered (the rule), the `<picture>` element approach is the exception to the rule. Take a look at an example of resolution switching below.

![Image of lights show displayed in different device sizes](https://mariohernandez.io/images/res-switching.webp)

The image above demonstrate how multiple resolutions of the same image can be served to different devices. All the images in the example above are cropped exactly the same maintaining the same aspect ratio from large to small.

## Using `srcset` and `sizes` attributes

Using the `srcset` and `sizes` image attributes is how most images are rendered in the web today. As indicated before, this is the recommended way for configuring responsive images if all you need is to switch resolution of images rather than art direction. So how does this approach work? Let's take a look at a typical configuration of the `<img>` tag using the image above as an example of the different image sizes we will want the browser to choose from:

```html
<img
  srcset="original-image.jpg 2400w, extra-large.jpg 2000w,
          large.jpg 1600w, medium.jpg 1080w, small.jpg 800w, x-small.jpg 500w"
  sizes="100vw"
  src="large.jpg"
  alt="Image of sky shown at different resolutions" />
```

Let's break things down so we can understand this approach better.

- `<img>`: Right off the bat we start by using a widely supported html tag.
- `srcset`: The `srcset` attribute in the img tag serves two important roles, 1) It stores a list of images that can be used by the browser, 2) Each image provides its width value which plays a role on the browser choosing the right image.
- `sizes`: The `sizes` attribute tells the browser the width, in relation to the viewport, the image should be rendered at. The value of `100vw` shown above, means the image will be rendered at 100% the viewport width on all the devices. You could also use media queries like `(max-width: 720px) 100vw, 50vw`. This means that if the device does not exceed 720px in width, the image will be rendered at 100% the viewport width, otherwise (if the device is larger than 720px), the image will be rendered at 50% the viewport width.
- `src`: The `src` attribute is used as a fallback if everything fails.

## What does it all mean?

Let me explain things in more detail because it is important we understand how this approach is so much better than using the `<picture>` element.

The biggest difference/advantage of using `srcset` and `sizes` versus `<picture>`, is the fact that we let the browser decide which image is the best image to render on any device. This is possible thanks to all the information we have supplied to the browser. For example, in the `srcset` we are not only providing the browser with a list of images to choose from, but we are also telling the browser how big each image is. This is very important because the browser will use this information when choosing the image to render. In the `<picture>` element approach, the image size descriptors are not available.

The `sizes` value tells the browser the size the image needs to be rendered at in relation to the viewport. This too is extremely important information we are providing the browser because if the browser knows the dimensions of all the images to choose from and how big/small the image needs to be rendered, then the browser is able to pick the best image possible.

But that's not all, the browser is smarter and knows more about the web environment than we do when a page or image is rendered. For example, the browser knows the viewport width used when viewing a website, it knows how fast/slow your internet connection is, and it knows about any browser preference settings (if any), setup by the user. Using all this information the browser is able to determine which image from the `srcset` is the best to use. In contrast, with the `<picture>` element, we tell the browser which image to use solely based on the device size.

## Closing the gap

Now let's see how using the `srcset` and `sizes` attributes closes the gap we identified when using the `<picture>` tag.

| Environment conditions | What the developer knows<br>during development | What the browser knows<br>during image rendering |
| --- | --- | --- |
| Viewport dimensions | No | Yes |
| Image size relative to the viewport | Yes | ~~No~~ Yes via `sizes` |
| Screen density | No | Yes |
| Images dimensions | Yes | ~~No~~ Yes via `srcset` |

Pretty nice huh? Now thanks to the `srcset` and `sizes` attributes we've closed the gap and the browser has all the information it needs to ensure the best image is served to each device.

The next post of this series will focus on image styles. These are fun but can also get you in a lot of trouble if not properly done. See you there.

## In closing

Time for a story: I recently did an experiment that 100% proves the use of resolution switching using `srcset` and `sizes` attributes. As most people nowadays, I use a very large second display when working on projects to fit more apps and see things better. My second display is nice but it's not a 4K display. It's double the physical size of my mac's screen, but the mac's screen resolution is higher by almost double (twice the number of pixels). When I look at an image of a project where I've implemented the practices in this guide, in the large display, and inspected the page, I see the browser has selected an image that is 720px which makes complete sense for the use case I am testing. I then unplugged the second display and viewed the page on my mac's screen (higher resolution), I reloaded the page and inspected it, I noticed the browser has now selected an image that is double the size of the first image. This is exactly the behavior I would expect because my mac screen is of higher resolution and my connection speed is very fast. So the browser was able to make the smart decision to use a different images based on my environment.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Srcset](https://mariohernandez.io/tag/srcset/)
- [Sizes](https://mariohernandez.io/tag/sizes/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.


 [See more posts](https://mariohernandez.io/blog)

## Image Styles in Drupal
[Skip to content](https://mariohernandez.io/blog/image-styles-in-drupal/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![A person rowin behind a water color painted sky](https://mariohernandez.io/images/image-styles.webp)

[Photo by: Ngoc Mai Pham](https://unsplash.com/@potatonori)

Now that we've gone over some very important concepts of responsive images ( [art direction](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element) and [resolution switching](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes)), it's time to transfer all that knowledge and put it all in practice in Drupal. One of the key pieces for achieving responsive images in Drupal is by using image styles. Image styles are how Drupal manages the way we crop and size images.

## What are image styles?

Before we get to building image styles, let's go over what they are. Think of image styles as templates for cropping, scaling, converting, and sizing images. You can use these templates with any image on your site and as many times as you'd like. Thanks to image styles images will always render within the parameters we define.

A more real-world way of looking at image styles may be if you could imagine for a moment you have a couple of picture frames you'd like to use to hang some pictures in your house or office. One frame is 5x7, another is 4x6 and one last one is 8x10. The picture frames are Drupal's image styles.

So we have some picture frames and we have ordered several pictures from our favorite online photo printing service. There is one picture in particular I really love and I want to frame it using the 3 picture frames. So, although it is the same picture, I ordered different sizes of it (one for each frame size), and this will allow me to hang the 3 pictures in different sizes, aspect ratios and orientation. That in a nutshell are image styles.

![Drawn images of different sizes](https://mariohernandez.io/images/images.webp)

## Image styles best practices

Image styles are actually pretty easy to create but unfortunately because of this they can be misused or mismanaged. If not done properly, you may end up with a lot more image styles than you really need or image styles that are not well define and do no provide the outcome you are looking for. To avoid this, let's go over best practices for creating image styles which will result in less image styles to manage. Mind you, these are my best practices but I have to admit, they have worked very well for me.

### Naming image styles

Have you heard the phrase "naming things is hard"? It's true. Unfortunately when it comes to image styles, if not named properly you can get yourself in a lot of trouble. Quick example, let's say I want to create an image style that I'd like to use on images of news articles that are displayed on the homepage. One might think a good name for the image style may be something like " **Homepage news article images**". It doesn't seem so bad but let me point out a few issues with this name:

- The image style is limited to the homepage
- It is limited to news article images
- It lacks information about the image dimensions or aspect ratio

One objective with image styles is to create them in a way that they are reusable. The more reusable an image style is the less image styles you will need to create which in turn becomes easier to manage. The main issue with the image style above ("Homepage news article images"), besides the 3 bullet points we called out, is that is not reusable. The name of it limits us to only use it on the homepage and only for news article images. If we want to display similar images elsewhere, we would need to create another image style maybe with the same parameters as the first one. You may be asking yourself, wait, why can't we use the same image style elsewhere? Technically you can, but think about how confusing it will be to use an image style called "Homepage news article images", not on the homepage and not on news article images.

### Creating reusable image styles

One very efficient way for creating reusable image styles is to name them based on the image aspect ratio or dimensions, or a combination of both. For example: " **16:9 (Max 320px)**", or " **Box 1:1 (500px)**". Here are some reasons why this is a great way to name image styles:

- They are not specific to any page or type of image (articles, events, etc.)
- They provide key information about the image aspect ratio and their dimensions
- I can use these image styles hundreds of times on any image that fits the requirements as well as on any page
- By creating/naming image styles this way, I may have just saved myself from creating many other image styles

### Identifying the images patterns

I have found one of the most effective ways for identifyiing the image styles you need to create is by looking at your website mockups (if you are fortunate enough to have them). This may not always be possible, but if you do have designs for your website, this will tell you exactly which images you will need and how they need to be rendered. Having this information upfront will help you tremendously when creating image styles because you can plan ahead of time how to create reusable image styles that share commom attributes.

### Image styles use cases

When naming image styles it helps me to think of the characteristics of the images I am creating image styles for. For example, I have an image that should be rendered in 16:9 aspect ratio and it should not exceed a width of 320px. This is how I arrived at the name **16:9 (Max 320px)**. This also makes it possible to know which image style to use if I have other images that need to be rendered similarly. By the way, it is perfectly okay to use an image style that is slightly off from what an image needs to be rendered at. For example, Let's say I have an image that should be rendered at 16:9 aspect ratio, but its size should not exceed 250px. for this image, I can still use the **16:9 (Max 320px)** image style.

A 100px or even 200px difference between the image style dimensions and the image you need to use it on it's an acceptable thing to do for a couple of reasons:

- 100 or 200px in most cases will not make a big of an impact in performance, however, if you are rendering 50 of these images in a single page, then this could certainly present performance issues. So my rule is as long as this is a oneoff type of situation, I'm okay with doing this.
- Keep in mind that just because your image may be resized larger than it actually needs to be rendered, your image will still visually rendered at the right size as I would suppose it is inside a container that will be sized to the right rendering size, via CSS.
- Being able to reuse an image style that may be slightly larger than needed saves me from creating more image styles.

I hope you see the impact good names for image styles have on your site. When you are working on an enterprise level website, using the best practices above can really help you with the maintenance of your image styles.

## Image styles effects

Effects are the rules you set on each image style. Rules such as cropping, sizing, converting, saturating, rotating, and scaling of images is how we determine how to render the images in our site. In most cases, you want to let content creators of your site upload images that are relatively big. Doing so will allow you to use the images in your library in any use case. It is perfectly okay to scale your images down thorugh the use of image styles, but it is not recommended to scale images up. Doing so will result in blurry or pixelated images. This is why is better to upload large images. But you may be thinking, if I upload super large images, this will affect the performance of my site. It will if you are rendering the original images, but since we are using image styles, Drupal uses the original image to make copies at the size and aspect ratio you defined in your image styles. This is why by uploading a single image you are able to use it in many use cases at different sizes or aspect ratios.

Image styles effects can vary from image style to image style. For example, some image styles will require images to be scaled down, then cropped. Others will require images to be resized then cropped and others may just need for images to be resized to specific size. All these actions are called "Effects" in image styles. The effects you apply to your image styles will depend on the end goal for rendering the images. Let's do a quick demo of creating one image styles then applying effects to it.

## Hands-on excercise

All the principles covered in this series apply to Drupal 8, 9, and 10. You can follow along or simply watch me do it. To get started, spin up a vanilla Drupal site of the version of your choice. At the begining of this series I mentioned we will stick with only core/out of the box functionality to keep things simple.

### Creating a new image style

1. Login to Drupal as administrator
2. In your Drupal site navigate to `/admin/config/media/image-styles`
3. Click **Add image style**
4. For _Image style name_ type: **16:9 (Max 320px)**
5. To keep things nifty, edit the image style machine name so it reads `16_9_max_320px`. (Remove the trailing underscore generated by the ending parenthesis in the image style name. Clean machine names are important to me 😃. It actually makes a difference when you are debugging issues and you find your machine name has an extra underscore you didn't catch).
6. Click **Create new style**

![Screenshot of image style creation form](https://mariohernandez.io/images/img-screenshot.webp)

The image style above follows the best practices for name we covered earlier. This makes this image style reusable on any image that meets the aspect ratio and dimension requirements.

### Adding effects to the image style

For the purpose of this exercise, we are going to use the **Scale and crop** effect. This is probably the effect I use the most because it does exactly what I want, scale the image down to the size I want and crop it in the aspect ratio I need.

1. While in the page where the new image style was created (/admin/config/media/image-styles/manage/16\_9\_max\_320px), scroll down and you should see the **Effect** dropdown
2. Select **Scale and crop** from the dropdown
3. Click **Add**. The _Add Scale and Crop effect_ screen will come up
4. Type **320** for width and **180** for height. **Note**: These two values are required when you select the scale and crop effect. In other effects, these values may not always be required. It is important to define fixed dimensions on your image styles. This ensures your images will be sized/cropped at exactly the size you expect them to. How did I figure out the height for a 16:9 image with a width of 320px is 180px? I used this online [aspect ratio calculator](https://calculateaspectratio.com/).
5. Notice how you can change the focal point of the cropping by clicking any of the circles under **Anchor**. For this example we'll keep it in the middle circle.
6. Click **Update effect**. This will bring you back to the image style page.
7. We're done!

![Screenshot of image effect screen](https://mariohernandez.io/images/img-effect.webp)

Now we have one custom image style with specific effects. If you noticed, Drupal comes with a couple of predefined image styles. If they work for your images you should make use of them. In this series we will be creating custom image styles.

As I mentioned earlier, names of image styles should be descriptive but not limiting. In the case of some of the image styles that come out of the box with Drupal, the names **Large**, **Medium**, and **Wide** do not seem like good choices for names because those names are all relative. **Large** in relation to what? **Medium** in relation to what? ...just sayin'.

### Image multipliers

One thing we have not discussed but it is very important in responsive images, is the use of "Image Multipliers". What are image multipliers? In responsive images, you often think of image sizes in natural dimensions. If I think of an image that needs to be rendered at 720px, I will most likely resize or crop that image at 720px which makes total sense. With the evolution of high density or high resolution (retina) screens on mobile and larger devices, because they contain thousands or millions more pixels than traditional resolution screens, images need to actually be bigger than the intended size so they are rendered at their highest resolution/quality. This is what image multipliers are.

If we go back to the example above of the 720px image. For this image to be rendered as sharp and high-quality as possible in retina screen devices, we should add a 2x or 3x multiplier to it. Meaning, we should create an image styles for this image at twice and three times the intended size (1440px, 2160px). When we do this, the image will still be rendered at 720px (visually), but because we are providing larger images, these images will have twice or three times the number of pixels within them and when viewed in high resolution screens, the image quality will be superior than if we are only providing a regular 720px image. **Note**: I typically only create a 2x multiplier image styles for most of my images, but there may be situation when there are specific requirements for creating a 3x multiplier image styles.

### Create a 2x multiplier image style

The same way you created the original image style above for 16:9 (Max 320px), go ahead and repeat the process but this time create a 2x multiplier image style, **16:9 (Max 640px)**. Remember, the dimensions of this image style should be 640 x 360px.

## So what's next?

With our custom image styles in place, we can now make use of them, but before we do, let's go over another very important concept within Drupal, **Responsive image styles** ...whaaaaatttt?

We'll comeback to Drupal in a bit but first, we'll talk about responsive image styles in the next post.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Image styles](https://mariohernandez.io/tag/image-styles/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Developers looking at computer screen](https://mariohernandez.io/images/thumbs/training-workshop.webp)





  May 20, 2018



  For the past couple of years I have been running private and community driven training workshops and I'd like to share my experiences and lessons learned.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Image Styles
[Skip to content](https://mariohernandez.io/blog/responsive-image-styles/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Two picture frames on a counter](https://mariohernandez.io/images/picture-frames.webp)

[Photo by: Sincerely Media](https://unsplash.com/@sincerelymedia)

In a nutshell, responsive image styles are a collection of image styles. It can be confusing because the similarities in their names, but responsive image styles are a bundle that holds one or more image styles.

## What's the use of responsive image styles?

If you read the posts about the `<picture>` element as well as the one about `srcset` and `sizes` attributes, we discussed that whether you are doing art direction or resolution switching, we need to provide the browser with a collection of images to serve to different devices. In Drupal the way we provide the collection of images is by using responsive image styles.

![Three images stored in a box](https://mariohernandez.io/images/responsive-image-styles.webp)

## Naming responsive image styles

In the previous post we went in detail about best practices for naming image styles. Properly naming responsive image styles is just as important but there are some differences in guidelines. While naming image styles is mostly based on the characteristics of the images (aspec ratio, orientation, dimensions), naming responsive image styles is typically based on their use case. Let's take a look at some examples.

Let's say we are building a photo gallery where we will use a series of images to display as a slider or photos grid. We may not be as concerned about the images aspect ratio or dimentions because we already have image styles in place to handle that. We're only interested on how the images will be used. In this example the use case is a Gallery. So a name for the responsive image style that makes sense to me would be **Gallery** or **Photo gallery**. Another example would be creating a responsive image style for your website's hero component. Regardless of what the images dimensions are, the responsive image style can be called **Hero**. Both of these examples are for very unique use cases, but there are also cases for more common type of responsive images styles such as a listing of news articles or events, a featured news article or a page for team member photos. In these cases, we can use names that we can reuse elsewhere. Something like **Person listing**, **News full**, **Content grid**, or **16:9 (Max 460px)**.

## Back to hands-on exercises

We are going to create a new responsive image style in which we will make use of the image styles we created in the previous post. Let's pretend the images we are targeting will be used for displaying News and Events listings ( [Similar to this](https://www.visittheusa.com/usa-experiences), and example below).

![Listing of news articles](https://mariohernandez.io/images/list.webp)

Most websites use patterns that they repeat across their sections or pages. The news listing example above is a pattern that can be used for not only displying news articles, but maybe also events, social media posts, and more. This is great because identifying these patterns can help us create better image styles and responsive image styles that are reusable. This is what I meant in the previous post when I said that if you are fortunate enough to have designs for your project, you will be able to identify these patterns right away. Let's keep this in mind as we get back into exercise mode.

## Resolution switching

Here's where all of our knowledge about `<picture>` (art direction) and `srcset` and `sizes` (resolution switching) comes in handy. We'll start with resolution switching because art direction requires additional tooling and configuration.

In Drupal 8 we used the Picture and Breakpoints contrib modules to handle responsive images. Starting with Drupal 9, Drupal provides the " **Responsive image**" core module which means we don't need to install any contrib modules. Responsive image is not enabled by default.

01. Enable the Responsive image core module (/admin/modules)
02. Once enabled, head over to `/admin/config/media/responsive-image-style` to begin creating our first responsive image style
03. Click **Add responsive image style**
04. Type **Content grid** as the label for the responsive image style
05. Select \* _Responsive image_ from the Breakpoint group dropdown
06. Scroll down and select a Fallback image style ( **16:9 (Max 320px)**)
07. Expand the **1x Viewport Sizing \[\]** fieldset
08. Under **Type**, chose **Select multiple image styles and use the sizes attribute**
09. Under **Sizes** type the following: **(max-width:640px) 100vw, 30vw** (I'll explain shortly)
10. Under **Image styles** select the image styles we created before
11. Scroll down and click **Save**

![Three images stored in a box](https://mariohernandez.io/images/responsive-image-style-screenshot.webp)

### Let's go over everything we just did

Since we are doing resolution switching and not art direction, we chose **Responsive image** from the Breakpoint group dropdown. Doing so presents to us the **1x Vieport Sizing \[\]** screen with the following options:

- **Type**: Again, since we are doing resolution switching, the obvious choice here is **Select multiple image styles and use the sizes attribute**. The other two options are irrelevant in this particular example.
- **Sizes**: The Sizes option is where we tell the browser how big/small our images should be rendered in relation to the viewport being used. Depending on our goal, this field accepts a single value or a media query with some conditions. Let's say we wanted our images to always render at full width regardless of the device being used (like a Hero image for example), then the value for the **Sizes** field would be **100vw** (100% the viewport width). In our case however, we want the image to display full width, but only if the viewport/device is not larger than 640px, otherwise, meaning if the viewport/device is larger than 640px, we want the image to display at 30% the viewport width. We could had also used a pixel-based value such as 400px for example.
- **Image styles**: This is where we choose the image styles we want to make available for the browser to pick from. Think of this as the `srcset` attribute in the `<img>` tag.
- **Fallback image**: We pick a fallback image in case all the above fails.

**Very important**: Remember in the [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes) post, our claim was that it's better to let the browser pick the best image possible as the browser is smarter than us? This is exactly what we are doing here. We are providing the browser with a collection of images to pick from. Each image provides its dimensions. Then we tell the browser how big/small we want the images to be rendered. One thing we are not doing is telling the browser which image to use, we let the browser make that decision. This is the complete opposite of what we do when we use `<picture>`. As a reminder, the method used above is what you would do in most of your images. This is like the default configuration for your responsive images. Only when you need to crop your images differently for each device size is when you would use the art direction approach.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.


 [See more posts](https://mariohernandez.io/blog)

## Managing Responsive Images
[Skip to content](https://mariohernandez.io/blog/responsive-images-and-media/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Watter color mountains](https://mariohernandez.io/images/media.webp)

[Photo by: Simon Berger](https://unsplash.com/@8moments)

Drupal's Media is a powerful tool and we will use it to improve the way we manage responsive images by using media types and view modes to our advantage when managing responsive images. The following quote comes straight from Drupal's [Media module](https://www.drupal.org/docs/8/core/modules/media/overview):

> In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities. Media items are typically images, documents, slideshows, YouTube videos, tweets, Instagram photos, etc. Media entities are standard Drupal content entities. And are grouped by Media type bundles. Like content types they can have fields added, and their display can be managed via view modes.

## Media in Drupal

Out of the box, Drupal ships with the following media types: Audio, Document, Image, Remote video, and Video. You can create new media types if needed. For example, you could create a new media type that is of type "Image". Why would you do this? Well, in some cases, you may have specific requirements to handle images of a particular entity and rather than modify the existing Image media type, you could create a new one so you can manage specific settings on the new type and don't run the risk of breaking something on your site by updating the default Image media type. Creating new media types is outside the scope of this post, but wanted to let you know what's available to you.

1. Let's start by enableing the Media and Media Library modules as these are not enabled by default
2. Navigate to `/admin/structure/media`
3. Since we'll be working with images, click the **Edit** link to the right of the Image media type
4. We won't get into all the wonders of Media types, instead let's jump into **Manage display**

Like any other Drupal entity bundle, Manage displays, also known as View modes, are a pretty powerful feature. So what are view modes? View modes is how we display content in different ways. Take a look at the image below. Each of the numbered marks is a view mode. Same content, different ways and different fields.

![Image of amazon.com page showin a computer mouse](https://mariohernandez.io/images/modes.webp)

### Media view modes

Now that we understand how view modes work, we will use them to manage/display our responsive images. Let's start by creating a new Media view mode.

1. Within the Manage display tab for the Image media type, scroll down and expand the **Custom display settings** fieldset
2. Click **Manage view modes**
3. In the View modes screen scroll down to the Media section and click **Add new Media view mode**
4. Type **News listing** as the view mode name.
5. Click **Save**
6. Go back to the Image media type Manage display screen (/admin/structure/media/manage/image/display)
7. Scroll down and expand the **Custom display settings** fieldset
8. Check **News listing** and click **Save**. This enables the newly created view mode. You should now see it under the Manage display tab for the Image media type.

### Configure the new view mode

It's time to link the new view mode for the Image media type with the responsive image style we created.

1. Withing the Manage display screen, click the **News listing** view mode we just created
2. Change the Format of the image field to **Responsive image**. This allows us to pick a responsive image style of our choice.
3. Click the gear icon to the right of the image field
4. Under _Responsive image style_ select **Content grid**. This is the responsive image style we created in the previous post.
5. Link image to nothing
6. Click **Update**
7. Scroll to the bottom of the page and click **Save**

### What did we just do?

We just put all the pieces together which will result in well-managed responsive images. The order we followed is:

1. **Image styles**: These are several image templates that share similar attributes (i.e. aspect ratio).
2. **Responsive image style**: This is a collection of image styles that fullfill a specific use case.
3. **Media type and view mode**: We have specific requirements for news and event article images. View modes allow us to fullfill these requirements without affecting other image displays.

## Where do we use the responsive images?

So image styles, responsive image styles and image view mode are all connected and working great (you'll have to take my word for it 😃). One thing though, what content in our site will take advantage of all the beutiful work we've done? How about news articles? Take another look at the screenshot below. That's what we will do with all the work we've done.

![Listing of news articles](https://mariohernandez.io/images/list.webp)

## Configure the Article content type

Since we opted to use news article images as the content to work with, there is a little clean up we need to do first in the Article content type.

The image field that ships with the Article content type does not use Drupal's Media, it's a basic image field. This does not mean we can't use responsive images with this type of image field, we can, but we get more out of the Media type field (view modes for starters). In addition, with the media type image field, we can take advantage of media library, add more fields to the image media type, reuse images, and much more.

### Remove the image field from Article content type

**Warning**: Removing the image field will result in loosing any images you may have uploaded using this field. Only do this if you are sure you don't need the images. I never tested deleting the image field on a site that already had images so I am not sure if Drupal will even let you delete it.

1. From the admin toolbar, click **Structure**, **Content types**
2. Click **Manage fields** to the right of the Article content type
3. For the image field, click the dropdown under _Operations_ and select **Delete**
4. Click **Delete** again to confirm you want to delete the image field. The image field is now gone

### Adding a new media reference field to the Article content type

01. Still within the _Manage fields_ for the Article content type
02. Click **Create a new field**
03. In the _Add a new field_ dropdown, select **Media** which is located under the _Reference_ section. Notice there is also an image field, but this is the same kind we just deleted. Media is what we want.
04. Type **Image** as the label for the new field
05. Click **Save and configure**
06. Keep the _Allowed number of values_ as **Limited to 1** and click **Save field settings**
07. Optional but always a good practice is to add Help text. (i.e. Upload or select an image for this article)
08. Check the box if you want to make this a required field
09. Reference method should be **Default**
10. Check the **Create referenced entities if they don't already exist** checkbox
11. For _Media type_ check **Image** (extremely important)
12. Click **Save settings**. A new Image field is now available but this time it's a Media reference field of type Image.

### Arranging the field for content entry and content display

By default the new image field was added at the bottom of the list of fields. Let's move the field up. We will follow the same steps for the **Manage form display** (for when content is created), and **Manage display** (for when content is displayed on the page).

1. Within the **Manage form display** tab scroll down until you find the new Image field
2. Drag it up so it displays right under the Title field
3. Click **Save**
4. Repeat for **Manage display**

## Configure responsive images for the new image field

1. Still within the Article content type page, click **Manage display**
2. Drupal by default provides 3 view modes for the Article content type: **Default**, **RSS**, **Teaser**, and **Full content** (not enabled by default). We can create as many new view modes as we want/need, but for this excersice we will use **Teaser**.
3. Click **Teaser** from the list of view modes
4. For the image field, make sure its Format is set to **Rendered entity**. Since the new Image field we added is of Media type, the image is an entity and we want to render it as such.
5. Click the gear icon to the far right of the Image field
6. Under _View mode_ select **News listing**. This is the view mode we created for the Media image type field.
7. Click **Update** then scroll down and click **Save**. That's it.

## Displaying responsive images in news articles

Before we can see the responsive images, let's create a couple of news articles so we have content to work with. Go ahead and create a few news articles using the Article content type. Upload large images if you wish so we can see the work we've done in action.

In the next post, we will complete the configuration and display of responsive images.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Images Guide
[Skip to content](https://mariohernandez.io/blog/responsive-images-wrapping-up/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Person holding a wrapped gift box](https://mariohernandez.io/images/wrap.webp)

[Photo by: Kira auf der Heide](https://unsplash.com/@kadh)

As far as image resolution switching, all the work we need to do is done. We will proceed to creating a quick Drupal view to display a list of news articles each of which will have a responsive image. When we finish with that, we will do the last pending thing, configuring responsive image styles using the `<picture>` element. You didn't forget about the picture element, did you?

## Creating a new Drupal view for news articles

Out of the box Drupal already comes with a view that shows a list of content, but in the Olivero theme this view is not displayed the way we need it, so we will create our own view.

01. From the admin toolbar, click, **Structure** \| **Views**
02. Click **Add view**
03. Give the new view any name you wish (i.e. News, Latest News, etc.)
04. In the **View settings** select to show Content of type **Article**
05. In **Page settings** check **Create a page**
06. Page title can be anything you wish
07. Type **news** (lower case) as the path
08. Under **Page display settings** chose **Unformatted list** of **teasers**
09. Scroll and click **Save and edit**
10. Scroll down and click **Save**

Two important things in the view above:

- The path is the url where the content list will be available (i.e. [https://my-site.com/news](https://my-site.com/news)).
- Using **Teaser** allows us to make sure of all the previous configuration we've done for responsive images.

With the view now in place, go to the new page we created, `/news`. This should show a list of news articles. Don't worry if the list does not look like the screenshot we showed earlier. The main thing is that you get a list of articles with images. The images in each article should reflect the configuration we setup for responsive images. You can check this by inspecting the images and you should see many of the attributes we configured. See example below.

![Demo of image and code inspector](https://mariohernandez.io/images/img-demo-inspect.webp)

- First, the image is rendering using the `img` tag and not `<picture>`
- The img tag uses the `srcset` and `sizes` attributes
- We can see the diferent image styles we created

That's it! We have completed all the steps for managing responsive images using the resolution switching approach. Now we will complete this series by going back to creating a new responsive image style but this time using the `<picture>` element.

## Responsive image style using art direction

I opted to leave this approach for last because it requires a couple of extra tools that are not part of Drupal core. As previously mentioned, art direction requires that each device gets an image cropped differently to ensure better user experience. Although Drupal provides a cropping "effect" within image styles, it is an automatic cropping process and cannot be customized for each image. This may not always work because we don't know what the focal point for each image we need cropped may need to be when trying to achieve art direction. For example, I may upload an image that I need to crop so the focal point is on the top-left corner, but next time I may upload an image where the focal point should be the bottom-right corner. Focal point refers to picking the area that is the most important to display specially on small devices.

What we need is to be able to manually crop each image we intend to do art direction with as we add them to the site. The good news is that within the Drupal echosystem we have many tools to choose from. In the interest of time, I'm going to simply discuss the tools you need to be able to manually crop your images on demand, but will not go into detail about their configuration or settings as those modules/tools have good documentation you can follow for proper configuration.

Here are the tools we will be working with:

- [Crop API](https://www.drupal.org/project/crop): On its own it does nothing, but in combination with other tools like Image widget crop, it gives you the ability to crop images on demand.
- [Image widget crop](https://www.drupal.org/project/image_widget_crop): Provides the UI for content creators to be able to crop images on demand. It has a hard requirement of the Crop API module.
- [Cropper](https://github.com/fengyuanchen/cropper): A simple jQuery image cropping plugin for added cropping functionality.

**Note**: With the exception of the Crop API module, the other two tools above are optional or can be replaced by other similar tools/modules. Often times the modules you pick for a job depend on your unique requirements. So don't feel you need to use the tools above if you know of other equivalent ones that may do a better job.

## Next key steps to complete

With your tools inplace, you will probably need to complete the following steps:

- Creating crop types
- Create image styles that match your images rendering requirements (aspect ratio, dimentions, crop settings, etc)
- Adding a new effect to image styles that use "Manual crop"
- Create new responsive image style using the `<picture>` element

Crop types: They are in principle similar to image styles. They allow us to setup parameters for how to crop images. In particular, they help us predefine aspect ratios for cropping images. We can create a Square crop type, 3:2 crop type, 16:9 crop type, etc. Important to note, crop types's main job is to define cropping parameters in images, they don't restrict you from manually picking the image focal point.

Image styles: Since we are going to be doing art direction, we will need image styles that allow for custom/manual cropping. We already know how to create image styles, the ones for art direction will follow the behavior of the hero image [on this page](https://www.wwe.com/shows). Notice how the main images are wide when viewed in a large screen, but if you resize your browser or view the site on a mobile device the images become narrow and their aspect ratio changes. See both examples below.

![WWE fighters](https://mariohernandez.io/images/desktop.webp)

![WWE fighters](https://mariohernandez.io/images/mobile.webp)

The examples above shows an image cropped differently for different device sizes. This is Art Direction and is achieved using the `<picture>` element.

## Responsive image styles using `<picture>`

The biggest difference between creating responsive image styles for resolution switching and art direction is the "Breakpoint group" we select. Let's go through the process now:

1. If you haven't already, enabled the Responsive image module
2. Head over to `/admin/config/media/responsive-image-style` to begin creating a responsive image style
3. Click **Add responsive image style**
4. Type **Banner** as the label for the responsive image style. This name is solely based on the image examples above. Feel free to assign any name that makes sense to you.
5. Select **Olivero** from the Breakpoint group dropdown. If you are using a different theme, choose that theme from the dropdown. We will discuss breakpoints in a bit.
6. Scroll down and select a Fallback image style. Pick an image style that could be used on desktop and mobile if all failed with our responsive image style.

### Breakpoints

[Breakpoints](https://www.drupal.org/docs/theming-drupal/working-with-breakpoints-in-drupal) are defined in your theme's `<theme-name>.breakpoints.yml` which is located in the root of your theme. For each device you wish to target you create a breakpoint. Here's an example (I modified the breakpoints slightly for better read):

```yaml
olivero.sm:
  label: Small
  mediaQuery: 'all and (min-width: 500px)'
  weight: 0
  multipliers:
    - 1x
    - 2x
olivero.md:
  label: Medium
  mediaQuery: 'all and (min-width: 960px)'
  weight: 1
  multipliers:
    - 1x
olivero.lg:
  label: Large
  mediaQuery: 'all and (min-width: 1440px)'
  weight: 2
  multipliers:
    - 1x
```

Based on the breakpoints found in `*.breakpoints.yml`, you should see an image similar to the one below which should reflect the same breakpoints.

![Responsive image screen](https://mariohernandez.io/images/responsive-picture.webp)

- Expand any of the breakpoints fieldset and you should see a familiar set of settings. Think of each fieldset you expand here as the `<source>` element inside the `<picture>` element. This is where we choose a list of image styles. Then we repeat the process for each breakpoint. This is where we are telling the browser which images to use for each device size and therefore setting up art direction.
- The sizes field works the same as what we did in resolution switching.
- Once you have completed all yoru configuration, save your changes.

### What's next

Once the responsive image style above is ready to go, You can repeat the process of creating a new view mode for your Media image and configuring it to use the new responsive image style you created above (Banner).

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Train tracks surrounded by tree lines](https://mariohernandez.io/images/thumbs/attributes.webp)





  January 10, 2019



  As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.


 [See more posts](https://mariohernandez.io/blog)

## Managing Image Embeds
[Skip to content](https://mariohernandez.io/blog/managing-image-embeds-with-drupal-media/#main-content) [Drupal media](https://mariohernandez.io/tag/drupal-media/)

![Siluete of man in front of sphere](https://mariohernandez.io/images/media-embed.webp)

[Photo by: Greg Rakozy](https://unsplash.com/@grakozy)

Allowing your content creators to embed images in text fields is a big risk if you don't have the right measures in place to get properly rendered images without jeopardizing your site's performance. We faced this issue first-hand with embedded images due to not using the right configuration and this lead to extremely large images being rendered. In this post I'll go over the techniques I took for addressing those issues and set up a system for image embeds that is solid and performant.

I started by writing a seven-part guide on [how to setup responsive images](https://mariohernandez.io/blog/responsive-images-in-drupal-a-guide). In this post I'll focus on image embeds. If you followed or read the responsive images guide, you should be able to take advantage of some of the work we did there in this post. The guidelines covered here include:

- Defining requirements
- Image styles
- Media view modes
- Text format configuration

## Defining requirements

Before you write the first line of code or set the first drupal configuration for this issue, you need to have a clear understanding of your requirements. Here is a summary of my requirements:

- Only certain user roles can embed images

This means we need to figure out if the text formats used in our site will allow us to set the restrictions we need. Otherwise we may need to create or edit a text format for our target user roles.

- Users need to be able to choose the image size and aspect ratio when embedding images

We defined the image sizes and aspect ratios and assigned names that were user-friendly for non-technical users. We came up with name options we think our users will find easy to work with such as:

  - Small square, Small portrait, Small rectangular
  - Medium square, Medium portrait, Medium rectangular, Medium rectangular wide
  - Large square, Large rectangular, Large rectangular wide
  - Extra large square, Extra large rectangular, Extra large rectangular wide
- If no option is selected by users, set a default image size

For the default option when no selection is made by the user, we decided to use the Medium rectangular option. This has an aspect ratio of 3:2 and it measures about 720x480.

- Existing Media items need to be available for embedding

This was a tricky one because my original inclination was to create a new Media type so we can isolate all configuration for its view modes and not overpopulate our default Media type. However, this ended up not working for us because when you limit your image embeds to only use a new Media type, you don't get access to any of the media items (images), that have already been uploaded to the Media library using other media types. Ultimately we ended up using Drupal core's Media type, Image, and our dev team had to compromise on having a very busy list of view modes for this media type.

- Images need the ability to be cropped wihin the Media page

Since most of our images already provide the ability to be cropped at different aspect ratios, using the core Media type in the previous bullet point made this an easy solution.


## Image styles

It all starts with image styles. I'm not going to go over how to create image styles, you can read my post [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal). The one thing I am going to repeat however is the importance of creating reusable image styles. Reusable image styles can help you reduce the number of image styles you create while providing the flexibility you need with each use case.

Image styles are key as each of the size options we defined above translate into image styles. So Small square for example, is an image style that is defined as `1:1 (250px)`. Medium rectangular would be something like `3:2 (720x480)`, etc. You may be wondering, how do you plan on using fiendly names for your content editors when your image styles names are not very friendly? Great question. Since we are using Drupal's Media, content editors do not interact directly with image styles, they do with Media view modes and this is where we will use more friendly names.

## Media view modes

View modes are one of Drupal's powerful features. Being able to display content is different ways with little effort can turn a simple website into a dynamic content hub. The example I always give when someone asks me what view modes are or how do they work is the Amazon website. When you are viewing a product in [amazon.com](http://amazon.com/), or most retail websites for that matter, you will notice that the same product or similar ones appear all over the page but in slightly different ways, with different fields or styles. See the page below for an example.

![Screenshot of a computer mouse in Amazon.com](https://mariohernandez.io/images/modes.webp)

_The image above shows many ways in which a product can be displayed. I've numbered each display_.

In Drupal, every entity such as content types, media types, blocks, etc., offer the ability to create view modes. For the purpose of image embeds, we will create a Media type view mode for each image style we plan on using. The view modes is what content editors will interact with when choosing an image size or aspect ratio during the image embed process. This is where we will use the user-friendly names we defined earlier. Let's go over how this relationship between view modes and image styles works for image embeds.

### Configure view modes for the Image media type

1. In your Drupal site, create an image style for each image size option you wish to provide to users when embedding images.

2. Next, create a Media view mode for each image style ( `/admin/structure/display-modes/view`). **Very iimportant**: Remember the view mode's label (name) is where we are going to use the friendly name (i.e. Medium rectangular (720x480)). I like to keep the machine name similar to the label so it's easier to debug or identify in code (i.e. `medium_rectangular_720x480`).

3. Now, let's tie 1 & 2 together:

   - Go to the media type you plan on using for media embeds ( `/admin/structure/media/manage/image/display`). I am using Drupal core's **Image** media type.
   - Scroll down and expand the **Custom display settings** fieldset.
   - Check each of the view modes you created in step 2 and click **Save**.
4. Now click each of the view modes and update the image field to use the respective/matching image style.


## Configure the text format

View modes and image styles are all configured. Now let's configure the Text format that authorized users will use to embed images.

1. Go to the Text formats and editors page ( `/admin/config/content/formats`)
2. Click **Configure** next to the text format you plan on using (i.e. Full HTML)
3. Ensure the right user roles are selected
4. Within the **Toolbar configuration** section, drag the **Drupal media** button from the _Available buttons_ options to the _Active toolbar_ section. You could probably remove the original insert image button since you won't be using it.
5. Scroll to the **Enabled filters** section and check the **Embed media** checkbox
6. Scroll to the **Filter settings** section and set the following:
   - **Default view mode**: This is the default display that will be used if content editors don't pick an option when embedding images. Select any of the view modes that represents the image size you want to use as default.

   - **Media types selectable in the Media Library**: Select the Media type you plan on using. In my case is **Image**.

   - **View modes selectable in the 'Edit media' dialog**: Finally, select each of the view modes you created in the previous section. FYI: View modes will be sorted in alpha order by their machine name. In my case I had to prefix some of the machine names with either "a" or "b" so the list of options for the users to choose from would be nicely organized by their label name. See screnshot below.

   - Click **Save configuration**

## Testing your configuration

Now that we've completed all the configuration we should be able to take it for test drive.

- Go to any page where there is a text field with a WYSIWYG editor
- Make sure you are using the right text format by selecting it at the bottom of the text field where you want to embed an image
- Click the **Insert media** button from the editor's toolbar
- Select or upload the image you'd like to embed
- When the image has been inserted, click on it and you should see several options of actions you can do with the image. Things like align the image, add a caption, link it, and you should also see a selection box listing all the view modes you created.
- After making your selection you should immediately see the image size/aspect ratio change to the one you selected. When you are happy with your selection, click the **Save** button to save your page.

**Important**: Depending on your site's configuration, the options for changing your image size may look different than mine. In my case, I am only using Drupal's core modules and this is how the options look for me:

![Example of image embed editor options](https://mariohernandez.io/images/img-embed-demo.webp)

## In closing

Putting a system like this for your image embeds will give you the piece of mind that content editors have options to choose how big or small they would like images to be displayed, and from a performance point of view, if your image styles are done properly, you can rest assurred that bloated images will never be rendered because you have put the guard rails in place to avoid this from happening.

I hope you found this article useful and can put these techniques to use in your own Drupal project. Happy New Year! 🎉 🎊 🎆 👋

Tags for this post

- [Drupal media](https://mariohernandez.io/tag/drupal-media/)
- [Media](https://mariohernandez.io/tag/media/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Theme Migration
[Skip to content](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/#main-content) [Storybook](https://mariohernandez.io/tag/storybook/)

![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/storybook.webp)

[Photo by: Markus Spiske](https://unsplash.com/@markusspiske)

Building a custom Drupal theme nowadays is a more complex process than it used to be. Most themes require some kind of build tool such as Gulp, Grunt, Webpack or others to automate many of the repeatitive tasks we perform when working on the front-end. Tasks like compiling and minifying code, compressing images, linting code, and many more. As Atomic Web Design became a thing, things got more complicated because now if you are building components you need a styleguide or Design System to showcase and maintain those components. One of those design systems for me has been Patternlab. I started using Patternlab in all my Drupal projects almost ten years ago with great success. In addition, Patternlab has been the design system of choice at my place of work but one of my immediate tasks was to work on migrating to a different design system. We have a small team but were very excited about the challenge of finding and using a more modern and robust design system for our large multi-site Drupal environment.

## Enter Storybook

After looking a various options for a design system, [Storybook](https://storybook.js.org/) seemed to be the right choice for us for a couple of reasons: one, it has been around for about 10 years and during this time it has matured significantly, and two, it has become a very popular option in the Drupal ecosystem. In some ways, Storybook follows the same model as Drupal, it has a pretty active community and a very healthy ecosystem of plugins to extend its core functionality.

Storybook looks very promising as a design system for Drupal projects and with the recent release of [Single Directory Components or SDC](https://www.drupal.org/project/sdc), and the new [Storybook module](https://www.drupal.org/project/storybook), we think things can only get better for Drupal front-end development. Unfortunately for us, technical limitations in combination with our specific requirements, prevented us from using SDC or the Storybook module. Instead, we built our environment from scratch with a stand-alone integration of Storybook 8.

**INFO**: At the time of our implementation, TwigJS did not have the capability to resolve [SDC's](https://www.drupal.org/project/sdc) namespace. It appears this has been addressed and using SDC should now be possible with this custom setup. I haven't personally tried it and therefore I can't confirm.

## Our process and requirements

In choosing Storybook, we went through a rigorous research and testing process to ensure it will not only solve our immediate problems with our current environment, but it will be around as a long term solution. As part of this process, we also tested several available options like [Emulsify](https://www.emulsify.info/) and [Gesso](https://github.com/forumone/gesso) which would be great options for anyone looking for a ready-to-go system out of the box. Some of our requirements included:

### 1\. No components refactoring

The first and non-negotiable requirement was to be able to migrate components from Patternlab to a new design system with the least amount of refactoring as possible. We have a decent amount of components which have been built within the last year and the last thing we wanted was to have to rebuild them again because we are switching design system.

### 2\. A new Front-end build workflow

I personally have been faithful to Gulp as a front-end build tool for as long as I can remember because it did everything I needed done in a very efficient manner. The Drupal project we maintain also used Gulp, but as part of this migration, we wanted to see what other options were out there that could improve our workflow. The obvious choice seemed to be Webpack, but as we looked closer into this we learned about [ViteJS](https://vitejs.dev/), " _The Next Genration Frontend Tooling_". Vite delivers on its promise of being " _blazing fast_", and its ecosystem is great and growing, so we went with it.

### 3\. No more Sass in favor of PostCSS

CSS has drastically improved in recent years. It is now possible with plain CSS, to do many of the things you used to be able to only do with Sass or similar CSS Preprocessor. Eliminating Sass from our workflow meant we would also be able to get rid of many other node dependencies related to Sass. The goal for this project was to use plain CSS in combination with PostCSS and one bonus of using Vite is that Vite offers PostCSS processing out of the box without additional plugins or dependencies. Ofcourse if you want to do more advance PostCSS processing you will probably need some external dependencies.

## Building a new Drupal theme with Storybook

Let's go over the steps to building the base of your new Drupal theme with ViteJS and Storybook. This will be at a high-level to callout only the most important and Drupal-related parts. This process will create a brand new theme. If you already have a theme you would like to use, make the appropriate changes to the instructions.

### 1\. Setup Storybook with ViteJS

#### ViteJS

- In your Drupal project, navigate to the theme's directory (i.e. `/web/themes/custom/`)
- Run the following command:

```shell
npm create vite@latest storybook
```

- When prompted, select the framework of your choice, for us the framework is React.
- When prompted, select the variant for your project, for us this is JavaScript

After the setup finishes you will have a basic Vite project running.

#### Storybook

- Be sure your system is running NodeJS version 18 or higher
- Inside the newly created theme, run this command:

```shell
npx storybook@latest init --type react
```

- After installation completes, you will have a new Storybook instance running
- If Storybook didn't start on its own, start it by running:

```shell
npm run storybook
```

#### TwigJS

Twig templates are server-side templates which are normally rendered with TwigPHP to HTML by Drupal, but Storybook is a JS tool. TwigJS is the JS-equivalent of TwigPHP so that Storybook understands Twig. Let's install all dependencies needed for Storybook to work with Twig.

- If Storybook is still running, press **Ctrl + C** to stop it
- Then run the following command:

```shell
npm i -D vite-plugin-twig-drupal html-react-parser twig-drupal-filters @modyfi/vite-plugin-yaml
```

- [vite-plugin-twig-drupal](https://github.com/larowlan/vite-plugin-twig-drupal): If you are using Vite like we are, this is a Vite plugin that handles transforming twig files into a Javascript function that can be used with Storybook. This plugin includes the following:
  - [Twig](https://www.npmjs.com/package/twig) or TwigJS: This is the JavaScript implementation of the Twig PHP templating language. This allows Storybook to understand Twig.

    **Note**: TwigJS may not always be in sync with the version of Twig PHP in Drupal and you may run into issues when using certain Twig functions or filters, however, we are adding other extensions that may help with the incompatability issues.
  - [drupal attribute](https://github.com/ericmorand/drupal-attribute): Adds the ability to work with Drupal attributes.
- [twig-drupal-filters](https://www.npmjs.com/package/twig-drupal-filters): TwigJS implementation of Twig functions and filters.
- [html-react-parser](https://www.npmjs.com/package/html-react-parser): This extension is key for Storybook to parse HTML code into react elements.
- [@modifi/vite-plugin-yaml](https://github.com/Modyfi/vite-plugin-yaml): Transforms a YAML file into a JS object. This is useful for passing the component's data to React as args.

#### ViteJS configuration

Update your **vite.config.js** so it makes use of the new extensions we just installed as well as configuring the namesapces for our components.

```js
import { defineConfig } from "vite"
import yml from '@modyfi/vite-plugin-yaml';
import twig from 'vite-plugin-twig-drupal';
import { join } from "node:path"
export default defineConfig({
  plugins: [\
    twig({\
      namespaces: {\
        components: join(__dirname, "./src/components"),\
        // Other namespaces maybe be added.\
      },\
    }),\
    // Allows Storybook to read data from YAML files.\
    yml(),\
  ],
})
```

#### Storybook configuration

Out of the box, Storybook comes with **main.js** and **preview.js** inside the **.storybook** directory. These two files is where a lot of Storybook's configuration is done. We are going to define the location of our components, same location as we did in **vite.config.js** above (we'll create this directory shortly). We are also going to do a quick config inside **preview.js** for handling drupal filters.

- Inside **.storybook/main.js** file, update the stories array as follows:

```js
stories: [\
  "../src/components/**/*.mdx",\
  "../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)",\
],
```

- Inside **.storybook/preview.js**, update it as follows:

```js
/** @type { import('@storybook/react').Preview } */
import Twig from 'twig';
import drupalFilters from 'twig-drupal-filters';

function setupFilters(twig) {
  twig.cache();
  drupalFilters(twig);
  return twig;
}

setupFilters(Twig);

const preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
  },
};

export default preview;
```

#### Creating the components directory

- If Storybook is still running, press **Ctrl + C** to stop it
- Inside the **src** directory, create the **components** directory. Alternatively, you could rename the existing **stories** directory to **components**.

## Creating your first component

With the current system in place we can start building components. We'll start with a very simple component to try things out first.

- Inside **src/components**, create a new directory called **title**
- Inside the **title** directory, create the following files: _title.yml_ and _title.twig_

### Writing the code

- Inside **title.yml**, add the following:

```yaml
---
level: 2
modifier: 'title'
text: 'Welcome to your new Drupal theme with Storybook!'
url: 'https://mariohernandez.io'
```

- Inside **title.twig**, add the following:

```php
<h{{ level|default(2) }}{% if modifier %} class="{{ modifier }}"{% endif %}>
  {% if url %}
    <a href="{{ url }}">{{ text }}</a>
  {% else %}
    <span>{{ text }}</span>
  {% endif %}
</h{{ level|default(2) }}>
```

We have a simple title component that will print a title of anything you want. The **level** key allows us to change the heading level of the title (i.e. h1, h2, h3, etc.), and the **modifier** key allows us to pass a modifier class to the component, and the **url** will be helpful when our title needs to be a link to another page or component.

Currently the title component is not available in storybook. Storybook uses a special file to display each component as a story, the file name is **component-name.stories.jsx**.

- Inside **title** create a file called **title.stories.jsx**
- Inside the stories file, add the following:

```js
/**
 * First we import the `html-react-parser` extension to be able to
 * parse HTML into react.
 */
import parse from 'html-react-parser';

/**
 * Next we import the component's markup and logic (twig), data schema (yml),
 * as well as any styles or JS the component may use.
 */
import title from './title.twig';
import data from './title.yml';

/**
 * Next we define a default configuration for the component to use.
 * These settings will be inherited by all stories of the component,
 * shall the component have multiple variations.
 * `component` is an arbitrary name assigned to the default configuration.
 * `title` determines the location and name of the story in Storybook's sidebar.
 * `render` uses the parser extension to render the component's html to react.
 * `args` uses the variables defined in title.yml as react arguments.
 */
const component = {
  title: 'Components/Title',
  render: (args) => parse(title(args)),
  args: { ...data },
};

/**
 * Export the Title and render it in Storybook as a Story.
 * The `name` key allows you to assign a name to each story of the component.
 * For example: `Title`, `Title dark`, `Title light`, etc.
 */
export const TitleElement = {
  name: 'Title',
};

/**
 * Finally export the default object, `component`. Storybook/React requires this step.
 */
export default component;
```

- If Storybook is running you should see the title story. See example below:
- Otherwise start Storybook by running:

```shell
npm run storybook
```

With Storybook running, the title component should look like the image below:

![Computer screenshot of a demo story in Storybook](https://mariohernandez.io/images/storybook-demo.webp)

_The controls highlighted at the bottom of the title allow you to change the values of each of the fields for the title._

I wanted to start with the simplest of components, the title, to show how Storybook, with help from the extensions we installed, understands Twig. The good news is that the same approach we took with the title component works on even more complex components. Even the React code we wrote does not change much on large components.

In the [next blog post](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components), we will build more components that nest smaller components, and we will also add Drupal related parts and configuration to our theme so we can begin using the theme in a Drupal site. Finally, we will integrate the components we built in Storybook with Drupal so our content can be rendered using the component we're building. Stay tuned. For now, if you want to grab a copy of all the code in this post, you can do so below.

[Download the code](https://github.com/mariohernandez/storybook)

## Resources

- [Storybook docs](https://storybook.js.org/docs/get-started)
- [How to write stories](https://storybook.js.org/docs/writing-stories)
- [Single Directory Components](https://www.drupal.org/project/sdc)
- [Storybook Drupal module](https://www.drupal.org/project/storybook)

## In closing

Getting to this point was a team effort and I'd like to thank [Chaz Chumley](https://github.com/chazchumley), a Senior Software Engineer, who did a lot of the configuration discussed in this post. In addition, I am thankful to the Emulsify and Gesso teams for letting us pick their brains during our research. Their help was critical in this process.

I hope this was helpful and if there is anything I can help you with in your journey of a Storybook-friendly Drupal theme, feel free to reach out.

Tags for this post

- [Storybook](https://mariohernandez.io/tag/storybook/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.


 [See more posts](https://mariohernandez.io/blog)

## Drupal and Storybook Integration
[Skip to content](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/#main-content) [Storybook](https://mariohernandez.io/tag/storybook/)

![Overlapped mountains painted with water colors](https://mariohernandez.io/images/mountains.webp)

[Photo by: Alex Shutin](https://unsplash.com/@fiveamstories)

Hey you're back! 🙂 In the [previous post](https://mariohernandez.io/blog/migrating-from-patternlab-to-storybook) we talked about how to build a custom Drupal theme using Storybook as the design system. We also built a simple component to demonstrate how Storybook, using custom extensions, can understand Twig. In this post, the focus will be on making Drupal aware of those components by connecting Drupal to Storybook.

If you are following along, we will continue where we left off to take advantage of all the prep work we did in the previous post. Topics we will cover in this post include:

1. What is Drupal integration
2. Installing and preparing Drupal for integration
3. Building components in Storybook
4. Building a basic front-end workflow
5. Integrating Drupal with Storybook components

## What is Drupal integration?

In the context of Drupal development using the component-driven methodology, Drupal integration means connecting Drupal presenter templates such as node.html.twig, block.html.twig, paragraph.html.twig, etc. to Storybook by mapping Drupal fields to component fields in Storybook. This in turn allows for your Drupal content to be rendered wrapped in the Storybook components.

The advantage of using a design system like Storybook is that you are in full control of the markup when building components, as a result your website is more semantic, accessible, and easier to maintain.

## Building more components in Storybook

The title component we built in the previous post may not be enough to demonstrate some of the advanced techniques when integrating components. We will build a larger component to put these techniques in practice. The component we will build is called **Card** and it looks like this:

![Palm trees in front of city buildings](https://mariohernandez.io/images/storybook-card.webp)

When building components, I like to take inventory of the different parts that make up the components I'm building. The card image above shows three parts: An image, a title, and teaser text. Each of these parts translates into fields when I am defining the data structure for the component or building the entity in Drupal.

## Building the Card component

- Open the Drupal site in your code editor and within your code editor navigate to the **storybook** theme ( `web/themes/custom/storybook`)
- Create two new directories inside _components_ called **01-atoms** and **02-molecules**
- Inside **02-molecules** create a new directory called **card**
- Inside the **card** directory add the following four files:
  - **card.css**: component's styles
  - **card.twig**: component's markup and logic
  - **card.stories.jsx**: Storybook's story
  - **card.yml**: component's demo data
- Add the following code snippet to **card.yml**:

```yml
---
modifier: ''
image: <img src="https://source.unsplash.com/cHRDevKFDBw/640x360" alt="Palm trees near city buildings" />
title:
  level: 2
  modifier: ''
  text: 'Tours & Experiences'
  url: 'https://mariohernandez.io'
teaser: 'Step inside for a tour. We offer a variety of tours and experiences to explore the building’s architecture, take you backstage, and uncover the best food and drink. Tours are offered in different languages and for different levels of mobility.'
```

- Add the following to **card.twig** to provide the markup and logic for the card:

```php
{{ attach_library('storybook/card') }}

<article class="card{{ modifier ? ' ' ~ modifier }}{{- attributes ? ' ' ~ attributes.class -}}" {{- attributes ? attributes|without(class) -}}>
  {% if image %}
    <div class="card__image">
      <figure>
        {{ image }}
      </figure>
    </div>
  {% endif %}

  <div class="card__content">
    {% if title %}
      {% include "@atoms/title/title.twig" with {
        'level': title.level,
        'modifier': title.modifier,
        'text': title.text,
        'url': title.url,
      } only %}
    {% endif %}

    {% if teaser %}
      <p class="card__teaser">{{ teaser }}</p>
    {% endif %}
  </div>
</article>
```

Code snippet for building card

- Copy and paste [these styles](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/components/02-molecules/card/card.css) into **card.css**.

- Finally, let's create the Storybook card story by adding the following to **card.stories.jsx**:


```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
};

export const Card = {
  render: (args) => parse(card(args)),
  args: { ...data },
};

export default component;
```

Let's go over a few things regarding the code above:

- The data structure in **card.yml** reflects the data structure and type we will use in Drupal.
  - The image field uses the entire `<img>` element rather than just using the image **src** and **alt** attributes. The reason for this is so when we get to Drupal, we can use Drupal's full image entity. This is a good practice for caching purposes.
- **card.twig** reuses the title component we created in the previous post. Rather than build a title from scratch for the Card and repeat the code we already wrote, reusing the existing components keeps us DRY.
- **card.stories.jsx** in the Storybook story for the Card, notice how the code in this file is very similar to the code in the **title.stories.jsx**. Even with complex components, when we port them into Storybook as stories, most times the code will be similar as what you see above because Storybook is simply parsing whatever is in **.twig** and **.yml** files. There are exceptions when the React code may have extra parameters or logic which typically happens when we're building stories variations. Maybe a topic for a different blog post. 😉

### Before we preview the Card, some updates are needed

You may have noticed in **card.twig** we used the namespace **@atoms** when nesting the **title** component. This namespace does not exist, and we need to create it now. In addition, we need to move the **title** component into the **01-atoms** directory:

- In your code editor or command line (whichever is easier), move the **title** directory into the **01-atoms** directory
- In your editor, open **title.stories.jsx** and change the line

**title: 'Components/Title'** to **title: 'Atoms/Title'**. This will display the title component within the Atoms category in Storybook's sidebar.
- Rather than have you make individual changes to **vite.config.js**, let's replace/overwrite all its content with the following:

```js
/* eslint-disable */
import { defineConfig } from 'vite'
import yml from '@modyfi/vite-plugin-yaml';
import twig from 'vite-plugin-twig-drupal';
import { join } from 'node:path'
export default defineConfig({
  root: 'src',
  publicDir: 'public',
  build: {
    emptyOutDir: true,
    outDir: '../dist',
    rollupOptions: {
      input: {
        'reset': './src/css/reset.css',
        'styles': './src/css/styles.css',
        'card': './src/components/02-molecules/card/card.css',
      },
      output: {
        assetFileNames: 'css/[name].css',
      },
    },
    sourcemap: true,
  },
  plugins: [\
    twig({\
      namespaces: {\
        atoms: join(__dirname, './src/components/01-atoms'),\
        molecules: join(__dirname, './src/components/02-molecules'),\
      },\
    }),\
    // Allows Storybook to read data from YAML files.\
    yml(),\
  ],
})
```

Let's go over some of the most noticeable updates inside **vite.config.js**:

- We have defined a few things to improve the functionality of our Vite project, starting with using **src** as our app root directory and **public** for publicDir. This helps the app understand the project structure in a relative manner.

- Next, we defined a Build task which provides the app with defaults for things like where should it compiled code to (i.e. **/dist**), and [`rollupOptions`](https://rollupjs.org/configuration-options/) for instructing the app which stylesheets to compile and what to call them.

- As part of the `rollupOptions` we also defined two stylesheets for global styles ( **reset.css** and **styles.css**). We'll create these next.

**Important**: This is as basic as it gets for a build workflow and in no way would I recommend this be your front-end build workflow. When working on bigger projects with more components, it is best to define a more robust and dynamic workflow that provides automation for all the repetitive tasks performed on a typical front-end project.

- Under the Plugins section, we have defined two new namespaces, **@atoms** and **@molecules**, each of which points to specific path within our _components_ directory. These are the namespaces Storybook understands when nesting components. You can have as many namespaces as needed.


### Adding global styles

- Inside **storybook/src**, create a new directory called **css**
- Inside the **css** directory, add two new files, **reset.css** and **styles.css**
- Here are the styles for [reset.css](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/css/reset.css) and [styles.css](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/css/styles.css). Please copy them and paste them into each of the stylesheets.
- Now for Storybook to use _reset.css_ and _styles.css_, we need to update **/.storybook/preview.js** by adding these two imports directly after the current imports, around line 4.

```js
import '../dist/css/reset.css';
import '../dist/css/styles.css';
```

### Previewing the Card in Storybook

Remember, you need NodeJS v20 or higher as well as NVM installed on your machine.

- In your command line, navigate to the **storybook** directory and run:

```shell
nvm install
npm install
npm run build
npm run storybook
```

A quick note about the commands above:

- **nvm install** and **npm install** are typically only done once in your app. These commands will first install and use the node version specified in **.nvmrc**, and will install all the required node packages found in **package.json**. If you happen to be workign on another project that may use a different version of node, when you comeback to the Storybook project you will need to run **nvm use** in order to resume using the right node version.
- **npm run build** is usually only ran when you have made configuration changes to the project or are introducing new files.
- **npm run storybook** is the command you will use all the time when you want to run Storybook.

After Storybook launches, you should see two story categories in Storybook's sidebar, **Atoms** and **Molecules**. The title component should be under Atoms and the Card under Molecules. See below:

![Palm trees near city buildings](https://mariohernandez.io/images/card-shot.webp)

## Installing Drupal and setting up the Storybook theme

We have completed all the prep work in Storybook and our attention now will be all in Drupal. In the previous post all the work we did was in a standalone project which did not require Drupal to run. In this post, we need a Drupal site to be able to do the integration with Storybook. If you are following along and already have a Drupal 10 site ready, you can skip the first step below.

1. Build a basic Drupal 10 website ( [I recommend using DDEV](https://ddev.readthedocs.io/en/stable/users/quickstart/#drupal)).
2. Add the **storybook** theme to your website. If you completed the excercise in the previous post, you can copy the theme you built into your site's **/themes/custom/** directory, Otherwise, you can clone [the previous post repo](https://github.com/mariohernandez/storybook) into the same location so it becomes your theme. After this your theme's path should be **themes/custom/storybook**.
3. No need to enable the theme just yet, we'll come back to the theme shortly.
4. Finally, create a new Article post that includes a title, body content and an image. We'll use this article later in the process.

## Creating Drupal namespaces and adding Libraries

Earlier we created namespaces for Storybook, now we will do the same but this time for Drupal. It is best if the namesapces' names between Storybook and Drupal match for consistency. In addition, we will create Drupal libraries to allow Drupal to use the CSS we've written.

- Install and enable the [Components](https://www.drupal.org/project/components) module
- Add the following namespaces at the end of **storybook.info.yml** (mind your indentation):

```yml
components:
  namespaces:
    atoms: src/components/01-atoms
    molecules: src/components/02-molecules
```

- Replace all content in **storybook.libraries.yml** with the following:

```yml
global:
  version: VERSION
  css:
    base:
      dist/css/reset.css: {}
      dist/css/styles.css: {}

card:
  css:
    component:
      dist/css/card.css: {}

```

- Let's go over the changes to both, **storybook.info.yml** and **storybook.libraries.yml** files:

  - Using the Components module we created two namespaces: **@atoms** and **@molecules**. Each namespace is associated with a specific path to the corresponding components. This is important because Drupal by default only looks for Twig templates inside the **/templates** directory and without the Components module and the namespaces it would not know to look for our component's Twig templates inside the components directory.
  - Then we created two Drupal libraries: **global** and **card**. The Global library includes two CSS stylesheets (reset.css and styles.css), which handle base styles in our theme. the Card library includes the styles we wrote for the Card component. If you noticed, when we created the Card component, the first line inside **card.twig** is a Twig attach library statement. Basically **card.twig** is expecting a Drupal library called **card**.

## Turn Twig debugging on

All the pieces are in place to Integrate the Card component so Drupal can use it to render article nodes when viewed in teaser view mode.

- The first thing we need to do to begin the integration process is to determine which Twig template Drupal uses to render article nodes in teaser view mode. One easy way to do this is by turning Twig debugging on. This used to be a complex configuration but starting with Drupal 10.1 you can now do it directly in Drupal's UI:

  - While logged in with admin access, navigate to `/admin/config/development/settings` on your browser. This will bring up the Development settings page.
  - Check all the boxes on this page and click **Save settings**. This will enable Twig debugging and disable caching.
  - Now navigate to `/admin/config/development/performance` so we can turn CSS and JS aggregation off.
  - Under **Bandwidth optimization** cleared the two boxes for CSS and Javascript aggregation then click on **Save configuration**.
  - Lastly, click the **Clear all caches** button. This will ensure any CSS or JS we write will be available without having to clear caches.
- With Twig debugging on, go to the homepage where the Article we created should be displayed in teaser mode. If you right-click on any part of the article and select **inspect** from the context menu, you will see in detail all the templates Drupal is using to render the content on the current page. See example below.

**NOTE**: I am using a new basic Drupal site with Olivero as the default theme. If your homepage does not display Article nodes in teaser view mode, you could create a simple Drupal view to list Article nodes in teaser view mode to follow along.


![Code inspector showing Drupal debugging](https://mariohernandez.io/images/storybook-debug.webp)

In the example above, we see a list of templates that start with **node...**\*. These are called template suggestions and are the names Drupal is suggesting we can assign our custom templates. The higher the template appears on the list, the more specific it is to the piece of content being rendered. For example, changes made to **_**node.html.twig**_** would affect ALL nodes throughout the site, whereas changes made to **node--1--teaser.html.twig** will only affect the first node created on the site but only when it's viewed in **teaser** view mode.

Notice I marked the template name Drupal is using to render the Article node. We know this is the template because it has an **X** before the template name.

In addition, I also marked the template path. As you can see the current template is located in **core/themes/olivero/templates/content/node--teaser.html.twig**.

And finally, I marked examples of attributes Drupal is injecting in the markup. These attributes may not always be useful but it is a good practice to ensure they are available even when we are writing custom markup for our components.

## Create a template suggestion

By looking at the path of the template in the code inspector, we can see that the original template being used is located inside the Olivero core theme. The debugging screenshot above shows a pretty extensive list of templates suggestions, and based on our requirements, copying the file **node--teaser.html.twig** makes sense since we are going to be working with a node in teaser view mode.

- Copy **/core/themes/olivero/templates/content/node--teaser.html.twig** into your theme's **/storybook/templates/content/**. Create the directory if it does not exist.
- Now rename the newly copied template to **node--article--teaser.html.twig**.
- Clear Drupal's cache since we are introducing a new Twig template.

As you can see, by renaming the template **node--article--teaser** (one of the names listed as a suggestion), we are indicating that any changes we make to this template will only affect nodes of type Article which are displayed in Teaser view mode. So whenever an Article node is displayed, if it is in teaser view mode, it will use the Card component to render it.

The template has a lot of information that may or may not be needed when integrating it with Storybook. If you recall, the Card component we built was made up of three parts: an image, a title, and teaser text. Each of those are Drupal fields and these are the only fields we care about when integrating. Whenever when I copy a template from Drupal core or a module into my theme, I like to keep the comments on the template untouched. This is helpful in case I need to reference any variables or elements of the template.

## The actual integration ...Finally

1. Delete everything from the newly copied template except the comments and the **classes** array variable
2. At the bottom of what is left in the template add the following code snippet:

```php
{% set render_content = content|render %}

{% set article_title = {
    'level': 2,
    'modifier': 'card__title',
    'text': label,
    'url': url,
  }
%}

{% include '@molecules/card/card.twig' with {
  'attributes': attributes.addClass(classes),
  'image': content.field_image,
  'title': article_title,
  'teaser': content.body,
} only %}
```

- We set a variable with `content|render` as its value. The only purpose for this variable is to make Drupal aware of the entire content array for caching purposes. [More info here](https://www.previousnext.com.au/blog/ensuring-drupal-8-block-cache-tags-bubble-up-page).
- Next, we setup a variable called **article\_title** which we structured the same way as data inside **card.yml**. Having similar data structures between Drupal and our components provides many advantages during the integration process.
  - Notice how for the **text** and **url** properties we are using Drupal specific variables ( **label** and **url**), accordingly. If you look in the comments in _node--article--teaser.html.twig_ you will see these two variables.
- We are using a Twig **include** statement with the **@molecules** namespace to nest the Card component into the node template. The same way we nested the Title component into the Card.
- We mapped Drupal's attributes into the component's attributes placeholder so Drupal can inject any attributes such as CSS classes, IDs, Data attributes, etc. into the component.
- Finally, we mapped the image, title and teaser fields from Drupal to the component's equivalent fields.
- Save the changes to the template and clear Drupal's cache.

## Enable the Storybook theme

Before we forget, let's enable the Storybook theme an also make it your default theme, otherwise all the work we are doing will not be visible since we are currently using Olivero as the default theme. Clear caches after this is done.

## Previewing the Article node as a Card

Integration is done and we switched our default theme to Storybook. After clearing caches if you reload the homepage you should be able to see the Article node you wrote but this time displayed as a card. See below:

![Example of twig debugging](https://mariohernandez.io/images/integrated-card.webp)

- If you right-click on the article and select **Inspect**, you will notice the following:
  - Drupal is now using **node--article--teaser.html.twig**. This is the template we created.
  - The template path is now **themes/custom/storybook/src/templates/content/**.
  - You will also notice that the article is using the custom markup we wrote for the Card component which is more semantic, accessible, but in addition to this, the **`<article>`** tag is also inheriting several other attributes that were provided by Drupal through its Attributes variable. See below:

![Drupal template suggestions in code inspector](https://mariohernandez.io/images/attr.webp)

If your card's image size or aspect ratio does not look as the one in Storybook, this is probably due to the image style being used in the Article Teaser view mode. You can address this by:

- Going to the **Manage display** tab of the Article's Teaser view mode ( `/admin/structure/types/manage/article/display/teaser`).
- Changing the image style for the Image field for one that may work better for your image.
- Preview the article again on the homepage to see if this looks better.

### Download the code

For a full copy of the codebase which includes the work in this and the [previous post](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/), clone or [download the repo](https://github.com/mariohernandez/storybook/tree/card) and switch to the **card** branch. The **main** branch only includes the previous post code.

## In closing

This is only a small example of how to build a simple component in Storybook using Twig and then integrate it with Drupal, so content is rendered in a more semantic and accessible manner. There are many more advantages of implementing a system like this. I hope this was helpful and see the potential of a component-driven environment using Storybook. Thanks for visiting.

Tags for this post

- [Storybook](https://mariohernandez.io/tag/storybook/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Components](https://mariohernandez.io/tag/components/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

- ![Rocks stack from big to small](https://mariohernandez.io/images/thumbs/rocks.webp)





  June 29, 2020



  As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.


 [See more posts](https://mariohernandez.io/blog)

## Automating Drupal Front-end
[Skip to content](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#main-content) [Vitejs](https://mariohernandez.io/tag/vitejs/)

![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/switch.webp)

[Photo by: Joshua Reddekopp](https://unsplash.com/@joshuaryanphoto)

Modern web development relies heavily on automation to stay productive, validate code, and perform repetitive tasks that could slow developers down. Front-end development in particular has evolved, and it can be a daunting task to configure effective automation. In this post, I'll try to walk you through basic automation for your Drupal theme, which uses Storybook as its design system.

Recently I worked on a large Drupal project that needed to migrate its design system from Patternlab to Storybook. I knew switching design systems also meant switching front-end build tools. The obvious choice seemed to be Webpack, but as I looked deeper into build tools, I discovered [ViteJS](https://vitejs.dev/).

Vite is considered the _Next Generation Frontend Tooling_, and when tested, we were extremely impressed not only with how fast Vite is, but also with its plugin's ecosystem and its community support. Vite is relatively new, but it is solid and very well maintained. [Learn more about Vite](https://vitejs.dev/guide/).

The topics covered in this post can be broken down in two categories:

1. Preparing the Front-end environment

   - [Build the front-end environment with Vite & Storybook](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#setup)
   - [Restructure the project](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#restructure)
   - [Configure TwigJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#configure-twigjs)
   - [Configure postCSS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#configure-postcss)
   - [Storybook's CSS configuration](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#global-css)
2. Automating the environment

   - [Copying static assets](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#copying)
   - [The Watch task](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#watch)
   - [Linting CSS and JavaScript](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#linting)

## 1\. Build the front-end environment with Vite & Storybook

In a [previous post](https://mariohernandez.io/blog/building-a-modern-drupal-theme-with-storybook), I wrote in detail how to build a front-end environment with Vite and Storybook, I am going to spare you those details here but you can reference them from the original post.

1. In your command line, navigate to the directory where you wish to build your environment. If you're building a new Drupal theme, navigate to your site's `web/themes/custom/`
2. Run the following commands (Storybook should launch at the end):

```shell
npm create vite@latest storybook
cd storybook
npx storybook@latest init --type react
```

Fig. 1: The first command builds the Vite project, and the last one integrates Storybook into it.

### Reviewing Vite's and Storybook's out of the box build scripts

Vite and Storybook ship with a handful of useful scripts. We may find some of them already do what we want or may only need minor tweaks to make them our own.

- In your code editor, open `package.json` from the root of your newly built project.
- Look in the **scripts** section and you should see something like this:

```shell
"scripts": {
  "dev": "vite",
  "build": "vite build",
  "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
  "preview": "vite preview",
  "storybook": "storybook dev -p 6006",
  "build-storybook": "storybook build"
},
```

Fig. 2: Example of default Vite and Storybook scripts out of the box.

To run any of those scripts, prefix them with `npm run`. For example: `npm run build`, `npm run lint`, etc. Let's review the scripts.

- **dev**: This is a Vite-specific command which runs the Vite app we just build for local development
- **build**: This is the "do it all" command. Running `npm run build` on a project runs every task defined in the build configuration we will do later. CI/CD runners run this command to build your app for production.
- **lint**: Will lint your JavaScript code inside `.js` or `.jsx` files.
- **preview**: This is also another Vite-specific command which runs your app in preview mode.
- **storybook**: This is the command you run to launch and keep Storybook running while you code.
- **build-storybook**: To build a static version of Storybook to package it or share it, or to run it as a static version of your project.

### Building your app for the first time

#### Getting a consistent environment

In front-end development, it is important everyone in your team use the same version of NodeJS while working in the same project. This ensures consistency in your project's behavior for everyone in your team. Differences in the node version your team uses can lead to inconsistencies when the project is built. One way to ensure your team is using the same node version when working in the same project, is by adding a **.nvmrc** file in the root of your project. This file specifies the node version your project uses. The node version is unique to each project, which means different projects can use different node versions.

- In the root of your theme, create a file called `.nvmrc` (mind the dot)
- Inside **.nvmrc** add the following: `v20.14.0`
- Stop Storybook by pressing **Ctrl + C** in your keyboard
- Build the app:

```bash
nvm install
npm install
npm run build
```

Fig. 3: Installs the node version defined in .nvmrc, then installs node packages, and finally builds the app.

**NOTE**: You need to have [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed in your system to execute nvm commands. You only need to run **nvm install** once per project unless the node version changes. If you switch to a project that uses a different node version, when you return to this project, run **nvm use** to set your environment back to the right node version.

The output in the command line should look like this:

![Output of build command](https://mariohernandez.io/images/blog-images/build.webp)

Fig. 4: Screenshot of files compiled by the build command.

By default, Vite names the compiled files by appending a random 8-character string to the original file name. This works fine for Vite apps, but for Drupal, the libraries we'll create expect for CSS and JS file names to stay consistent and not change. Let's change this default behavior.

- First, install the **glob** extension. We'll use this shortly to import multiple CSS files with a single import statement.

```shell
npm i -D glob
```

- Then, open `vite.config.js` in your code editor. This is Vite's main configuration file.
- Add these two imports around line 3 or directly after the last import in the file

```js
import path from 'path';
import { glob } from 'glob';
```

- Still in `vite.config.js`, replace the **export default...** with the following snippet which adds new settings for file names:

```js
export default defineConfig({
  plugins: [\
  ],
  build: {
    emptyOutDir: true,
    outDir: 'dist',
    rollupOptions: {
      input: glob.sync(path.resolve(__dirname,'./src/**/*.{css,js}')),
      output: {
        assetFileNames: 'css/[name].css',
        entryFileNames: 'js/[name].js',
      },
    },
  },
})
```

Fig. 5: Build object to modify where files are compiled as well as their name preferences.

- First we imported `path` and `{ glob }`. **path** is part of Vite and **glob** was added by the extension we installed earlier.
- Then we added a **build** configuration object in which we defined several settings:
  - **emptyOutDir**: When the build job runs, the **dist** directory will be emptied before the new compiled code is added.
  - **outDir**: Defines the App's output directory.
  - **rollupOptions**: This is Vite's system for bundling code and within it we can include neat configurations:
    - **input**: The directory where we want Vite to look for CSS and JS files. Here's where the **path** and **glob** imports we added earlier are being used. By using `src/**/**/*.{css,js}`, we are instructing Vite to look three levels deep into the **src** directory and find any file that ends with **.css** or **.js**.
    - **output**: The destination for where CSS and JS will be compiled into ( **dist/css** and **dist/js**), respectively. And by setting `assetFileNames: 'css/[name].css'`, and `entryFileNames: 'css/[name].js'`, CSS and JS files will retain their original names.

Now if we run `npm run build` again, the output should be like this:

![Second output of build command](https://mariohernandez.io/images/blog-images/build-after.webp)

Fig. 6: Screenshot of compiled code using the original file names.

The random 8-character string is gone and notice that this time the build command is pulling more CSS files. Since we configured the input to go three levels deep, the **src/stories** directory was included as part of the input path.

## 2\. Restructure the project

The out of the box Vite project structure is a good start for us. However, we need to make some adjustments so we can adopt the Atomic Design methodology. This is today's standards and will work well with our [Component-driven Development](https://drewl.com/blog/what-is-component-driven-development/) workflow. At a high level, this is the current project structure:

```md
> .storybook/
> dist/
> public/
> src/
  |- stories/
package.json
vite.config.js
```

Fig. 7: Basic structure of a Vite project listing only the most important parts.

- **\> .storybook** is the main location for Storybook's configuration.
- **\> dist** is where all compiled code is copied into and where the production app looks for all code.
- **\> public** is where we can store images and other static assets we need to reference from our site. Equivalent to Drupal's `/sites/default/files/`.
- **\> src** is the directory we work out of. We will update the structure of this directory next.
- **package.json** tracks all the different node packages we install for our app as well as the scripts we can run in our app.
- **vite.config.js** is Vite's main configuration file. This is probably where we will spend most of our time.

### Adopting the Atomic Design methodology

The [Atomic Design](https://bradfrost.com/blog/post/atomic-web-design/) methodology was first introduced by Brad Frost a little over ten years ago. Since then it has become the standard for building web projects. Our environment needs updating to reflect the structure expected by this methodology.

- First stop Storybook from running by pressing **Ctrl + C** in your keyboard.
- Next, inside **src**, create these directories: **base**, **components**, and **utilities**.
- Inside **components**, create these directories: **01-atoms**, **02-molecules**, **03-organisms**, **04-layouts**, and **05-pages**.
- While we're at it, delete the **stories** directory inside **src**, since we won't be using it.

**NOTE**: You don't need to use the same nomenclature as what Atomic Design suggests. I am using it here for simplicity.

### Update Storybook's stories with new paths

Since the project structure has changed, we need to make Storybook aware of these changes:

- Open **.storybook/main.js** in your code editor
- Update the **stories: \[\]** array as follows:

```js
stories: [\
  "../src/components/**/*.mdx",\
  "../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)",\
],
```

Fig. 8: Updating stories' path after project restructure.

The Stories array above is where we tell Storybook where to find our stories and stories docs, if any. In Storybook, stories are the components and their variations.

### Add pre-built components

As our environment grows, we will add components inside the new directories, but for the purpose of testing our environment's automation, I have created demo components.

- Download [demo components](https://github.com/mariohernandez/storybook/tree/variations) (button, title, card), from **src/components/**, and save them all in their content part directories in your project.
- Feel free to add any other components you may have built yourself. We'll come back to the components shortly.

## 3\. Configure TwigJS

Before we can see the newly added components, we need to configure Storybook to understands the Twig and YML code we are about to introduce within the demo components. To do this we need to install several node packages.

- In your command line run:

```shell
npm i -D vite-plugin-twig-drupal @modyfi/vite-plugin-yaml twig twig-drupal-filters html-react-parser
```

- Next, update `vite.config.js` with the following configuration. Add the snippet below at around line 5:

```js
import twig from 'vite-plugin-twig-drupal';
import yml from '@modyfi/vite-plugin-yaml';
import { join } from 'node:path';
```

Fig. 9: TwigJS related packages and Drupal filters function.

The configuration above is critical for Storybook to understand the code in our components:

- `vite-plugin-twig-drupal`, is the main TwigJS extension for our project.
- Added two new `import` s which are used by Storybook to understand Twig:
  - `vite-plugin-twig-drupal` handles transforming Twig files into JavaScript functions.
  - `@modyfi/vite-plugin-yaml` let's us pass data and variables through **YML** to our Twig components.

### Creating Twig namespaces

- Still in `vite.config.js`, add the **twig** and **yml()** plugins to add Twig namespaces for Storybook.

```js
  plugins: [\
    twig({\
      namespaces: {\
        atoms: join(__dirname, './src/components/01-atoms'),\
        molecules: join(__dirname, './src/components/02-molecules'),\
        organisms: join(__dirname, './src/components/03-organisms'),\
        layouts: join(__dirname, './src/components/04-layouts'),\
        pages: join(__dirname, './src/components/05-pages'),\
      },\
    }),\
    yml(),\
  ],
```

Fig. 10: Twig namespaces reflecting project restructure.

Since we removed the `react()` function by using the snippet above, we can remove **import react from '@vitejs/plugin-react'** from the imports list as is no longer needed.

With all the configuration updates we just made, we need to rebuild the project for all the changes to take effect. Run the following commands:

```shell
npm run build
npm run storybook
```

The components are available but as you can see, they are not styled even though each component contains a CSS stylesheet in its directory. The reason is Storybook has not been configured to find the component's CSS. We'll address this shortly.

## 4\. Configure postCSS

What is PostCSS? It is a JavaScript tool or transpiler that turns a special PostCSS plugin syntax into Vanilla CSS.

As we start interacting with CSS, we need to install several node packages to enable functionality we would not have otherwise. Native CSS has come a long way to the point that I no longer use Sass as a CSS preprocessor.

- Stop Storybook by pressing **Ctrl + C** in your keyboard
- In your command line run this command:

```shell
npm i -D postcss postcss-import postcss-import-ext-glob postcss-nested postcss-preset-env
```

- At the root of your theme, create a new file called **postcss.config.js**, and in it, add the following:

```js
import postcssImport from 'postcss-import';
import postcssImportExtGlob from 'postcss-import-ext-glob';
import postcssNested from 'postcss-nested';
import postcssPresetEnv from 'postcss-preset-env';

export default {
  plugins: [\
    postcssImportExtGlob(),\
    postcssImport(),\
    postcssNested(),\
    postcssPresetEnv({\
      stage: 4,\
    }),\
  ],
};
```

Fig. 11: Base configuration for postCSS.

One cool thing about Vite is that it comes with postCSS functionality built in. The only requirement is that you have a `postcss.config.js` file in the project's root. Notice how we are not doing much configuration for those plugins except for defining them. Let's review the code above:

- `postcss-import` the base for importing CSS stylesheets.
- `postcss-import-ext-glob` to do bulk `@import` of all CSS content in a directory.
- `postcss-nested` to unwrap nested rules to make its syntax closer to Sass.
- `postcss-preset-env` defines the CSS browser support level we need. [Stage 4](https://cssdb.org/#the-staging-process) means we want the "web standards" level of support.

## 5\. CSS and JavaScript configuration

The goal here is to ensure that every time a new CSS stylesheet or JS file is added to the project, Storybook will automatically be aware and begin consuming their code.

**NOTE**: This workflow is only for Storybook. In Drupal we will use [Drupal libraries](https://www.drupal.org/docs/develop/theming-drupal/adding-assets-css-js-to-a-drupal-theme-via-librariesyml) in which we will include any CSS and JS required for each component.

There are two types of styles to be configured in most project, global styles which apply site-wide, and components styles which are unique to each component added to the project.

### Global styles

- Inside **src/base**, add two stylesheets: `reset.css` and `base.css`.
- Copy and paste the styles for [reset.css](https://github.com/mariohernandez/storybook/blob/variations/src/css/reset.css) and [base.css](https://github.com/mariohernandez/storybook/blob/variations/src/css/base.css).
- Inside **src/utilities** create `utilities.css` and in it paste [these styles](https://github.com/mariohernandez/storybook/blob/variations/src/css/utilities.css).
- Inside **src/**, create a new stylesheet called `styles.css`.
- Inside **styles.css**, add the following imports:

```css
@import './base/reset.css';
@import './base/base.css';
@import './utilities/utilities.css';
```

Fig. 12: Imports to gather all global styles.

The order in which we have imported our stylesheets is important as the cascading order in which they load makes a difference. We start from `reset` to `base`, to `utilities`.

- `reset.css`: A reset stylesheet (or CSS reset) is a collection of CSS rules used to clear the browser's default formatting of HTML elements, removing potential inconsistencies between different browsers before any of our styles are applied.
- `base.css`: CSS Base applies a style foundation for HTML elements that is consistent for baseline styles such as typography, branding and colors, font-sizes, etc.
- `utilities.css`: Are a collection of pre-defined CSS rules we can apply to any HTML element. Rules such as variables for colors, font size, font color, as well as margin, sizes, z-index, animations, etc.

### Component styles

Before our components can be styled with their unique and individual styles, we need to make sure all our global styles are loaded so the components can inherit all the base/global styles.

- Inside **src/components** create a new stylesheet, `components.css`. This is where we are going to gather all components styles.
- Inside `components.css` add glob imports for each of the component's categories:

```css
@import-glob './01-atoms/**/*.css';
@import-glob './02-molecules/**/*.css';
```

Fig. 13: Glob import for all components of all categories.

**NOTE**: Since we only have Atoms and Molecules to work with, we are omitting imports for 03-organisms, 04-layouts, 05-pages. Feel free to add them if you have that kind of components.

### Updating Storybook's Preview

There are several ways in which we can make Storybook aware of our styles and javascript. We could import each component's stylesheet and javascript into each \* **.stories.js** file, but this could result in some components with multiple sub-components having several CSS and JS imports. In addition, this is not an automated system which means we need to manually do imports as they become available. The approach we are going to take is importing the stylesheets we created above into Storybook's preview system. This provides a couple of advantages:

- The component's \*.stories.js files are clean without any css imports as all CSS will already be available to Storybook.
- As we add new components with individual stylesheets, these stylesheets will automatically be recognized by Storybook.

Remember, the order in which we import the styles makes a difference. We want all global and base styles to be imported first, before we import component styles.

- In `.storybook/preview.js` add these imports at the top of the page around line 2.

```js
import Twig from 'twig';
import drupalFilters from 'twig-drupal-filters';
import '../src/styles.css'; /* Contains reset, base, and utilities styles. */
import '../src/components/components.css'; /* Contains all components CSS. */

function setupFilters(twig) {
  twig.cache();
  drupalFilters(twig);
  return twig;
}

setupFilters(Twig);
```

Fig. 14: Importing all styles, global and components.

In addition to importing two new extensions: **twig** and **twig-drupal-filters**, we setup a **setupFilters** function for Storybook to read Drupal filters we may use in our components. We are also importing two of the stylesheets we created earlier:

- `styles.css` contains all the CSS code from reset.css, base.css, and utilities.css (in that order)
- `components.css` contains all the CSS from all components. As new components are added and they have their own stylesheets, they will automatically be included in this import.

**IMPORTANT**: For Storybook to immediately display changes you make in your CSS, the imports above need to be from the **src** directory and not **dist**. I learned this the hard way.

### JavaScript compiling

On a typical project, you will find that the majority of your components don't use JavaScript, and for this reason, we don't need such an elaborate system for JS code. Importing the JS files in the component's \* **.stories.js** should work just fine. Since the demo components dont use JS, I have commented near the top of **card.stories.js** how the component's JS file would be imported if JS was needed.

If the need for a more automated JavaScript processing workflow arose, we could easily repeat the same CSS workflow but for JS.

### Build the project again

Now that our system for CSS and JS is in place, let's build the project to ensure everything is working as we expect it.

```shell
npm run build
npm run storybook
```

You may notice that now the components in Storybook look styled. This tells us our new system is working as expected. However, the Card component, if you used the demo components, is missing an image. We will address this issue in the next section.

This concludes the preparation part of this post. The remaining part will focus on creating automation tasks for compiling, minifying and linting code, copying static assets such as images, and finally, watching for code changes as we code.

## 6\. Copying images and other assets

Copying static assets like images, icons, JS, and other files from `src` into `dist` is a common practice in front-end projects. Vite comes with built-in functionality to do this. Your assets need to be placed in the **public** directory and Vite will automatically copy them on build. However, sometimes we may have those assets alongside our components or other directories within our project.

In Vite, there are many ways to accomplish any task, in this case, we will be using a nice plugin called `vite-plugin-static-copy`. Let's set it up.

- If Storybook is running, kill it with **Ctrl + C** in your keyboard
- Next, install the extension by running:

```shell
npm i -D vite-plugin-static-copy
```

- Next, right after all the existing imports in `vite.config.js`, import one more extension:

```js
import { viteStaticCopy } from 'vite-plugin-static-copy';
```

- Lastly, still in `vite.config.js`, add the `viteStaticCopy` function configuration inside the `plugins:[]` array:

```js
viteStaticCopy({
  targets: [\
  {\
    src: './src/components/**/*.{png,jpg,jpeg,svg,webp,mp4}',\
    dest: 'images',\
  }],
}),
```

Fig. 15: Adds tasks for copying JavaScript and Images from src to dist.

The `viteStaticCopy` function we added allows us to copy any type of static assets anywhere within your project. We added a target array in which we included **src** and **dest** for the images we want copied. Every time we run **npm run build**, any images inside any of the components, will be copied into **dist/images**.

If you need to copy other static assets, simply create new targets for each.

- Build the project again:

```shell
npm run build
npm run storybook
```

The missing image for the Card component should now be visible, see below. Pretty sweet! 🍰

![Card component in Storybook](https://mariohernandez.io/images/blog-images/storybook.webp)

Fig. 16: Screenshot of the Card component in Storybook.

## 7\. The Watch task

A watch task makes it possible for developers to see the changes they are making as they code, and without being interrupted by running commands. Depending on your configuration, a watch task watches for any changes you make to CSS, JavaScript and other file types, and upon saving those changes, code is automatically compiled, and a Hard Module Reload (HMR) is evoked, making the changes visible in Storybook.

Although there are extensions to create watch tasks, we will stick with Storybook's out of the box watch functionality because it does everything we need. In fact, I have used this very approach on a project that supports over one hundred sites.

I actually learned this the hard way, I originally was importing the key stylesheets in **.storybook/preview.js** using the files from **dist**. This works to an extend because the code is compiled upon changes, but Storybook is not aware of the changes unless we restart Storybook. I spent hours debugging this issue and tried so many other options, but at the end, the simple solution was to import CSS and JS into Storybook's preview using the source files. For example, if you look in **.storybook/preview.js**, you will see we are importing two CSS files which contain all of the CSS code our project needs:

```js
import '../src/styles.css';
import '../src/components/components.css';
```

Fig. 17: Importing source assets into Storybook's preview.

Importing source CSS or JS files into Storybook's preview allows Storybook to become aware immediately of any code changes.

The same, or kind of the same works for JavaScript. However, the difference is that for JS, we import the JS file in the component's \* **.stories.js**, which in turn has the same effect as what we've done above for CSS. The reason for this is that typically not every component we build needs JS.

### A real watch task

Currently we are running `npm run storybook` as a watch task. Nothing wrong with this. However, to keep up with standards and best practices, we could rename the **storybook** command, **watch**, so we can run `npm run watch`. Something to consider.

You could also make a copy of the **storybook** command and name it **watch** and add additional commands you wish to run with **watch**, while leaving the original **storybook** command intact. Choices, choices.

## 8\. Linting CSS and JavaScript

Our workflow is coming along nicely. There are many other things we can do but for now, we will end with one last task: **CSS and JS linting**.

- Install the required packages. There are several of them.

```shell
npm i -D eslint stylelint vite-plugin-checker stylelint-config-standard stylelint-order stylelint-selector-pseudo-class-lvhfa
```

- Next, after the last import in `vite.config.js`, add one more:

```js
import checker from 'vite-plugin-checker';
```

- Then, let's add one more plugin in the `plugins:[]` array:

```js
checker({
  eslint: {
    lintCommand: 'eslint "./src/components/**/*.{js,jsx}"',
  },
  stylelint: {
    lintCommand: 'stylelint "./src/components/**/*.css"',
  },
}),
```

Fig. 18: Checks for linting CSS and JavaScript.

So we can execute the above checks on demand, we can add them as commands to our app.

- In **package.json**, within the **scripts** section, add the following commands:

```json
"eslint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
"stylelint": "stylelint './src/components/**/*.css'",
```

Fig. 19: Two new npm commands to lint CSS and JavaScript.

- We installed a series of packages related to ESLint and Stylelint.
- `vite-plugin-checker` is a plugin that can run TypeScript, VLS, vue-tsc, ESLint, and Stylelint in worker thread.
- We imported `vite-plugin-checker` and created a new plugin with two checks, one for ESLint and the other for Stylelint.
- By default, the new checks will run when we execute `npm run build`, but we also added them as individual commands so we can run them on demand.

### Configure rules for ESLint and Stylelint

Both ESLint and Stylelint use configuration files where we can configure the various rules we want to enforce when writing code. The files they use are `eslint.config.js` and `.stylelintrc.yml` respectively. For the purpose of this post, we are only going to add the **.stylelintrc.yml** in which we have defined basic CSS linting rules.

- In the root of your theme, create a new file called **.stylelintrc.yml** (mind the dot)
- Inside **.stylelintrc.yml**, add the following code:

```yml
extends:
  - stylelint-config-standard
plugins:
  - stylelint-order
  - stylelint-selector-pseudo-class-lvhfa
ignoreFiles:
  - './dist/**'
rules:
  at-rule-no-unknown: null
  alpha-value-notation: number
  color-function-notation: null
  declaration-empty-line-before: never
  declaration-block-no-redundant-longhand-properties: null
  hue-degree-notation: number
  import-notation: string
  no-descending-specificity: null
  no-duplicate-selectors: true
  order/order:
    - - type: at-rule
        hasBlock: false
      - custom-properties
      - declarations
    - unspecified: ignore
      disableFix: true
  order/properties-alphabetical-order: error
  plugin/selector-pseudo-class-lvhfa: true
  property-no-vendor-prefix: null
  selector-class-pattern: null
  value-keyword-case:
    - lower
    - camelCaseSvgKeywords: true
      ignoreProperties:
        - /^--font/
```

Fig. 20: Basic CSS Stylelint rules.

The CSS rules above are only a starting point, but should be able to check for the most common CSS errors.

Test the rules we've defined by running either `npm run build` or `npm run stylelint`. Either command will alert you of a couple of errors our current code contains. This tells us the linting process is working as expected. You could test JS linting by creating a dummy JS file inside a component and writing bad JS in it.

## 9\. One last thing

It goes without saying that we need to add **storybook.info.yml** and **storybook.libraries.yml** files for this to be a true Drupal theme. In addition, we need to create the **templates** directory somewhere within our theme.

### storybook.info.yml

The same way we did for Storybook, we need to create namespaces for Drupal. This requires the [Components](https://www.drupal.org/project/components) module and **storybook.info.yml** configuration is like this:

```yml
components:
 namespaces:
    atoms:
      - src/components/01-atoms
    molecules:
      - src/components/02-molecules
    organisms:
      - src/components/03-organisms
    layouts:
      - src/components/04-layouts
    pages:
      - src/components/05-pages
    templates:
      - src/templates
```

Fig. 21: Drupal namespaces for nesting components.

### storybook.libraries.yml

The recommended method for adding CSS and JS to components or a theme in Drupal is by using [Drupal libraries](https://www.drupal.org/docs/develop/creating-modules/adding-assets-css-js-to-a-drupal-module-via-librariesyml). In our project we would create a library for each component in which we will include any CSS or JS the component needs. In addition, we need to create a **global** library which includes all the global and utilities styles. Here are examples of libraries we can add in **storybook.libraries.yml**.

```yml
global:
  version: VERSION
  css:
    base:
      dist/css/reset.css: {}
      dist/css/base.css: {}
      dist/css/utilities.css: {}

button:
  css:
    component:
      dist/css/button.css: {}

card:
  css:
    component:
      dist/css/card.css: {}

title:
  css:
    component:
      dist/css/title.css: {}
```

Fig. 22: Drupal libraries for global styles and component's styles.

#### /templates

Drupal's templates' directory can be created anywhere within the theme. I typically like to create it inside the **src** directory. Go ahead and create it now.

- Inside **storybook.info.yml**, add a new Twig namespace for the **templates** directory. See example above. Update your path accordingly based on where you created your **templates** directory.

**P.S**: When the Vite project was originally created at the begining of the post, Vite created files such as **App.css**, **App.js**, **main.js**, and **index.html**. All these files are in the root of the project and can be deleted. It won't affect any of the work we've done, but Vite will no longer run on its own, which we don't need it to anyway.

## In closing

I realize this is a very long post, but there is really no way around it when covering these many topics in a single post. I hope you found the content useful and can apply it to your next Drupal project. There are different ways to do what I've covered in this post, and I challenge you to find better and more efficient ways. For now, thanks for visiting.

#### Download the theme

A full version of the Drupal theme built with this post can be downloaded.

[Download the theme](https://github.com/mariohernandez/storybook/tree/theme)

Make sure you are using the **theme** branch from the repo.

Tags for this post

- [Vitejs](https://mariohernandez.io/tag/vitejs/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Storybook](https://mariohernandez.io/tag/storybook/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# [2 Comments](https://github.com/mariohernandez/mariohernandezio/issues/135) _\- powered by_ _[utteranc.es](https://utteranc.es/)_

[![@denis-bertrand-be](https://avatars.githubusercontent.com/u/145397434?v=4?v=3&s=88)](https://github.com/denis-bertrand-be)

Very interesting article, thank you for this huge work.

I would like to see/know how to handle a more complex javascript setup, with some global behaviour and with components that use external JS libs... :-)

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Fautomating-your-drupal-front-end-with-vitejs%2F) to add your reaction.

[![@mariohernandez](https://avatars.githubusercontent.com/u/1289805?v=4?v=3&s=88)](https://github.com/mariohernandez)

Thanks for the feedback [@denis-bertrand-be](https://github.com/denis-bertrand-be). As you can imagine, there are several ways to accomplish what you are asking about. One way I usually do this is by downloading third party libraries locally and then reference them from the target components. I typically create Drupal libraries for the third party libraries to be able to use them within Drupal.

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Fautomating-your-drupal-front-end-with-vitejs%2F) to add your reaction.

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.


 [See more posts](https://mariohernandez.io/blog)

## Component Variations in Storybook
[Skip to content](https://mariohernandez.io/blog/components-variations-in-storybook/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Colourful cacti in a row against a white background](https://mariohernandez.io/images/variations-featured.webp)

[Photo by: Scott Webb](https://unsplash.com/@scottwebb)

One great way to extend your catalog of components is by creating components variations. Variations, in the context of component-driven development, refers to displaying your content in different ways. Variations of a component reduce the need of building new components as well as duplicate code.

In Storybook, variations are known as Stories. In this post I will be using variations and stories interchangeably.

**NOTE**: Although this tutorial might work in a non-Drupal environment, this post is a follow up to previous tutorials that are Drupal-specific. The syntax and plugins used in this tutorial are for a Drupal and Twig environment.

The image below shows how different card stories or variations, can display the same content in many ways.

![Card with multiple variations](https://mariohernandez.io/images/variations.webp)

Fig. 1: Example of multiple variations of a Card component.

## Principles of building components

Sometimes when building a new component, we can't anticipage how the website will evolve with time and therefore we build components the best way possible at the time of building them. As time goes by and requirements change, we realize that we could have done things differently had we known about the requirements changes. Variations of a component give you a chance to alter how something was built without having to change your entire environment of content architecture.

Some time ago I wrote about [principles for building components](https://mariohernandez.io/blog/five-principles-for-building-better-components/). Rather than repeating myself, take a quick look at the article and comeback when you are done. You will find those principles not only apply to building new components, but also to building variations of components.

## Building component variations in Storybook

In Storybook, all variations of a component are referred to as "Stories", hence the name Storybook. A story captures the rendered state of a UI component. Developers write multiple stories per component that describe all the “interesting” states/variations a component can support. Here's a visual that describes the official naming and hierarchy Storybook uses.

![Example of Storybook's sidebar and its elements](https://mariohernandez.io/images/storybook-sidebar.png)

Fig. 2: Storybook's official naming convention and hierarchy.

## The Card component

First off, I am going with the assumption that you already know how Storybook stories are created and that you have a Storybook instance running. If that's not the case, [follow these instructions](https://mariohernandez.io/blog/migrating-from-patternlab-to-storybook/) to get your Storybook environment up and running. You will need [NodeJS 20+](https://nodejs.org/en/download/prebuilt-installer) and [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed on your system to follow along.

Next, let's look at the Card variations we will be creating in this post.

![Example of component variations](https://mariohernandez.io/images/stories.webp)

Fig. 3: Example of the different card variations we will build in this post.

The image above shows the Card stories or variations we will build. From top-left to right:

- Default or Stacked
- Light CTA
- Small
- No image
- Horizontal

In the interest of time, I have a repo that already includes the base of the Card component so you can focus only on building the variations.

1. [Clone the repo](https://github.com/mariohernandez/storybook/tree/variations) which already contains a project to work with and the Card component.

If you already have a working Storybook environment, copy the **components** directory ( `src/components`), from the newly cloned repo, into your project.

2. Switch to the **variations** branch by running `git checkout variations`

3. Run the project as instructed in the **README** in the repo


### Methods for creating stories

In this tutorial, we will use two methods for creating variations in Storybook:

1. Doing all the work directly in `card.stories.jsx` to change fields values or hide/show fields, depending on the story requirements.
2. Using additional `*.yml` files to assist with the same fields updates above.

We will be using the first method above for all stories except the Card horizontal. The original Card component was built with Twig, but for the variations we will be working exclusively in `card.stories.jsx`. The current version of the card story looks like this:

```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
  render: (args) => parse(card(args)),
};

export const Card = {
  name: 'Card stacked',
  args: { ...data },
};

export default component;
```

Let me explain the snippet above as this is the foundation for all the variations we will be creating.

- First we do a series of imports to collect all the pieces needed to build components and stories:

  - **import parse**: This is a react plugin which allows us to parse the HTML in our stories into React code Storybook can understand.
  - **import card**: It imports all the code and logic inside our component's twig template.
  - **import data**: Pulls in all the data from the component's **.yml** file so we can use it as React args.
  - **import './card.css'**: Imports all CSS styles so Storybook can displayed the styled components and stories. Inside card.css, we already have styles for each of the stories we will be building.
- Next, we set a new configuration object called **component**, which will serve as the default instance of the card component. This is an arbitrary name and can be anything that makes sense to you.

Inside the _component_ object we have two properties: **title** and **render**.

  - The **title** property's value determines the location and name of the component within Storybook's hierarchy. In this example the Card component will be located under the **Molecules** folder. See Fig.2 above for details about the hierarchy.
  - The **render** property is what handles the rendering of the component by using the **card** and **data** objects we imported earlier, and combined together (Twig and YML), they render the full component.
- Next, we create our first story by defining a new configuration object called **Card**, in which we pass a name (Card stacked), for the story and the data variable as args.

- Finally, we export the _component_ object as default, which is a React requirement.


If Storybook is running, you should see the new variation which will display the Card stacked. If you need to run Storybook for the first time, in your command line navigate to the storybook directory and run these commands:

**IMPORTANT:** You need [NodeJS 20+](https://nodejs.org/en/download/prebuilt-installer) and [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed in your system.

```bash
nvm install
npm install
npm run build
npm run storybook
```

If all goes well, Storybook should be running showing the Card stacked story under the Molecules folder.

### Preview of Card stacked

![Card with an image, teaser and CTA](https://mariohernandez.io/images/blog-images/card.webp)

Fig. 4: Example of the Card stacked from which other variations will originate.

## Card with light CTA

- Inside `card.stories.jsx`, and directly after the closing of the **Card** object (around line 17), add the following object to create a new story:

```js
export const CardLightCta = {
  ...Card,
  name: 'Card light CTA',
  args: {
    ...data,
    cta: {
      modifier: 'button--light',
      text: 'Try it now',
      url: 'https://mariohernandez.io',
    }
  },
};
```

Let's go over the snippet above:

- We start by creating and exporting a new object called **CardLightCta**. This is a new story. This name is arbitrary but it should be unique for each story.
- Next, we pass the default Card story ( `...Card`), as a spread operator, so the new story inherits all attributes from the original card.
- The **name** property allows for each story to have a unique name which will appear directly under the component name in Storybook's sidebar (see Fig. 2 at the top for details).
- Finally, we open the **args** object where we will update some of the fields to achieve the desired variation:
  - We pass the `...data` object as a spread operator to individually update the fields that need updating.
  - Since the only difference between this variation and the original card is that the CTA is light, we need to define the `cta` object and provide each of its properties with the appropriate values:
    - First as a modifier class we pass `button--light`. This is a predefined modifier class which will turn the CTA white.
    - Next, we type the text that will become the CTA's label, **Try it now**.
    - And finally, we pass a URL to the CTA.

### Preview of Card with light CTA

![Card component with light CTA](https://mariohernandez.io/images/blog-images/card-light.webp)

Fig. 5: Example of a Card component with a light CTA.

## Card small

This next story or variation is the small version of the card. The difference between this card and the original one is that this one has no CTA, and its size is ...well, small 🙂

Same as before, add the following snippet to `card.stories.jsx` directly after the closing of the card with light CTA story:

```js
export const CardSmall = {
  ...Card,
  name: 'Card small',
  args: {
    ...data,
    modifier: 'card--small',
    cta: '',
  },
};
```

This story is very similar to the previous one from the updates needed point of view. As you can see, the only thing we are doing is passing `card--small` as a modifier class to the entire component, and since we don't need a button or CTA, we are defining the `cta` object but its value is empty which will suppress it from printing on the page. If you notice in `card.twig`, we use a conditional that checks if the `cta` object exists, otherwise don't print any of the markup starting with the `footer` tag.

### Preview of small card

![Card component in small format](https://mariohernandez.io/images/blog-images/card-small.webp)

Fig. 6: Example of a small card.

## Card with no image

- You know the drill, inside `card.stories.jsx`, directly after the closing of the previous story, add the following snippet:

```js
export const CardNoImage = {
  ...Card,
  name: 'Card no image',
  args: {
    ...data,
    modifier: 'card--no-image',
    image: '',
  },
};
```

Even more similar to the previous story, this variation only varies from the original story as follows:

- We are passing a modifier class to the component, `card--no-image`.
- Since we want no image, we define the `image` object but leave its value empty.

### Preview of card without image

![Card component without image](https://mariohernandez.io/images/blog-images/card-no-image.webp)

Fig. 6: Example of a card without image.

## Card horizontal

The final variation is the Card horizontal. For all previous variations we have done all the changes inside `card.stories.jsx`, but for this one, we will resource to using an alternative `*.yml` file. Why you may ask, well, this variation requires a bit more changes and making all those changes inside the stories.jsx file may look a little too busy and not as easy to read the code. That's pretty much the only reason for me to use this method, to keep the code in my stories clean and more readable.

You may have noticed in the project you cloned; inside the **card** directory we have a file called **card-horizontal.yml**. This file is almost identical to the original **card.yml** as far as the fields in it. The only difference is that some of the fields have unique content or no content at all. Let's look at the file before starting.

```yml
---
modifier: 'card--horizontal'
image: <img src="/card-square.jpg" alt="Palm trees near city buildings" />
title:
  level: 2
  modifier: 'card__title'
  text: 'Step outside to the outdoors'
  url: 'https://mariohernandez.io'
teaser: 'With spring in full bloom, the weather could not be better to take a walk outside and enjoy the beauty of nature.'
cta: ''
```

- The **modifier** field has a specific CSS class we will pass: `card--horizontal`. This class will allow us to change the layout of the card to be in horizontal direction.
- The **image** field uses a different image altogether. The image has been cropped in square aspect ratio for better fitting of this variation.
- Finally, the **cta** field is empty, meaning we don't want to print a button on this variation.

Maybe I exaggerated when I said that this variation has too many changes, but my point is that in cases when your stories do require a lot of changes, using a different **yml** file may help you keep your stories.jsx file a lot neater and cleaner.

- The first step is one we haven't done before. Inside `card.stories.jsx` somewhere around line 5 (after the last import in the file), add the following import:

```js
import dataHorizontal from './card-horizontal.yml';
```

- Next, the way we've done before, inside `card.stories.jsx` add the following object directly after the closing of the last story:

```js
export const CardHorizontal = {
  ...Card,
  name: 'Card horizontal',
  args: {
    ...dataHorizontal,
  },
};
```

- First we imported a new data file called `card-horizontal.yml` and assigned the object name of `dataHorizontal`. By doing this, any changes we make inside **card-horizontal.yml** will be reflected in Storybook.
- Lastly, we repeat the same process as the previous variations but this time, inside the **args** object, we pass the new object we created in the previous step ( `...dataHorizontal`), rather than `...data`.
- That's it. Our story file is nice and clean. Since we handled all the fields updates in `card-horizontal.yml`, the `.jsx` file is simply consuming its data to achieve the desired variations.

### Preview of horizontal card

![Card component in horizontal mode](https://mariohernandez.io/images/blog-images/card-horizontal.webp)

Fig. 6: Example of a card in horizontal layout.

Now that we have covered both methods for creating variations, know that neither method is better than the other. The decision to use one over the other boils down to personal preferences and sometimes which makes the most sense to simplify the process.

## End result

At the end of this process, your `card.stories.jsx` should look like this:

```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import dataHorizontal from './card-horizontal.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
  render: (args) => parse(card(args)),
};

export const Card = {
  name: 'Card stacked',
  args: { ...data },
};

export const CardLightCta = {
  ...Card,
  name: 'Card light CTA',
  args: {
    ...data,
    cta: {
      modifier: 'button--light',
      text: 'Try it now',
      url: 'https://mariohernandez.io',
    }
  },
};

export const CardSmall = {
  ...Card,
  name: 'Card small',
  args: {
    ...data,
    modifier: 'card--small',
    cta: '',
  },
};

export const CardNoImage = {
  ...Card,
  name: 'Card no image',
  args: {
    ...data,
    modifier: 'card--no-image',
    image: '',
  },
};

export const CardHorizontal = {
  ...Card,
  name: 'Card horizontal',
  args: {
    ...dataHorizontal,
  },
};

export default component;
```

## In closing

This only touches the surface of creating stories, but it is refreshing to know that no matter how complex your components may be, when it comes to having Storybook parse them, the React code in your stories is very minimum. Certainly, there are exceptions, but as I complete the migration of our large Drupal project with many components, some of which are pretty large and complex, we still were surprised how little React code was required of us to write because all the heavy lifting is being done by Storybook, with its contrib extensions, as well as Twig itself.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Variations](https://mariohernandez.io/tag/variations/)
- [Storybook](https://mariohernandez.io/tag/storybook/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- ![Developers looking at computer screen](https://mariohernandez.io/images/thumbs/training-workshop.webp)





  May 20, 2018



  For the past couple of years I have been running private and community driven training workshops and I'd like to share my experiences and lessons learned.

- ![Person taking a picture with their phone](https://mariohernandez.io/images/thumbs/crop-thumb.webp)





  August 18, 2024



  Cropping images in Drupal is a great way to ensure your images always look their best.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Image Cropping Fix
[Skip to content](https://mariohernandez.io/blog/solved-cannot-crop-based-on-original-image-after-initial-crop-has-been-set/#main-content) [Drupal](https://mariohernandez.io/tag/drupal/)

![Person taking a picture with their phone](https://mariohernandez.io/images/crop.webp)

[Photo by: Kipras Štreimikis](https://unsplash.com/@kkipras)

If you have read my posts about responsive images you will know I have done quite a bit of work with Drupal media and in particular, images. However, I recently ran into an issue I had not experienced before and it was quite challenging to comprehend. The issue was related to image cropping.

In our Drupal platform we allow content editors to manually crop images using a hand-full of crop types for various aspect ratios such as 1:1, 3:4, 4:3, 16:9, etc. To achieve the manual crop we use the [Crop API](https://www.drupal.org/project/crop) and [Image Widget Crop](https://www.drupal.org/project/image_widget_crop) Drupal modules.

The issue we started noticing is that no matter the image we were using, all cropping settings were limited to a predefined aspect ratio of 1:1 or square, rather than the original image's aspect ratio. This was causing big problems for us because editors were not able to properly crop images and as a result images were rendered with odd cropping settings.

After some research, I found an issue that had been reported in the Image Widget Crop module, [issue #3222406](https://www.drupal.org/project/image_widget_crop/issues/3222406). This was exactly the issue we were having and was relieved it wasn't something unique to our platform.

## Cause of the issue

Looking back, I think this issue was partly of my own making, but seeing that others were experiencing the same it's also possible it was just an odd bug. Long story short, the issue was caused by using an image style with specific hard dimension, as the **crop preview** image, See **Fig. 1** below.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/crop-preview.png)

Fig. 1: Screenshot of Crop preview configuration.

You may not know this but you can change image styles for almost any image within Drupal's admin. I recently completed a lot of work around image styles within our platform and perhaps I unknowingly changed the image style used by Drupal's crop preview. I can't say for sure.

## Solution

The issue was not so much the aspect ratio used in the image style used as the crop preview, but rather the hard dimensions of the image style. These dimensions were forcing all images, regardless of their aspect ratio, to use the square aspect ratio as the starting point for cropping, rather than the original image.

The solution is to use an image style that uses the **Scale** image effect, as the crop preview. The Scale image effect does not require image dimensions and thus allows your cropping area to always reset to the original image.

If you read [comment #5](https://www.drupal.org/project/image_widget_crop/issues/3222406#comment-14903564) in the issue page you will see **juamerico** explanation of the issue in more detail and what he did to fix it.

### Steps taken to address the issue

1. I created a new image style called **Crop preview** with the Scale image effect as well as using a wide aspect ratio or crop type such as 16:9.
2. I configured the **Manage form display** for the **Image** media type ( `admin/structure/media/manage/image/form-display`), so it uses the new image style I just created. See **Fig. 2** below

![Image crop preview settings](https://mariohernandez.io/images/blog-images/crop-preview-img.png)

Fig. 2: Screenshot of Manage form display settings for images.

**NOTE**: Your environment may be configured differently than mine and you may not have the same options as I do.

With the changes to the Crop preview image style, every time you crop the image you are dealing with the original image rather than an already cropped image.

## In closing

The main reason for writing about this topic is so I know what to do next time I run into this issue. I hope you find this helpful.

Tags for this post

- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)
- [Crop](https://mariohernandez.io/tag/crop/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.


 [See more posts](https://mariohernandez.io/blog)

## Improve Image Performance
[Skip to content](https://mariohernandez.io/blog/using-modern-image-formats-to-improve-performance/#main-content) [Drupal](https://mariohernandez.io/tag/drupal/)

![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/heroes/webp.webp)

I've always been drawn to working with images, and when responsive images came onto the scene, I dove deep into learning everything I could about them.

I've written extensively about [Responsive images](https://mariohernandez.io/series/responsive-images) if you need a refresher, but today, let's focus on modern image formats. In particular, **WebP**.

## WebP

WebP is a modern image format developed by Google that provides superior compression and quality compared to traditional formats like JPEG and PNG. It supports both lossy and lossless compression, transparency, and animation, making it a versatile choice for web images. WebP helps improve website performance by reducing file sizes, which leads to faster loading times and better user experience.

### Is WebP widely supported?

Since 2020, all major browsers support WebP. ( [Check caniuse for details](https://caniuse.com/?search=webp)). My site, this site, uses WebP exclusively for most images and although it is not a big site, I still see performance improvements.

## Updating Drupal to use WebP

You would think that a big upgrade like this would be a complex task but you'll be surprised to learn that enabling WebP for new and existing images in Drupal is straightforward. Let's quickly go over the steps.

1. Edit each of your image styles and add the **Convert** effect.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/exibit-webp.png)

Fig. 1: Selecting the Convert effect for an image style.

2. Select and add the WebP format to the image style.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/exibit-webp2.png)

Fig. 2: Adding the WebP format to an image style.


That's it!

**Fun fact!**: WebP support was introduced to Drupal core in [Drupal 9.2.0](https://gorannikolovski.com/blog/drupal-92-will-support-webp-images-out-box), which was released on June 16, 2021. Before this core integration, WebP support in Drupal was only available through contributed modules or custom code. The inclusion in core made the format's benefits available to all Drupal 9.2+ sites without requiring additional modules.

## Demo

I did a quick and simple test to show the difference in file size when adding a typical JPEG image to an article, then converting it to WebP using the steps above. The test was done in Drupal 10.x.

### First: Using a JPEG image

Using a JPEG image on an article node, shows a file size of `289kb`.

![Article with JPEG image showing browser's dev tools](https://mariohernandez.io/images/blog-images/img-jpg.webp)

Fig. 3: Example shows using a JPEG format.

### Then: Using a WebP image

After converting the imag eto Webp by updating the image style of that image, the file size was reduced to `76kb`. That's about 60% file size reduction.

![Article with Webp image showing browser's dev tools](https://mariohernandez.io/images/blog-images/img-webp.webp)

Fig. 3: Example shows using a WebP format.

**NOTE**: This was a pretty basic comparison test. File size reduction will vary depending on original file zize, format, and other preferences on your site.

## What about other formats like Avif?

The Avif image format is also a great option with many benefits. The browser support is really good at the time of this post (See [caniuse](https://caniuse.com/?search=avif)), and it's worth looking into it as an alternative to WebP, or even combining the two depending on your media needs.

## In closing

It's all about the small wins. This one is pretty simple but can provide significant performance benefits. Give it a try!

### Resources

- [Google's page on WebP](https://developers.google.com/speed/webp)
- [WebP files explained](https://www.adobe.com/creativecloud/file-types/image/raster/webp-file.html)
- [Mozilla's Image file type formats guide](https://developer.mozilla.org/en-US/docs/Web/Media/Guides/Formats/Image_types#webp_image)

Tags for this post

- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Images Series
[Skip to content](https://mariohernandez.io/series/responsive-images/#main-content)

# Series: Responsive images

Responsive images is not one thing, it's a series of things and steps that need to take place for all the pieces to come together. In addition, there are various topics that drive the approach you take when managing responsive images. Learn all of it in this series.

- [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/) \- October 27, 2023
- [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/) \- November 3, 2023
- [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/) \- November 10, 2023
- [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/) \- November 17, 2023
- [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/) \- November 24, 2023
- [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/) \- December 1, 2023
- [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/) \- December 8, 2023

## Page Not Found
[Skip to content](https://mariohernandez.io/false#main-content)

Sorry but the page you are looking for can not be found

[Visit my blog](https://mariohernandez.io/blog)

## Storybook Series
[Skip to content](https://mariohernandez.io/series/storybook/#main-content)

# Series: Storybook

In this series I cover the process me and my team took to build a new front-end system for our Drupal theme, migrate from Patternlab to Storybook, as well as automation of the front-end system using ViteJS and other modern tools.

- [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/) \- April 14, 2024
- [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/) \- May 2, 2024
- [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/) \- July 1, 2024
- [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/) \- June 2, 2024

## Page Not Found
[Skip to content](https://mariohernandez.io//404.html#main-content)

Sorry but the page you are looking for can not be found

[Visit my blog](https://mariohernandez.io/blog)

## About Mario Hernandez
[Skip to content](https://mariohernandez.io/about/#main-content)

About me

First off, thanks for visiting my blog. I hope you find the content engaging and most of all helpful as you tackle your web project.

I am Mario Hernandez, a passionate Software Engineer with over 15 years of experience. I specialize on building [Drupal](https://drupal.org/) websites and leading teams to build great user experiences. Another of my passions is training teams of all sizes on all things Front-end and Drupal. I travel across the country to speak and run training workshops at various Open Source events such as Drupal Cons, Drupal Camps and others. As you can see I also like to write about all the cool stuff I am working on or learning about.

[Read my blog](https://mariohernandez.io/blog)

Connect with me

- [Instagram](https://www.instagram.com/_mariorhernandez/ "Like me on Instagram")
- [Twitter](https://twitter.com/imariohernandez "Follow me on Twitter")
- [Github](https://github.com/mariohernandez "Collaborate with me on Github")
- [LinkedIn](https://www.linkedin.com/in/mariorhernandez/ "Network with me on LinkedIn")

![Mario standing under a huge red fedora](https://mariohernandez.io/images/mario.webp)

![Mario punching video game's blocks](https://mariohernandez.io/images/mario-punch.webp)

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Person holding a card](https://mariohernandez.io/images/thumbs/featured-image.webp)





  August 2, 2018



  Building components is a lot of fun but it takes good planning and attention to detail to build components which are flexible and reusable.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Image and Tool Insights
[Skip to content](https://mariohernandez.io/blog/#main-content)

- April 12, 2025



Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- August 18, 2024



Cropping images in Drupal is a great way to ensure your images always look their best.

- July 1, 2024



If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- June 2, 2024



If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- May 2, 2024



In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

## Contact Me
[Skip to content](https://mariohernandez.io/contact/#main-content)

Do you have a question about one of my posts? or, did you find an issue?

## Send me a message

Name:

Email:

Your Message:

Send Message

## Robots.txt Access
```
User-agent: *
Allow: /
Sitemap: https://mariohernandez.io//sitemap.xml

```

## Blog Series Overview
[Skip to content](https://mariohernandez.io/series/#main-content)

# Blog series

The following are a collection of blog posts which have been written about a specific topic and organized as series.

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

## Gatsby Articles
[Skip to content](https://mariohernandez.io/tag/gatsby/#main-content)

- September 10, 2018



Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

## Thank You Message
[Skip to content](https://mariohernandez.io/thanks/#main-content)

I will respond to your message as soon as I can.

![Mario punching blocks](https://mariohernandez.io/images/mario-punch.webp)

## About Mario Hernandez
[Skip to content](https://mariohernandez.io/about/#main-content)

About me

First off, thanks for visiting my blog. I hope you find the content engaging and most of all helpful as you tackle your web project.

I am Mario Hernandez, a passionate Software Engineer with over 15 years of experience. I specialize on building [Drupal](https://drupal.org/) websites and leading teams to build great user experiences. Another of my passions is training teams of all sizes on all things Front-end and Drupal. I travel across the country to speak and run training workshops at various Open Source events such as Drupal Cons, Drupal Camps and others. As you can see I also like to write about all the cool stuff I am working on or learning about.

[Read my blog](https://mariohernandez.io/blog)

Connect with me

- [Instagram](https://www.instagram.com/_mariorhernandez/ "Like me on Instagram")
- [Twitter](https://twitter.com/imariohernandez "Follow me on Twitter")
- [Github](https://github.com/mariohernandez "Collaborate with me on Github")
- [LinkedIn](https://www.linkedin.com/in/mariorhernandez/ "Network with me on LinkedIn")

![Mario standing under a huge red fedora](https://mariohernandez.io/images/mario.webp)

![Mario punching video game's blocks](https://mariohernandez.io/images/mario-punch.webp)

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Person holding a card](https://mariohernandez.io/images/thumbs/featured-image.webp)





  August 2, 2018



  Building components is a lot of fun but it takes good planning and attention to detail to build components which are flexible and reusable.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Image and Tool Insights
[Skip to content](https://mariohernandez.io/blog/#main-content)

- April 12, 2025



Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- August 18, 2024



Cropping images in Drupal is a great way to ensure your images always look their best.

- July 1, 2024



If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- June 2, 2024



If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- May 2, 2024



In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

## Contact Me
[Skip to content](https://mariohernandez.io/contact/#main-content)

Do you have a question about one of my posts? or, did you find an issue?

## Send me a message

Name:

Email:

Your Message:

Send Message

## Responsive Image Styles
[Skip to content](https://mariohernandez.io/blog/responsive-image-styles/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Two picture frames on a counter](https://mariohernandez.io/images/picture-frames.webp)

[Photo by: Sincerely Media](https://unsplash.com/@sincerelymedia)

In a nutshell, responsive image styles are a collection of image styles. It can be confusing because the similarities in their names, but responsive image styles are a bundle that holds one or more image styles.

## What's the use of responsive image styles?

If you read the posts about the `<picture>` element as well as the one about `srcset` and `sizes` attributes, we discussed that whether you are doing art direction or resolution switching, we need to provide the browser with a collection of images to serve to different devices. In Drupal the way we provide the collection of images is by using responsive image styles.

![Three images stored in a box](https://mariohernandez.io/images/responsive-image-styles.webp)

## Naming responsive image styles

In the previous post we went in detail about best practices for naming image styles. Properly naming responsive image styles is just as important but there are some differences in guidelines. While naming image styles is mostly based on the characteristics of the images (aspec ratio, orientation, dimensions), naming responsive image styles is typically based on their use case. Let's take a look at some examples.

Let's say we are building a photo gallery where we will use a series of images to display as a slider or photos grid. We may not be as concerned about the images aspect ratio or dimentions because we already have image styles in place to handle that. We're only interested on how the images will be used. In this example the use case is a Gallery. So a name for the responsive image style that makes sense to me would be **Gallery** or **Photo gallery**. Another example would be creating a responsive image style for your website's hero component. Regardless of what the images dimensions are, the responsive image style can be called **Hero**. Both of these examples are for very unique use cases, but there are also cases for more common type of responsive images styles such as a listing of news articles or events, a featured news article or a page for team member photos. In these cases, we can use names that we can reuse elsewhere. Something like **Person listing**, **News full**, **Content grid**, or **16:9 (Max 460px)**.

## Back to hands-on exercises

We are going to create a new responsive image style in which we will make use of the image styles we created in the previous post. Let's pretend the images we are targeting will be used for displaying News and Events listings ( [Similar to this](https://www.visittheusa.com/usa-experiences), and example below).

![Listing of news articles](https://mariohernandez.io/images/list.webp)

Most websites use patterns that they repeat across their sections or pages. The news listing example above is a pattern that can be used for not only displying news articles, but maybe also events, social media posts, and more. This is great because identifying these patterns can help us create better image styles and responsive image styles that are reusable. This is what I meant in the previous post when I said that if you are fortunate enough to have designs for your project, you will be able to identify these patterns right away. Let's keep this in mind as we get back into exercise mode.

## Resolution switching

Here's where all of our knowledge about `<picture>` (art direction) and `srcset` and `sizes` (resolution switching) comes in handy. We'll start with resolution switching because art direction requires additional tooling and configuration.

In Drupal 8 we used the Picture and Breakpoints contrib modules to handle responsive images. Starting with Drupal 9, Drupal provides the " **Responsive image**" core module which means we don't need to install any contrib modules. Responsive image is not enabled by default.

01. Enable the Responsive image core module (/admin/modules)
02. Once enabled, head over to `/admin/config/media/responsive-image-style` to begin creating our first responsive image style
03. Click **Add responsive image style**
04. Type **Content grid** as the label for the responsive image style
05. Select \* _Responsive image_ from the Breakpoint group dropdown
06. Scroll down and select a Fallback image style ( **16:9 (Max 320px)**)
07. Expand the **1x Viewport Sizing \[\]** fieldset
08. Under **Type**, chose **Select multiple image styles and use the sizes attribute**
09. Under **Sizes** type the following: **(max-width:640px) 100vw, 30vw** (I'll explain shortly)
10. Under **Image styles** select the image styles we created before
11. Scroll down and click **Save**

![Three images stored in a box](https://mariohernandez.io/images/responsive-image-style-screenshot.webp)

### Let's go over everything we just did

Since we are doing resolution switching and not art direction, we chose **Responsive image** from the Breakpoint group dropdown. Doing so presents to us the **1x Vieport Sizing \[\]** screen with the following options:

- **Type**: Again, since we are doing resolution switching, the obvious choice here is **Select multiple image styles and use the sizes attribute**. The other two options are irrelevant in this particular example.
- **Sizes**: The Sizes option is where we tell the browser how big/small our images should be rendered in relation to the viewport being used. Depending on our goal, this field accepts a single value or a media query with some conditions. Let's say we wanted our images to always render at full width regardless of the device being used (like a Hero image for example), then the value for the **Sizes** field would be **100vw** (100% the viewport width). In our case however, we want the image to display full width, but only if the viewport/device is not larger than 640px, otherwise, meaning if the viewport/device is larger than 640px, we want the image to display at 30% the viewport width. We could had also used a pixel-based value such as 400px for example.
- **Image styles**: This is where we choose the image styles we want to make available for the browser to pick from. Think of this as the `srcset` attribute in the `<img>` tag.
- **Fallback image**: We pick a fallback image in case all the above fails.

**Very important**: Remember in the [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes) post, our claim was that it's better to let the browser pick the best image possible as the browser is smarter than us? This is exactly what we are doing here. We are providing the browser with a collection of images to pick from. Each image provides its dimensions. Then we tell the browser how big/small we want the images to be rendered. One thing we are not doing is telling the browser which image to use, we let the browser make that decision. This is the complete opposite of what we do when we use `<picture>`. As a reminder, the method used above is what you would do in most of your images. This is like the default configuration for your responsive images. Only when you need to crop your images differently for each device size is when you would use the art direction approach.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Media Insights
[Skip to content](https://mariohernandez.io/tag/drupal/#main-content)

- April 12, 2025



Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- August 18, 2024



Cropping images in Drupal is a great way to ensure your images always look their best.

- June 2, 2024



If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- May 2, 2024



In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- April 14, 2024



Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- December 8, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- December 1, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- November 24, 2023



Responsive image styles in Drupal are bundles that contain one or more image styles.

- November 17, 2023



I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- November 10, 2023



Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- November 3, 2023



In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- October 27, 2023



In this seven-part guide I cover everything you need to know about responsive images and how to manage them in a Drupal site.

- September 27, 2023



There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- June 17, 2021



Components integration with Drupal can be a complicated task, but there are also ways in which this task can be simplified. This post shows you how.

- June 29, 2020



As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.

- January 10, 2019



As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.

## Styling Web Forms
[Skip to content](https://mariohernandez.io/blog/styling-forms-elements/#main-content) [Css](https://mariohernandez.io/tag/css/)

![Four black wall arts on brown wall](https://mariohernandez.io/images/frames.webp)

[Photo by: Leonardo Yip](https://unsplash.com/@yipleonardo)

Whether you are a veteran or just getting started with web development, working with web forms is not the sexiest thing but there is no avoiding them. Forms on a website are critical to the website's mission and the visitors using them. In this post I am going to show you how to properly style webforms and form elements so you can ensure they are consistent with your brand and provide a pleasant user experience.

#### Resources:

I have recording video tutorials on some of the concepts covered in this post. Scroll to the bottom if you are the kind of person who learns better watching tutorials.

## Where to start

One thing about forms you can count on is that they are not consistent. In today's API era forms can be generated from any source and you don't always have control of their HTML. I personally work with [Drupal](https://drupal.org/) a lot and even within it forms can originate from Views, Blocks, Nodes, Paragraphs, Modules, and more. I imagine this is the case with most Content Management Systems. So how do you address something where you can't always predict source or markup of forms?

### If you can't beat them, join them

Whether is Drupal or other system, it is best to let that system dictate the markup of forms. Try to bend a system to your needs can prove challenging and not worth the trouble. This is the approach I take and so far this has worked very well for me.

## Attributes are your friends

As a Front-End developer for many years, I love a good css class. They make my job a lot easier than not having a class. When it comes to form elements however, it is best to ignore classes and rely solely in attributes. What attributes you may be asking yourself? Let's take a look

### From element types

The **type** attribute in form elements make it easy to style them in a global manner. Rather than styling form elements based on their css class or ID, the type attribute is the best approach. Each form field has a type attribute which makes it possible for browsers to render the element as expected. The type attribute can also play a factor in Javascript and form handling, but for now we are going to focus on styling.

- **Input fields**: Input fields such as text fields, are probably the most common form elements in a form. But don't let its simplicity fool you because text fields come in many types; the most common being `text`. this is the type for a typical text box where you can type just about any kind of information. This sometimes leads to developers using it for anything including for data that should be in a different form type. Let's take a look at the various types a text field can be:

  - **text**: Used for most text fields and accept any string of text
  - **email**: Used to capture email address. Using this type is recommended for email addresses as it provides _regular expressions_ to validate the data entered in the field meets the patterns of an email addresses. In addition, using this type of field makes it possible for your mobile devices to show a custom keyboard where the "@" sign is available without having to toggle your keyborad characters to find it.
  - **password**: As you can imagine, this makes it possible to hide passwords from view as you type them.
  - **search**: Elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent.
  - **tel**: Similarly to the email address, using this type allows for the keyboard on mobile devices to display numbers by default rather than alpha characters.
  - **url**: Similarly to `email`, this provides you with a custom keyboard on mobile devices that make it easier to type a common url.

As you can see from the examples above, text fields may seem simple but they come in all flavors. In most cases, the goal of form elements is to be styled the same across an entire site. So it is recommended you style these elements globally so no matter where they are used they automatically inherit the intended styles. So how do you style them globally? Let's take a look:

Here are a couple of examples of differnt input fields which we will style to ensure they all look similarly everywhere.

```html
<input type="text" name="firstname">

<input type="password" name="password">

<input type="email" name="email">
```

### Styling

```css
  input[type='text'],
  input[type='password'],
  input[type='email'],
  input[type='tel'],
  input[type='search'],
  textarea {
    background-color: #ffffff;
    border: 1px solid #000000;
    height: 40px;
    padding: 10px;
    width: 100%;
  }

  textarea {
    height: initial;
  }
```

By using the element's `type` attribute we can collectively style them with a single set of rules. As you may have noticed I included `textarea` as on of the elements because I want textareas boxes (multi-row textbox), to inherit all of the styles from text boxes with the exception of the height property; thus we override the height property while keeping all other styles the same as text boxes.

## Button elements

Buttons are elements you typically want to display with consistent styles across your entire website. This includes buttons you may create yourself and those provided by the content management system you may be working with. So similarly to input fields above, we can't always rely on IDs or classes to style them. However, similarly to the input fields above, we can rely on the `type` attribute to style the different type of buttons in our site. Different type of buttons? yes, there are different types. Let's tae a look.

### Markup

```html
<a class='button'>I want to look like a button</a>

<button>I'm an actual button</button>

<input type='submit' value='Yo tambien'>

<input type='reset' value='Me too'>
```

- All elements above will have the same look and feel.
- The first 3 elements should look identical, but the last one ( `type=['reset']`) should look slightly different because it's not a primary button, it's more of a secondary button.
- Sometimes this secondary button will be used to cancel or to reset someting on a page. While the top 3 will be used for important actions such as submit, save, etc.
- Let's style them now

### Styles

```css
.button,
button,
input[type='submit'],
input[type='reset'] {
  background-color: rebeccapurple;
  border-radius: 2px;
  border: 2px solid rebeccapurple;
  color: #ffffff;
  cursor: pointer;
  display: inline-block;
  font-size: 18px;
  line-height: 1;
  padding: 20px 40px;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  margin-bottom: 20px;
}

.button:hover,
.button:focus,
button:hover,
button:focus,
input[type='submit']:hover,
input[type='submit']:focus {
  background-color: rgb(126, 63, 189); /* lighter purple */
  color: #ffffff;
  text-decoration: none;
}
```

- We are including all the button elements in our initial set of styles. The reason for this is that we want all the buttons (regardless of their type of function), to share the same shape, font size, font-weight, border width, hover behavior, and other properties.

```css
input[type='reset'] {
  background-color: #ffffff;
  border-color: rebeccapurple;
  color: rebeccapurple;
}

input[type='reset']:hover,
input[type='reset']:focus {
  background-color: #ffffff;
  border-color: #444444;
  color: #444444;
}
```

- Then for the reset type only, we are styling this button with white background and purple text. This will ensure this button will not stand out as much as the other buttons.

## Radio buttons and Check boxes

Probably the hardest elements to style due to their dynamic nature, they have a hard time fitting in with the rest of HTML elements. Rather than link you to another blog post where you can copy and paste the necessary CSS to style these elements, I am walk you through the process of styling them.

Checkout the [Codepen](https://codepen.io/mariohernandez/pen/dyMGoyO?editors=1100) for these elements.

### Markup

The typical markup for a checkbox or radio button looks like this:

```html
<div class="checkbox__item">
  <input type="checkbox" id="checkbox1" name="checkboxname" value="Item 2">
  <label for="checkbox1">Item 2</label>
</div>
<div class="checkbox__item">
  <input type="checkbox" id="checkbox2" name="checkboxname" value="Item 2">
  <label for="checkbox2">Item 2</label>
</div>
```

```html
<div class="radio__item">
  <input type="radio" id="radio1" name="radioname" value="Item 2">
  <label for="radio1">Item 1</label>
</div>
<div class="radio__item">
  <input type="radio" id="radio2" name="radioname" value="Item 2">
  <label for="radio2">Item 2</label>
</div>
```

### Styles

Out of the box, you can not style the native checkbox nor radio button elements. To be able to apply custom styles we need to do it in a hacky way. This is my favorite way to style these elements.

#### Drawing the checkbox

```css
/* visually hide the native checkbox and radio buttons. */
input[type='checkbox'],
input[type='radio'] {
  position: absolute;
  opacity: 0;
}
```

- By setting absolute position and opacity to zero, we are hiding the native radio and checkbox elements from view. However, we need the elements to still function as expected so using `visibility-hidden` or `display: none` are not viable options.
- Although we are visually hiding the elements, they are still available in the DOM so we can interact with them and also so they can be available to assistive technologies such as screen readers.

```css
/* Add space to the left of the label for later use. */
label {
  position: relative;
  padding-left: 35px;
}
```

- We set `relative` position on the label as we prepare to add pseudo elements in the next steps.
- The left padding here will allow us to draw a box or a circle for the checkbox/radio button. More on this later.

```css
/* Draw a square box with border  using a pseudo element (`::before`). */
input[type='checkbox'] + label::before {
  border: 2px solid #e15b00;
  content: '';
  display: inline-block;
  height: 24px;
  left: 0;
  position: absolute;
  top: -2px;
  width: 24px;
}
```

- First we define a sibling element of the checkbox with the `+` sign. The sibling element being the `label` element. If you look at the markup we wrote above, you will notice that the checkbox and the label are siblings. This is also true for the radio button and its label.
- Using a `::before` pseudo element on the label, we are drawing a `24px` square box.
- For any pesudo element to be visible on the page, we need to assign the property of `content:`, even if it's value is empty as shown above.
- We then add a `2px` border on the box. This box is what will be presented as the actual checkbox for the user to interact with (check/uncheck).
- By setting the box with `absolute` position, we are positioning just to the left of the label. The position of the box is in relation to the label's position (hence `relative` position on the label).

```css
/* Draw checkmark using a ::after pseudo elment on the label */
input[type='checkbox'] + label::after {
  border-bottom: 3px solid #fff;
  border-left: 3px solid #fff;
  content: '';
  display: inline-block;
  height: 10px;
  left: 4px;
  position: absolute;
  top: 2px;
  transform: rotate(-45deg);
  width: 18px;
}
```

- The same way we drew the box previously, now we draw a checkmark symbol using a `::after` pseudo element on the label. This means we are drawing the checkmark symbol after the `label` element.
- In reality, we are drawing a rectangular box with left and bottom borders of `3px`. By rotating the box negative 45 degrees, this makes it look like a checkmark.
- We then use `absolute` position on the checkmark so we can position it right in the middle of the box we drew before.

#### Drawing the radio button

Before proceeding with the styles, let's repeat the steps above but this time for the radio buttons. These styles are extremely similar with the exception of in stead of drawing a square box, we will be drawing a circle with an outline, and instead of a checkmark, we will be drawing a filled circle in the middle of the outlined circle.

```css
/* Draw a circle and add borders to it */
input[type='radio'] + label::before {
  border-radius: 50%;
  border: 2px solid #e15b00;
  content: '';
  display: inline-block;
  height: 24px;
  left: 2px;
  position: absolute;
  top: -4px;
  width: 24px;
}

/* Draw an inner circle */
input[type='radio'] + label::after {
  background-color: #e15b00;
  border-radius: 50%;
  content: '';
  display: inline-block;
  height: 20px;
  left: 6px;
  position: absolute;
  top: 0;
  width: 20px;
}
```

- This time we are targeting the input type of `radio` and we are using `border-radius` to draw a perfect circle.

```css
/* Hide checkmark and inner circle by default */
.radio input[type='radio'] + label::after,
.checkbox input[type='checkbox'] + label::after {
  content: none;
}
```

- By default, we don't want either the checkboxes or radio buttons to be checked. So we set the value of `content:` to `none`. This will present the checkboxes and radio buttons unchecked.

```css
/* Show checkmark and inner circle when input is checked */
input[type='radio']:checked + label::after,
input[type='checkbox']:checked + label::after {
  content: '';
}
```

- Using the `:checked` pseudo class ( `input[type='radio']:checked`, `input[type='checkbox']:checked`), we then show the checkmark or inner circle by setting the `content:` property's value to empty ( `''` i.e. removing `none`). The `:checked` pseudo class becomes available when the checkbox or radio buttons are click-checked and when that happens, then we show the checkmark or inner circle.

```css
/* When box is checked, add background color. */
input[type='checkbox']:checked + label::before {
  content: '';
  background-color: #e15b00;
}
```

- Since the checkmark we drew is white, we are adding a background color inside the checkbox to display the checkmark. We are doing this only when the `:checked` pseudo class is present.

```css
/* Add focus styles when elements are in focus */
input[type='radio']:focus + label::before,
input[type='checkbox']:focus + label::before {
  outline: rgb(59, 153, 252) auto 5px;
}
```

- Finally, using the `:focus` pseudo class, we are adding basic outline styles to show the "on focus" state of the inputs. We need to do this since we are not using the native input elements. If we were, the browser would automatically add these styles to our inputs.

## Resources

I have recorded tutorials on severalof these things. Check them out if you are the kind of person who learns better through video tutorials.

- [Styling Checkboxes and Radio Buttons](https://youtu.be/6KsCwVacfLs)
- [CSS Pseudo Elements](https://youtu.be/KNsEpsCui8c)
- [Styling Checkboxes and Radio Buttons (Codepen)](https://codepen.io/mariohernandez/pen/dyMGoyO?editors=1100)

Tags for this post

- [Css](https://mariohernandez.io/tag/css/)
- [Forms](https://mariohernandez.io/tag/forms/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Rocks stack from big to small](https://mariohernandez.io/images/thumbs/rocks.webp)





  June 29, 2020



  As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.


 [See more posts](https://mariohernandez.io/blog)

## Dynamic Image Paths in Drupal
[Skip to content](https://mariohernandez.io/blog/drupal-base-path/#main-content) [Twig](https://mariohernandez.io/tag/twig/)

![Person confronted with two paths to choose from](https://mariohernandez.io/images/paths.webp)

[Photo by: Caleb Jones](https://unsplash.com/@gcalebjones)

Recently I was building a component that required a static image which was not stored in the database but instead needed to be stored somewhere in the file system of the site. There are several ways for serving a static image for example we could have stored the image in the `sites/default/files/images/` directory. A very common approach which in many cases would work just fine, however, in my case I was building a component and I wanted for the component image to be located within the same component's directory. This makes sense because if I wanted to reuse or share this component, all component assets would be included in a single directory.

## Requirements

My goal with this task was to dynamically point to the image regardless the site this component was running on. Oh yeah, we are running a multi-site architecture with hundreds of sites and a single code base. So this component needed to work in all of these hundreds of sites. Now the challenge seems a little more... "challenging".

## ¡Manos a la hobra'!'

I started by doing research to determine the best way possible to achieve this. I read about using a pre-process function that would generate a dynamic base path of the site but I was hoping I could keep things simple and do everything on the front-end with only Twig. This would make it a more appealing approach for front-end developers.

After some research, I came across two little gems that became game-chargers for my project. One of these gems is the `{{ url('<front>') }}` Twig function. This will provide the current site's homepage/base path. The other very handy Twig function is `{{ active_theme_path() }}` which prints the path of the current active theme ( `themes/custom/my_theme`). While researching for this task, I also found you can use the `{{ directory }}` Twig variable in your theme's templates to print the active theme's path. A word of coution when using either the `{{ active_theme_path() }}` function of the `{{ directory }}` variable as these could have different results depending on your whether you are using them in a base or sub theme. Here's a [drupal.org issue](https://www.drupal.org/project/drupal/issues/3049414) that discusses this in more detail.

Armed with these two little functions, and one Twig variable, we can now work in generating a dynamic path to our theme's directory where the static image for our component is located. So this may seem like a simple thing but remember, our component's image should work regardless of the site the component is used on within our multi-site architecture. Some sites even use a different sub-theme but the parent theme is always the same which is where our image is stored.

## Building the dynamic path

Before we can use the first function we need to run it through the `|render` Twig filter. Since Twig will return an array from the `{{ url() }}` function, we need to convert it to a string because we need the value of the function. Let's take a look:

```php
{{ url('<front>')|render }} # This will give us http://my-site.com/
```

Next let's work with the theme path function. Similarly to the function above, we will use the `|render` Twig filter to convert it from an array to a string.

```php
{{ active_theme_path()|render }} # This will give us themes/custom/my-theme
```

Now that we have two strings we can joint them together to compose the full path to our image:

```php
<img src="{{ url('<front>')|render }}{{ active_theme_path()|render }}/images/image.jpg" alt="alt text" />
```

If we want to get fancy we could actually set a variable to shorten things a bit:

```php
{% set theme_url = url('<front>')|render ~ active_theme_path()|render %}
<img src="{{ theme_url ~ '/images/image.jpg' }}" alt="alt text" />
```

And there you have it. A dynamic path that will work on any of our sites.

I realized some people reading this already knew all of this but I didn't. So I figured I would share it because I bet there are others out there that also do not know about the `{{ url('<front>') }}` or `{{ active_theme_path() }}` Twig functions as well as the `{{ directory }}` variable. As I said before, there are many ways to handle this challenge, but in my case this is exactly how I wanted to approachh it. I hope this was helpful. Cheers!

Tags for this post

- [Twig](https://mariohernandez.io/tag/twig/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# [1 Comment](https://github.com/mariohernandez/mariohernandezio/issues/88) _\- powered by_ _[utteranc.es](https://utteranc.es/)_

[![@mariohernandez](https://avatars.githubusercontent.com/u/1289805?v=4?v=3&s=88)](https://github.com/mariohernandez)

Testing the comments system 🫶

👍

👎

️😂

️🎉

😕

❤️

🚀

👀


[Sign in](https://api.utteranc.es/authorize?redirect_uri=https%3A%2F%2Fmariohernandez.io%2F%2Fblog%2Fdrupal-base-path%2F) to add your reaction.

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.

- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.


 [See more posts](https://mariohernandez.io/blog)

## Drupal and Storybook Components
[Skip to content](https://mariohernandez.io/tag/components/#main-content)

- July 1, 2024



If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- May 2, 2024



In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- September 4, 2021



With great power comes great responsibility.

- June 17, 2021



Components integration with Drupal can be a complicated task, but there are also ways in which this task can be simplified. This post shows you how.

- August 2, 2018



Building components is a lot of fun but it takes good planning and attention to detail to build components which are flexible and reusable.

- July 21, 2018



Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.

## Twig and Drupal Insights
[Skip to content](https://mariohernandez.io/tag/twig/#main-content)

- September 27, 2023



There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- January 10, 2019



As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.

- July 21, 2018



Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.

## Storybook for Drupal
[Skip to content](https://mariohernandez.io/tag/storybook/#main-content)

- July 1, 2024



If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- June 2, 2024



If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- May 2, 2024



In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- April 14, 2024



Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

## Training Workshop Insights
[Skip to content](https://mariohernandez.io/tag/training/#main-content)

- June 29, 2020



As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.

- April 20, 2019



DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

- May 20, 2018



For the past couple of years I have been running private and community driven training workshops and I'd like to share my experiences and lessons learned.

## Image Management Tips
[Skip to content](https://mariohernandez.io/tag/media/#main-content)

- April 12, 2025



Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- August 18, 2024



Cropping images in Drupal is a great way to ensure your images always look their best.

- January 1, 2024



Take control of your image embeds in your site using Drupal's media.

- December 1, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

## Gatsby Articles
[Skip to content](https://mariohernandez.io/tag/gatsby/#main-content)

- September 10, 2018



Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

## Image Resolution Guide
[Skip to content](https://mariohernandez.io/tag/sizes/#main-content)

- November 10, 2023



Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

## Styling Web Forms
[Skip to content](https://mariohernandez.io/tag/css/#main-content)

- December 13, 2020



Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

## Drupal Integration Guide
[Skip to content](https://mariohernandez.io/tag/integration/#main-content)

- June 17, 2021



Components integration with Drupal can be a complicated task, but there are also ways in which this task can be simplified. This post shows you how.

## Image Cropping in Drupal
[Skip to content](https://mariohernandez.io/tag/crop/#main-content)

- August 18, 2024



Cropping images in Drupal is a great way to ensure your images always look their best.

## ViteJS Front-End Tool
[Skip to content](https://mariohernandez.io/tag/vitejs/#main-content)

- June 2, 2024



If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

## Web Forms Styling
[Skip to content](https://mariohernandez.io/tag/forms/#main-content)

- December 13, 2020



Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

## DrupalCon Seattle 2019
[Skip to content](https://mariohernandez.io/tag/drupalcon/#main-content)

- April 20, 2019



DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

## DDEV Training Setup
[Skip to content](https://mariohernandez.io/tag/ddev/#main-content)

- June 29, 2020



As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.

## Flexible Headings with Twig
[Skip to content](https://mariohernandez.io/blog/flexible-headings-with-twig/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Stacked rocks by the beach](https://mariohernandez.io/images/flexible-headings.webp)

> Proper use of headings h1-h6 in your project presents many advantages incuding semantic markup, better SEO ranking and better accesibility.

**_Updated April 3, 2020_**

Building websites using the component based approach presents all kinds of advantages over the traditional page building approach. Today I’m going to show how to create what would normally be an Atom if we use the atomic design approach for building components. We are going to take this simple component to a whole new level by providing a way to dynamically controlling how it is rendered.

## The heading component

Headings are normally used for page or section titles and are a big part of making your website SEO friendly. As simple as this may sound, headings need to be carefully planned. A typical heading would look like this:

```html
<h1>This is a Heading 1</h1>
```

The idea of components is that they are reusable, but how can we possibly turn what already looks like a bare bones component into one that provides options and flexibility? What if we wanted to use a h2 or h3? or what if the title field is a link to another page? Then the heading component would probably not work because we have no way of changing the heading level from h1 to any other level or add a URL. Let's improve the heading component so we make it more dynamic.

## Enter Twig and JSON

Twig offers many advantages over plain HTML and today we will use some logic to transform the static heading component into a more dynamic one.

Let’s start by creating a simple JSON object which we will use as data for Twig to consume. We will build some logic around this data to make the heading component more dynamic. This is typically how I build components on projects I work on.

1. In your project, typically within the components/patterns directory create a new folder called **heading**
2. Inside the heading folder create a new file called **heading.json**
3. Inside the new file paste the code snippet below

```json

{
  "heading": {
    "heading_level": "",
    "modifier": "",
    "title": "This is the best heading I've seen!",
    "url": ""
  }
}

```

So we created a simple JSON object with 4 keys: **heading\_level**, **modifier**, **title**, and **url**.

- The `heading_level` is something we can use to change the headings from say, h1 to h2 or h3 if we need to.
- The `modifier` key allows us to pass a modifier CSS class when we make use of this component. The modifier class will make it possible for us to style the heading differently than other headings, if needed.
- The `title` key is the title's string of text that will become the title of a page or a component.
- ... and finally, the `url` key, if present, will allow us to wrap the title in an `<a>` tag, to make it a link.

4. Inside the heading folder create a new file called **heading.twig**
5. Inside the new file paste the code snippet below

```php

<h{{ heading.heading_level|default('2') }} class="heading{{ heading.modifier ? ' ' ~ heading.modifier }}">
  {% if heading.url %}
    <a href="{{ heading.url }}" class="heading__link">
      {{ heading.title }}
    </a>
  {% else %}
    {{ heading.title }}
  {% endif %}
</h{{ heading.heading_level|default('2') }}>

```

* * *

Wow! What's all this? 😮

Let's break things down to explain what's happening here since the twig code has changed significantly:

- First we make use of `heading.heading_level` to complete the number part of the heading. If a value is not provided for _heading\_level_ in the JSON file, we are setting a default of 2. This will ensue that by default we will have a `<h2>` as the title, much better than `<h1>` as we saw before. This value can be changed every time the heading isused. The same approach is taken to close the heading tag at the last line of code.
- Also, in addition to adding a class of `heading`, we check whether there is a value for the `modifier` key in JSON. If there is, we pass it to the heading as a CSS class. If no value is provided nothing will be added.
- In the next line line, we check whether a URL was provided in the JSON file, and if so, we wrap the `Flexible Headings with Twig` variable in a `<a>` tag to turn the title into a link. The `href` value for the link is \`\`. If no URL is provided in the JSON file, we simply print the value of `Flexible Headings with Twig` as plain text.

## Now what?

Well, our heading component is ready but unfortunately the component on its own does not do any good. The best way to take advantage of our super smart component is to start using it within other components.

## Putting the heading component to use

As previously indicated, the idea of components is so they can be reusable which eliminates code duplication. Now that we have the heading component ready, we can reuse it in other templates by taking advantage of twig’s `include` statements. That will look like this:

```php

<article class="card">
  {%
    include '@components/heading/heading.twig' with {
      "heading": heading
    } only
  %}
</article>

```

The example above shows how we can reuse the heading component in the `card` component by using a Twig’s `include` statement.

**NOTE**: For this to work, the same data structure for the heading needs to exist in the card’s JSON file. Or, you could also alter the heading's values in twig, like this:

```php

<article class="card">
  {%
    include '@components/heading/heading.twig' with {
      "heading": {
        "heading_level": 3,
        "modifier": 'card__title',
        "title": "This is a super flexible and smart heading",
        "url": "https://mariohernandez.io"
      }
    } only
  %}
</article>

```

You noticed the part `@components`? this is only an example of a namespace. If you are not familiar with the [component libraries](https://www.drupal.org/project/components) Drupal module, it allows you to create namespaces for your theme which you can use to nest or include components as we see above.

### End result

The heading component we built above would look like this when it is rendered:

```html
<h3 class="heading card__title">
  <a href="https://mariohernandez.io" class="heading__link">
    This is a super flexible and smart heading
  </a>
</h3>
```

## In closing

The main goal of this post is to bring light on how important it is to build components that are not restricted and can be used throughout the site in a way that does not feel like you are repeating yourself.

* * *

#### Additional Resources:

[Managing heading levels in design systems](https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3).

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Twig](https://mariohernandez.io/tag/twig/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A book, tablet, mouse, keyboard and monitor on a desktop](https://mariohernandez.io/images/thumbs/emily-bernal.webp)





  October 27, 2023



  In this seven-part guide I cover everything you need to know about responsive images and how to manage them in a Drupal site.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Managing Responsive Images
[Skip to content](https://mariohernandez.io/blog/responsive-images-and-media/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Watter color mountains](https://mariohernandez.io/images/media.webp)

[Photo by: Simon Berger](https://unsplash.com/@8moments)

Drupal's Media is a powerful tool and we will use it to improve the way we manage responsive images by using media types and view modes to our advantage when managing responsive images. The following quote comes straight from Drupal's [Media module](https://www.drupal.org/docs/8/core/modules/media/overview):

> In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities. Media items are typically images, documents, slideshows, YouTube videos, tweets, Instagram photos, etc. Media entities are standard Drupal content entities. And are grouped by Media type bundles. Like content types they can have fields added, and their display can be managed via view modes.

## Media in Drupal

Out of the box, Drupal ships with the following media types: Audio, Document, Image, Remote video, and Video. You can create new media types if needed. For example, you could create a new media type that is of type "Image". Why would you do this? Well, in some cases, you may have specific requirements to handle images of a particular entity and rather than modify the existing Image media type, you could create a new one so you can manage specific settings on the new type and don't run the risk of breaking something on your site by updating the default Image media type. Creating new media types is outside the scope of this post, but wanted to let you know what's available to you.

1. Let's start by enableing the Media and Media Library modules as these are not enabled by default
2. Navigate to `/admin/structure/media`
3. Since we'll be working with images, click the **Edit** link to the right of the Image media type
4. We won't get into all the wonders of Media types, instead let's jump into **Manage display**

Like any other Drupal entity bundle, Manage displays, also known as View modes, are a pretty powerful feature. So what are view modes? View modes is how we display content in different ways. Take a look at the image below. Each of the numbered marks is a view mode. Same content, different ways and different fields.

![Image of amazon.com page showin a computer mouse](https://mariohernandez.io/images/modes.webp)

### Media view modes

Now that we understand how view modes work, we will use them to manage/display our responsive images. Let's start by creating a new Media view mode.

1. Within the Manage display tab for the Image media type, scroll down and expand the **Custom display settings** fieldset
2. Click **Manage view modes**
3. In the View modes screen scroll down to the Media section and click **Add new Media view mode**
4. Type **News listing** as the view mode name.
5. Click **Save**
6. Go back to the Image media type Manage display screen (/admin/structure/media/manage/image/display)
7. Scroll down and expand the **Custom display settings** fieldset
8. Check **News listing** and click **Save**. This enables the newly created view mode. You should now see it under the Manage display tab for the Image media type.

### Configure the new view mode

It's time to link the new view mode for the Image media type with the responsive image style we created.

1. Withing the Manage display screen, click the **News listing** view mode we just created
2. Change the Format of the image field to **Responsive image**. This allows us to pick a responsive image style of our choice.
3. Click the gear icon to the right of the image field
4. Under _Responsive image style_ select **Content grid**. This is the responsive image style we created in the previous post.
5. Link image to nothing
6. Click **Update**
7. Scroll to the bottom of the page and click **Save**

### What did we just do?

We just put all the pieces together which will result in well-managed responsive images. The order we followed is:

1. **Image styles**: These are several image templates that share similar attributes (i.e. aspect ratio).
2. **Responsive image style**: This is a collection of image styles that fullfill a specific use case.
3. **Media type and view mode**: We have specific requirements for news and event article images. View modes allow us to fullfill these requirements without affecting other image displays.

## Where do we use the responsive images?

So image styles, responsive image styles and image view mode are all connected and working great (you'll have to take my word for it 😃). One thing though, what content in our site will take advantage of all the beutiful work we've done? How about news articles? Take another look at the screenshot below. That's what we will do with all the work we've done.

![Listing of news articles](https://mariohernandez.io/images/list.webp)

## Configure the Article content type

Since we opted to use news article images as the content to work with, there is a little clean up we need to do first in the Article content type.

The image field that ships with the Article content type does not use Drupal's Media, it's a basic image field. This does not mean we can't use responsive images with this type of image field, we can, but we get more out of the Media type field (view modes for starters). In addition, with the media type image field, we can take advantage of media library, add more fields to the image media type, reuse images, and much more.

### Remove the image field from Article content type

**Warning**: Removing the image field will result in loosing any images you may have uploaded using this field. Only do this if you are sure you don't need the images. I never tested deleting the image field on a site that already had images so I am not sure if Drupal will even let you delete it.

1. From the admin toolbar, click **Structure**, **Content types**
2. Click **Manage fields** to the right of the Article content type
3. For the image field, click the dropdown under _Operations_ and select **Delete**
4. Click **Delete** again to confirm you want to delete the image field. The image field is now gone

### Adding a new media reference field to the Article content type

01. Still within the _Manage fields_ for the Article content type
02. Click **Create a new field**
03. In the _Add a new field_ dropdown, select **Media** which is located under the _Reference_ section. Notice there is also an image field, but this is the same kind we just deleted. Media is what we want.
04. Type **Image** as the label for the new field
05. Click **Save and configure**
06. Keep the _Allowed number of values_ as **Limited to 1** and click **Save field settings**
07. Optional but always a good practice is to add Help text. (i.e. Upload or select an image for this article)
08. Check the box if you want to make this a required field
09. Reference method should be **Default**
10. Check the **Create referenced entities if they don't already exist** checkbox
11. For _Media type_ check **Image** (extremely important)
12. Click **Save settings**. A new Image field is now available but this time it's a Media reference field of type Image.

### Arranging the field for content entry and content display

By default the new image field was added at the bottom of the list of fields. Let's move the field up. We will follow the same steps for the **Manage form display** (for when content is created), and **Manage display** (for when content is displayed on the page).

1. Within the **Manage form display** tab scroll down until you find the new Image field
2. Drag it up so it displays right under the Title field
3. Click **Save**
4. Repeat for **Manage display**

## Configure responsive images for the new image field

1. Still within the Article content type page, click **Manage display**
2. Drupal by default provides 3 view modes for the Article content type: **Default**, **RSS**, **Teaser**, and **Full content** (not enabled by default). We can create as many new view modes as we want/need, but for this excersice we will use **Teaser**.
3. Click **Teaser** from the list of view modes
4. For the image field, make sure its Format is set to **Rendered entity**. Since the new Image field we added is of Media type, the image is an entity and we want to render it as such.
5. Click the gear icon to the far right of the Image field
6. Under _View mode_ select **News listing**. This is the view mode we created for the Media image type field.
7. Click **Update** then scroll down and click **Save**. That's it.

## Displaying responsive images in news articles

Before we can see the responsive images, let's create a couple of news articles so we have content to work with. Go ahead and create a few news articles using the Article content type. Upload large images if you wish so we can see the work we've done in action.

In the next post, we will complete the configuration and display of responsive images.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Image Styles in Drupal
[Skip to content](https://mariohernandez.io/blog/image-styles-in-drupal/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![A person rowin behind a water color painted sky](https://mariohernandez.io/images/image-styles.webp)

[Photo by: Ngoc Mai Pham](https://unsplash.com/@potatonori)

Now that we've gone over some very important concepts of responsive images ( [art direction](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element) and [resolution switching](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes)), it's time to transfer all that knowledge and put it all in practice in Drupal. One of the key pieces for achieving responsive images in Drupal is by using image styles. Image styles are how Drupal manages the way we crop and size images.

## What are image styles?

Before we get to building image styles, let's go over what they are. Think of image styles as templates for cropping, scaling, converting, and sizing images. You can use these templates with any image on your site and as many times as you'd like. Thanks to image styles images will always render within the parameters we define.

A more real-world way of looking at image styles may be if you could imagine for a moment you have a couple of picture frames you'd like to use to hang some pictures in your house or office. One frame is 5x7, another is 4x6 and one last one is 8x10. The picture frames are Drupal's image styles.

So we have some picture frames and we have ordered several pictures from our favorite online photo printing service. There is one picture in particular I really love and I want to frame it using the 3 picture frames. So, although it is the same picture, I ordered different sizes of it (one for each frame size), and this will allow me to hang the 3 pictures in different sizes, aspect ratios and orientation. That in a nutshell are image styles.

![Drawn images of different sizes](https://mariohernandez.io/images/images.webp)

## Image styles best practices

Image styles are actually pretty easy to create but unfortunately because of this they can be misused or mismanaged. If not done properly, you may end up with a lot more image styles than you really need or image styles that are not well define and do no provide the outcome you are looking for. To avoid this, let's go over best practices for creating image styles which will result in less image styles to manage. Mind you, these are my best practices but I have to admit, they have worked very well for me.

### Naming image styles

Have you heard the phrase "naming things is hard"? It's true. Unfortunately when it comes to image styles, if not named properly you can get yourself in a lot of trouble. Quick example, let's say I want to create an image style that I'd like to use on images of news articles that are displayed on the homepage. One might think a good name for the image style may be something like " **Homepage news article images**". It doesn't seem so bad but let me point out a few issues with this name:

- The image style is limited to the homepage
- It is limited to news article images
- It lacks information about the image dimensions or aspect ratio

One objective with image styles is to create them in a way that they are reusable. The more reusable an image style is the less image styles you will need to create which in turn becomes easier to manage. The main issue with the image style above ("Homepage news article images"), besides the 3 bullet points we called out, is that is not reusable. The name of it limits us to only use it on the homepage and only for news article images. If we want to display similar images elsewhere, we would need to create another image style maybe with the same parameters as the first one. You may be asking yourself, wait, why can't we use the same image style elsewhere? Technically you can, but think about how confusing it will be to use an image style called "Homepage news article images", not on the homepage and not on news article images.

### Creating reusable image styles

One very efficient way for creating reusable image styles is to name them based on the image aspect ratio or dimensions, or a combination of both. For example: " **16:9 (Max 320px)**", or " **Box 1:1 (500px)**". Here are some reasons why this is a great way to name image styles:

- They are not specific to any page or type of image (articles, events, etc.)
- They provide key information about the image aspect ratio and their dimensions
- I can use these image styles hundreds of times on any image that fits the requirements as well as on any page
- By creating/naming image styles this way, I may have just saved myself from creating many other image styles

### Identifying the images patterns

I have found one of the most effective ways for identifyiing the image styles you need to create is by looking at your website mockups (if you are fortunate enough to have them). This may not always be possible, but if you do have designs for your website, this will tell you exactly which images you will need and how they need to be rendered. Having this information upfront will help you tremendously when creating image styles because you can plan ahead of time how to create reusable image styles that share commom attributes.

### Image styles use cases

When naming image styles it helps me to think of the characteristics of the images I am creating image styles for. For example, I have an image that should be rendered in 16:9 aspect ratio and it should not exceed a width of 320px. This is how I arrived at the name **16:9 (Max 320px)**. This also makes it possible to know which image style to use if I have other images that need to be rendered similarly. By the way, it is perfectly okay to use an image style that is slightly off from what an image needs to be rendered at. For example, Let's say I have an image that should be rendered at 16:9 aspect ratio, but its size should not exceed 250px. for this image, I can still use the **16:9 (Max 320px)** image style.

A 100px or even 200px difference between the image style dimensions and the image you need to use it on it's an acceptable thing to do for a couple of reasons:

- 100 or 200px in most cases will not make a big of an impact in performance, however, if you are rendering 50 of these images in a single page, then this could certainly present performance issues. So my rule is as long as this is a oneoff type of situation, I'm okay with doing this.
- Keep in mind that just because your image may be resized larger than it actually needs to be rendered, your image will still visually rendered at the right size as I would suppose it is inside a container that will be sized to the right rendering size, via CSS.
- Being able to reuse an image style that may be slightly larger than needed saves me from creating more image styles.

I hope you see the impact good names for image styles have on your site. When you are working on an enterprise level website, using the best practices above can really help you with the maintenance of your image styles.

## Image styles effects

Effects are the rules you set on each image style. Rules such as cropping, sizing, converting, saturating, rotating, and scaling of images is how we determine how to render the images in our site. In most cases, you want to let content creators of your site upload images that are relatively big. Doing so will allow you to use the images in your library in any use case. It is perfectly okay to scale your images down thorugh the use of image styles, but it is not recommended to scale images up. Doing so will result in blurry or pixelated images. This is why is better to upload large images. But you may be thinking, if I upload super large images, this will affect the performance of my site. It will if you are rendering the original images, but since we are using image styles, Drupal uses the original image to make copies at the size and aspect ratio you defined in your image styles. This is why by uploading a single image you are able to use it in many use cases at different sizes or aspect ratios.

Image styles effects can vary from image style to image style. For example, some image styles will require images to be scaled down, then cropped. Others will require images to be resized then cropped and others may just need for images to be resized to specific size. All these actions are called "Effects" in image styles. The effects you apply to your image styles will depend on the end goal for rendering the images. Let's do a quick demo of creating one image styles then applying effects to it.

## Hands-on excercise

All the principles covered in this series apply to Drupal 8, 9, and 10. You can follow along or simply watch me do it. To get started, spin up a vanilla Drupal site of the version of your choice. At the begining of this series I mentioned we will stick with only core/out of the box functionality to keep things simple.

### Creating a new image style

1. Login to Drupal as administrator
2. In your Drupal site navigate to `/admin/config/media/image-styles`
3. Click **Add image style**
4. For _Image style name_ type: **16:9 (Max 320px)**
5. To keep things nifty, edit the image style machine name so it reads `16_9_max_320px`. (Remove the trailing underscore generated by the ending parenthesis in the image style name. Clean machine names are important to me 😃. It actually makes a difference when you are debugging issues and you find your machine name has an extra underscore you didn't catch).
6. Click **Create new style**

![Screenshot of image style creation form](https://mariohernandez.io/images/img-screenshot.webp)

The image style above follows the best practices for name we covered earlier. This makes this image style reusable on any image that meets the aspect ratio and dimension requirements.

### Adding effects to the image style

For the purpose of this exercise, we are going to use the **Scale and crop** effect. This is probably the effect I use the most because it does exactly what I want, scale the image down to the size I want and crop it in the aspect ratio I need.

1. While in the page where the new image style was created (/admin/config/media/image-styles/manage/16\_9\_max\_320px), scroll down and you should see the **Effect** dropdown
2. Select **Scale and crop** from the dropdown
3. Click **Add**. The _Add Scale and Crop effect_ screen will come up
4. Type **320** for width and **180** for height. **Note**: These two values are required when you select the scale and crop effect. In other effects, these values may not always be required. It is important to define fixed dimensions on your image styles. This ensures your images will be sized/cropped at exactly the size you expect them to. How did I figure out the height for a 16:9 image with a width of 320px is 180px? I used this online [aspect ratio calculator](https://calculateaspectratio.com/).
5. Notice how you can change the focal point of the cropping by clicking any of the circles under **Anchor**. For this example we'll keep it in the middle circle.
6. Click **Update effect**. This will bring you back to the image style page.
7. We're done!

![Screenshot of image effect screen](https://mariohernandez.io/images/img-effect.webp)

Now we have one custom image style with specific effects. If you noticed, Drupal comes with a couple of predefined image styles. If they work for your images you should make use of them. In this series we will be creating custom image styles.

As I mentioned earlier, names of image styles should be descriptive but not limiting. In the case of some of the image styles that come out of the box with Drupal, the names **Large**, **Medium**, and **Wide** do not seem like good choices for names because those names are all relative. **Large** in relation to what? **Medium** in relation to what? ...just sayin'.

### Image multipliers

One thing we have not discussed but it is very important in responsive images, is the use of "Image Multipliers". What are image multipliers? In responsive images, you often think of image sizes in natural dimensions. If I think of an image that needs to be rendered at 720px, I will most likely resize or crop that image at 720px which makes total sense. With the evolution of high density or high resolution (retina) screens on mobile and larger devices, because they contain thousands or millions more pixels than traditional resolution screens, images need to actually be bigger than the intended size so they are rendered at their highest resolution/quality. This is what image multipliers are.

If we go back to the example above of the 720px image. For this image to be rendered as sharp and high-quality as possible in retina screen devices, we should add a 2x or 3x multiplier to it. Meaning, we should create an image styles for this image at twice and three times the intended size (1440px, 2160px). When we do this, the image will still be rendered at 720px (visually), but because we are providing larger images, these images will have twice or three times the number of pixels within them and when viewed in high resolution screens, the image quality will be superior than if we are only providing a regular 720px image. **Note**: I typically only create a 2x multiplier image styles for most of my images, but there may be situation when there are specific requirements for creating a 3x multiplier image styles.

### Create a 2x multiplier image style

The same way you created the original image style above for 16:9 (Max 320px), go ahead and repeat the process but this time create a 2x multiplier image style, **16:9 (Max 640px)**. Remember, the dimensions of this image style should be 640 x 360px.

## So what's next?

With our custom image styles in place, we can now make use of them, but before we do, let's go over another very important concept within Drupal, **Responsive image styles** ...whaaaaatttt?

We'll comeback to Drupal in a bit but first, we'll talk about responsive image styles in the next post.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Image styles](https://mariohernandez.io/tag/image-styles/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Developers looking at computer screen](https://mariohernandez.io/images/thumbs/training-workshop.webp)





  May 20, 2018



  For the past couple of years I have been running private and community driven training workshops and I'd like to share my experiences and lessons learned.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Images Guide
[Skip to content](https://mariohernandez.io/blog/responsive-images-wrapping-up/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Person holding a wrapped gift box](https://mariohernandez.io/images/wrap.webp)

[Photo by: Kira auf der Heide](https://unsplash.com/@kadh)

As far as image resolution switching, all the work we need to do is done. We will proceed to creating a quick Drupal view to display a list of news articles each of which will have a responsive image. When we finish with that, we will do the last pending thing, configuring responsive image styles using the `<picture>` element. You didn't forget about the picture element, did you?

## Creating a new Drupal view for news articles

Out of the box Drupal already comes with a view that shows a list of content, but in the Olivero theme this view is not displayed the way we need it, so we will create our own view.

01. From the admin toolbar, click, **Structure** \| **Views**
02. Click **Add view**
03. Give the new view any name you wish (i.e. News, Latest News, etc.)
04. In the **View settings** select to show Content of type **Article**
05. In **Page settings** check **Create a page**
06. Page title can be anything you wish
07. Type **news** (lower case) as the path
08. Under **Page display settings** chose **Unformatted list** of **teasers**
09. Scroll and click **Save and edit**
10. Scroll down and click **Save**

Two important things in the view above:

- The path is the url where the content list will be available (i.e. [https://my-site.com/news](https://my-site.com/news)).
- Using **Teaser** allows us to make sure of all the previous configuration we've done for responsive images.

With the view now in place, go to the new page we created, `/news`. This should show a list of news articles. Don't worry if the list does not look like the screenshot we showed earlier. The main thing is that you get a list of articles with images. The images in each article should reflect the configuration we setup for responsive images. You can check this by inspecting the images and you should see many of the attributes we configured. See example below.

![Demo of image and code inspector](https://mariohernandez.io/images/img-demo-inspect.webp)

- First, the image is rendering using the `img` tag and not `<picture>`
- The img tag uses the `srcset` and `sizes` attributes
- We can see the diferent image styles we created

That's it! We have completed all the steps for managing responsive images using the resolution switching approach. Now we will complete this series by going back to creating a new responsive image style but this time using the `<picture>` element.

## Responsive image style using art direction

I opted to leave this approach for last because it requires a couple of extra tools that are not part of Drupal core. As previously mentioned, art direction requires that each device gets an image cropped differently to ensure better user experience. Although Drupal provides a cropping "effect" within image styles, it is an automatic cropping process and cannot be customized for each image. This may not always work because we don't know what the focal point for each image we need cropped may need to be when trying to achieve art direction. For example, I may upload an image that I need to crop so the focal point is on the top-left corner, but next time I may upload an image where the focal point should be the bottom-right corner. Focal point refers to picking the area that is the most important to display specially on small devices.

What we need is to be able to manually crop each image we intend to do art direction with as we add them to the site. The good news is that within the Drupal echosystem we have many tools to choose from. In the interest of time, I'm going to simply discuss the tools you need to be able to manually crop your images on demand, but will not go into detail about their configuration or settings as those modules/tools have good documentation you can follow for proper configuration.

Here are the tools we will be working with:

- [Crop API](https://www.drupal.org/project/crop): On its own it does nothing, but in combination with other tools like Image widget crop, it gives you the ability to crop images on demand.
- [Image widget crop](https://www.drupal.org/project/image_widget_crop): Provides the UI for content creators to be able to crop images on demand. It has a hard requirement of the Crop API module.
- [Cropper](https://github.com/fengyuanchen/cropper): A simple jQuery image cropping plugin for added cropping functionality.

**Note**: With the exception of the Crop API module, the other two tools above are optional or can be replaced by other similar tools/modules. Often times the modules you pick for a job depend on your unique requirements. So don't feel you need to use the tools above if you know of other equivalent ones that may do a better job.

## Next key steps to complete

With your tools inplace, you will probably need to complete the following steps:

- Creating crop types
- Create image styles that match your images rendering requirements (aspect ratio, dimentions, crop settings, etc)
- Adding a new effect to image styles that use "Manual crop"
- Create new responsive image style using the `<picture>` element

Crop types: They are in principle similar to image styles. They allow us to setup parameters for how to crop images. In particular, they help us predefine aspect ratios for cropping images. We can create a Square crop type, 3:2 crop type, 16:9 crop type, etc. Important to note, crop types's main job is to define cropping parameters in images, they don't restrict you from manually picking the image focal point.

Image styles: Since we are going to be doing art direction, we will need image styles that allow for custom/manual cropping. We already know how to create image styles, the ones for art direction will follow the behavior of the hero image [on this page](https://www.wwe.com/shows). Notice how the main images are wide when viewed in a large screen, but if you resize your browser or view the site on a mobile device the images become narrow and their aspect ratio changes. See both examples below.

![WWE fighters](https://mariohernandez.io/images/desktop.webp)

![WWE fighters](https://mariohernandez.io/images/mobile.webp)

The examples above shows an image cropped differently for different device sizes. This is Art Direction and is achieved using the `<picture>` element.

## Responsive image styles using `<picture>`

The biggest difference between creating responsive image styles for resolution switching and art direction is the "Breakpoint group" we select. Let's go through the process now:

1. If you haven't already, enabled the Responsive image module
2. Head over to `/admin/config/media/responsive-image-style` to begin creating a responsive image style
3. Click **Add responsive image style**
4. Type **Banner** as the label for the responsive image style. This name is solely based on the image examples above. Feel free to assign any name that makes sense to you.
5. Select **Olivero** from the Breakpoint group dropdown. If you are using a different theme, choose that theme from the dropdown. We will discuss breakpoints in a bit.
6. Scroll down and select a Fallback image style. Pick an image style that could be used on desktop and mobile if all failed with our responsive image style.

### Breakpoints

[Breakpoints](https://www.drupal.org/docs/theming-drupal/working-with-breakpoints-in-drupal) are defined in your theme's `<theme-name>.breakpoints.yml` which is located in the root of your theme. For each device you wish to target you create a breakpoint. Here's an example (I modified the breakpoints slightly for better read):

```yaml
olivero.sm:
  label: Small
  mediaQuery: 'all and (min-width: 500px)'
  weight: 0
  multipliers:
    - 1x
    - 2x
olivero.md:
  label: Medium
  mediaQuery: 'all and (min-width: 960px)'
  weight: 1
  multipliers:
    - 1x
olivero.lg:
  label: Large
  mediaQuery: 'all and (min-width: 1440px)'
  weight: 2
  multipliers:
    - 1x
```

Based on the breakpoints found in `*.breakpoints.yml`, you should see an image similar to the one below which should reflect the same breakpoints.

![Responsive image screen](https://mariohernandez.io/images/responsive-picture.webp)

- Expand any of the breakpoints fieldset and you should see a familiar set of settings. Think of each fieldset you expand here as the `<source>` element inside the `<picture>` element. This is where we choose a list of image styles. Then we repeat the process for each breakpoint. This is where we are telling the browser which images to use for each device size and therefore setting up art direction.
- The sizes field works the same as what we did in resolution switching.
- Once you have completed all yoru configuration, save your changes.

### What's next

Once the responsive image style above is ready to go, You can repeat the process of creating a new view mode for your Media image and configuring it to use the new responsive image style you created above (Banner).

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Train tracks surrounded by tree lines](https://mariohernandez.io/images/thumbs/attributes.webp)





  January 10, 2019



  As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Component Variations
[Skip to content](https://mariohernandez.io/tag/variations/#main-content)

- July 1, 2024



If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

## Component Variations in Storybook
[Skip to content](https://mariohernandez.io/blog/components-variations-in-storybook/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Colourful cacti in a row against a white background](https://mariohernandez.io/images/variations-featured.webp)

[Photo by: Scott Webb](https://unsplash.com/@scottwebb)

One great way to extend your catalog of components is by creating components variations. Variations, in the context of component-driven development, refers to displaying your content in different ways. Variations of a component reduce the need of building new components as well as duplicate code.

In Storybook, variations are known as Stories. In this post I will be using variations and stories interchangeably.

**NOTE**: Although this tutorial might work in a non-Drupal environment, this post is a follow up to previous tutorials that are Drupal-specific. The syntax and plugins used in this tutorial are for a Drupal and Twig environment.

The image below shows how different card stories or variations, can display the same content in many ways.

![Card with multiple variations](https://mariohernandez.io/images/variations.webp)

Fig. 1: Example of multiple variations of a Card component.

## Principles of building components

Sometimes when building a new component, we can't anticipage how the website will evolve with time and therefore we build components the best way possible at the time of building them. As time goes by and requirements change, we realize that we could have done things differently had we known about the requirements changes. Variations of a component give you a chance to alter how something was built without having to change your entire environment of content architecture.

Some time ago I wrote about [principles for building components](https://mariohernandez.io/blog/five-principles-for-building-better-components/). Rather than repeating myself, take a quick look at the article and comeback when you are done. You will find those principles not only apply to building new components, but also to building variations of components.

## Building component variations in Storybook

In Storybook, all variations of a component are referred to as "Stories", hence the name Storybook. A story captures the rendered state of a UI component. Developers write multiple stories per component that describe all the “interesting” states/variations a component can support. Here's a visual that describes the official naming and hierarchy Storybook uses.

![Example of Storybook's sidebar and its elements](https://mariohernandez.io/images/storybook-sidebar.png)

Fig. 2: Storybook's official naming convention and hierarchy.

## The Card component

First off, I am going with the assumption that you already know how Storybook stories are created and that you have a Storybook instance running. If that's not the case, [follow these instructions](https://mariohernandez.io/blog/migrating-from-patternlab-to-storybook/) to get your Storybook environment up and running. You will need [NodeJS 20+](https://nodejs.org/en/download/prebuilt-installer) and [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed on your system to follow along.

Next, let's look at the Card variations we will be creating in this post.

![Example of component variations](https://mariohernandez.io/images/stories.webp)

Fig. 3: Example of the different card variations we will build in this post.

The image above shows the Card stories or variations we will build. From top-left to right:

- Default or Stacked
- Light CTA
- Small
- No image
- Horizontal

In the interest of time, I have a repo that already includes the base of the Card component so you can focus only on building the variations.

1. [Clone the repo](https://github.com/mariohernandez/storybook/tree/variations) which already contains a project to work with and the Card component.

If you already have a working Storybook environment, copy the **components** directory ( `src/components`), from the newly cloned repo, into your project.

2. Switch to the **variations** branch by running `git checkout variations`

3. Run the project as instructed in the **README** in the repo


### Methods for creating stories

In this tutorial, we will use two methods for creating variations in Storybook:

1. Doing all the work directly in `card.stories.jsx` to change fields values or hide/show fields, depending on the story requirements.
2. Using additional `*.yml` files to assist with the same fields updates above.

We will be using the first method above for all stories except the Card horizontal. The original Card component was built with Twig, but for the variations we will be working exclusively in `card.stories.jsx`. The current version of the card story looks like this:

```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
  render: (args) => parse(card(args)),
};

export const Card = {
  name: 'Card stacked',
  args: { ...data },
};

export default component;
```

Let me explain the snippet above as this is the foundation for all the variations we will be creating.

- First we do a series of imports to collect all the pieces needed to build components and stories:

  - **import parse**: This is a react plugin which allows us to parse the HTML in our stories into React code Storybook can understand.
  - **import card**: It imports all the code and logic inside our component's twig template.
  - **import data**: Pulls in all the data from the component's **.yml** file so we can use it as React args.
  - **import './card.css'**: Imports all CSS styles so Storybook can displayed the styled components and stories. Inside card.css, we already have styles for each of the stories we will be building.
- Next, we set a new configuration object called **component**, which will serve as the default instance of the card component. This is an arbitrary name and can be anything that makes sense to you.

Inside the _component_ object we have two properties: **title** and **render**.

  - The **title** property's value determines the location and name of the component within Storybook's hierarchy. In this example the Card component will be located under the **Molecules** folder. See Fig.2 above for details about the hierarchy.
  - The **render** property is what handles the rendering of the component by using the **card** and **data** objects we imported earlier, and combined together (Twig and YML), they render the full component.
- Next, we create our first story by defining a new configuration object called **Card**, in which we pass a name (Card stacked), for the story and the data variable as args.

- Finally, we export the _component_ object as default, which is a React requirement.


If Storybook is running, you should see the new variation which will display the Card stacked. If you need to run Storybook for the first time, in your command line navigate to the storybook directory and run these commands:

**IMPORTANT:** You need [NodeJS 20+](https://nodejs.org/en/download/prebuilt-installer) and [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed in your system.

```bash
nvm install
npm install
npm run build
npm run storybook
```

If all goes well, Storybook should be running showing the Card stacked story under the Molecules folder.

### Preview of Card stacked

![Card with an image, teaser and CTA](https://mariohernandez.io/images/blog-images/card.webp)

Fig. 4: Example of the Card stacked from which other variations will originate.

## Card with light CTA

- Inside `card.stories.jsx`, and directly after the closing of the **Card** object (around line 17), add the following object to create a new story:

```js
export const CardLightCta = {
  ...Card,
  name: 'Card light CTA',
  args: {
    ...data,
    cta: {
      modifier: 'button--light',
      text: 'Try it now',
      url: 'https://mariohernandez.io',
    }
  },
};
```

Let's go over the snippet above:

- We start by creating and exporting a new object called **CardLightCta**. This is a new story. This name is arbitrary but it should be unique for each story.
- Next, we pass the default Card story ( `...Card`), as a spread operator, so the new story inherits all attributes from the original card.
- The **name** property allows for each story to have a unique name which will appear directly under the component name in Storybook's sidebar (see Fig. 2 at the top for details).
- Finally, we open the **args** object where we will update some of the fields to achieve the desired variation:
  - We pass the `...data` object as a spread operator to individually update the fields that need updating.
  - Since the only difference between this variation and the original card is that the CTA is light, we need to define the `cta` object and provide each of its properties with the appropriate values:
    - First as a modifier class we pass `button--light`. This is a predefined modifier class which will turn the CTA white.
    - Next, we type the text that will become the CTA's label, **Try it now**.
    - And finally, we pass a URL to the CTA.

### Preview of Card with light CTA

![Card component with light CTA](https://mariohernandez.io/images/blog-images/card-light.webp)

Fig. 5: Example of a Card component with a light CTA.

## Card small

This next story or variation is the small version of the card. The difference between this card and the original one is that this one has no CTA, and its size is ...well, small 🙂

Same as before, add the following snippet to `card.stories.jsx` directly after the closing of the card with light CTA story:

```js
export const CardSmall = {
  ...Card,
  name: 'Card small',
  args: {
    ...data,
    modifier: 'card--small',
    cta: '',
  },
};
```

This story is very similar to the previous one from the updates needed point of view. As you can see, the only thing we are doing is passing `card--small` as a modifier class to the entire component, and since we don't need a button or CTA, we are defining the `cta` object but its value is empty which will suppress it from printing on the page. If you notice in `card.twig`, we use a conditional that checks if the `cta` object exists, otherwise don't print any of the markup starting with the `footer` tag.

### Preview of small card

![Card component in small format](https://mariohernandez.io/images/blog-images/card-small.webp)

Fig. 6: Example of a small card.

## Card with no image

- You know the drill, inside `card.stories.jsx`, directly after the closing of the previous story, add the following snippet:

```js
export const CardNoImage = {
  ...Card,
  name: 'Card no image',
  args: {
    ...data,
    modifier: 'card--no-image',
    image: '',
  },
};
```

Even more similar to the previous story, this variation only varies from the original story as follows:

- We are passing a modifier class to the component, `card--no-image`.
- Since we want no image, we define the `image` object but leave its value empty.

### Preview of card without image

![Card component without image](https://mariohernandez.io/images/blog-images/card-no-image.webp)

Fig. 6: Example of a card without image.

## Card horizontal

The final variation is the Card horizontal. For all previous variations we have done all the changes inside `card.stories.jsx`, but for this one, we will resource to using an alternative `*.yml` file. Why you may ask, well, this variation requires a bit more changes and making all those changes inside the stories.jsx file may look a little too busy and not as easy to read the code. That's pretty much the only reason for me to use this method, to keep the code in my stories clean and more readable.

You may have noticed in the project you cloned; inside the **card** directory we have a file called **card-horizontal.yml**. This file is almost identical to the original **card.yml** as far as the fields in it. The only difference is that some of the fields have unique content or no content at all. Let's look at the file before starting.

```yml
---
modifier: 'card--horizontal'
image: <img src="/card-square.jpg" alt="Palm trees near city buildings" />
title:
  level: 2
  modifier: 'card__title'
  text: 'Step outside to the outdoors'
  url: 'https://mariohernandez.io'
teaser: 'With spring in full bloom, the weather could not be better to take a walk outside and enjoy the beauty of nature.'
cta: ''
```

- The **modifier** field has a specific CSS class we will pass: `card--horizontal`. This class will allow us to change the layout of the card to be in horizontal direction.
- The **image** field uses a different image altogether. The image has been cropped in square aspect ratio for better fitting of this variation.
- Finally, the **cta** field is empty, meaning we don't want to print a button on this variation.

Maybe I exaggerated when I said that this variation has too many changes, but my point is that in cases when your stories do require a lot of changes, using a different **yml** file may help you keep your stories.jsx file a lot neater and cleaner.

- The first step is one we haven't done before. Inside `card.stories.jsx` somewhere around line 5 (after the last import in the file), add the following import:

```js
import dataHorizontal from './card-horizontal.yml';
```

- Next, the way we've done before, inside `card.stories.jsx` add the following object directly after the closing of the last story:

```js
export const CardHorizontal = {
  ...Card,
  name: 'Card horizontal',
  args: {
    ...dataHorizontal,
  },
};
```

- First we imported a new data file called `card-horizontal.yml` and assigned the object name of `dataHorizontal`. By doing this, any changes we make inside **card-horizontal.yml** will be reflected in Storybook.
- Lastly, we repeat the same process as the previous variations but this time, inside the **args** object, we pass the new object we created in the previous step ( `...dataHorizontal`), rather than `...data`.
- That's it. Our story file is nice and clean. Since we handled all the fields updates in `card-horizontal.yml`, the `.jsx` file is simply consuming its data to achieve the desired variations.

### Preview of horizontal card

![Card component in horizontal mode](https://mariohernandez.io/images/blog-images/card-horizontal.webp)

Fig. 6: Example of a card in horizontal layout.

Now that we have covered both methods for creating variations, know that neither method is better than the other. The decision to use one over the other boils down to personal preferences and sometimes which makes the most sense to simplify the process.

## End result

At the end of this process, your `card.stories.jsx` should look like this:

```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import dataHorizontal from './card-horizontal.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
  render: (args) => parse(card(args)),
};

export const Card = {
  name: 'Card stacked',
  args: { ...data },
};

export const CardLightCta = {
  ...Card,
  name: 'Card light CTA',
  args: {
    ...data,
    cta: {
      modifier: 'button--light',
      text: 'Try it now',
      url: 'https://mariohernandez.io',
    }
  },
};

export const CardSmall = {
  ...Card,
  name: 'Card small',
  args: {
    ...data,
    modifier: 'card--small',
    cta: '',
  },
};

export const CardNoImage = {
  ...Card,
  name: 'Card no image',
  args: {
    ...data,
    modifier: 'card--no-image',
    image: '',
  },
};

export const CardHorizontal = {
  ...Card,
  name: 'Card horizontal',
  args: {
    ...dataHorizontal,
  },
};

export default component;
```

## In closing

This only touches the surface of creating stories, but it is refreshing to know that no matter how complex your components may be, when it comes to having Storybook parse them, the React code in your stories is very minimum. Certainly, there are exceptions, but as I complete the migration of our large Drupal project with many components, some of which are pretty large and complex, we still were surprised how little React code was required of us to write because all the heavy lifting is being done by Storybook, with its contrib extensions, as well as Twig itself.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Variations](https://mariohernandez.io/tag/variations/)
- [Storybook](https://mariohernandez.io/tag/storybook/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- ![Developers looking at computer screen](https://mariohernandez.io/images/thumbs/training-workshop.webp)





  May 20, 2018



  For the past couple of years I have been running private and community driven training workshops and I'd like to share my experiences and lessons learned.

- ![Person taking a picture with their phone](https://mariohernandez.io/images/thumbs/crop-thumb.webp)





  August 18, 2024



  Cropping images in Drupal is a great way to ensure your images always look their best.


 [See more posts](https://mariohernandez.io/blog)

## Effective Training Workshop
[Skip to content](https://mariohernandez.io/blog/our-best-training-yet/#main-content) [Drupalcon](https://mariohernandez.io/tag/drupalcon/)

![Team members conducting training workshop](https://mariohernandez.io/images/students.webp)

For the past few years we've been working on a training curriculum around [Component Based Development](https://events.drupal.org/seattle2019/training/component-based-development) and every time we finish updating it for an upcoming event we feel really good about it and think we finally got it. In reality, a training curriculum for a topic so complex as Component Development is probably never finished.

After BADCamp's training workshop last year we thought we were done updating the training material and we felt it was so good that it would carry us all the way to DrupalCon Seattle 2019. We could not have been more wrong. Soon after BADCamp we made the decision to move from [KSS Node](https://github.com/kss-node/kss-node) to [Pattern Lab](https://patternlab.io/) for handling our pattern's workflow and living styleguide. This meant our entire training material needed to be updated in time for DrupalCon. Needless to say we spent months ensuring the material was current, relevant and effective.

DrupalCon Seattle was a total success. Our training sold out in about two weeks and end up with almost 50 people in attendance which is probably a record for us. But with more students the chances of more issues or something going wrong increase. We make a big effort to ensure we provide an automated environment for student to use. This allows us provide all tools needed during training pre-configued and tested ensuring a more predictable and consistent behavior by students' systems. However, there are always cases in which a student decides not to use our environment and either due to technical skills or strict restrictions on their systems they need to use a workflow we have not tested.

This was certainly the case at DrupalCon and we had to find ways to help those students to be able to follow along during training.

One way to help people with their local setup is by conducting what we call "Office Hours". We reserve an hour or two weeks before the training where anyone who needs assistance with their local environment can join us online and we attempt to get them up and running. We helped several individuals this way. Although it is more work for us it allows us to address any issues off hours rather than spending valuable training time fixing computer problems.

![Team members standing infront of large Drupal Icon](https://mariohernandez.io/images/team.jpg)

The training was engaging and we received great feedback. Our curriculum, although not perfect, is relevant and well received. Having done this a few times at small and large events gives us confidence and makes it easier next time we do it.

Our team is dedicated and passionate about training and this would not be possible without them. Especial thanks go to [Eric Huffman](https://www.mediacurrent.com/who-we-are/team/eric-huffman/) who has done most of the heavy lifting with the local environment automation. [Kelly Dassing](https://www.mediacurrent.com/who-we-are/team/kelly-dassing/), who as a Director of Project Management provides a unique perspective to those in attendance who may not be developers. [Tobias Williams](https://www.mediacurrent.com/who-we-are/team/tobias-williams/) who is an all around great FE develper and Engineer, and [Mark Casias](https://www.mediacurrent.com/who-we-are/team/mark-casias/), who is able to answer the hard Back-end question that the rest of the team may not be as proficient as he is.

Should you have training needs please reach out and we would be happy to put together a curriculum that fits your specific needs or that of your team.

For a more in-depth look at how we prepare for a training workshop ready my blog post on [Planning for an Effective Training Workshop](https://www.mediacurrent.com/blog/planning-effective-training/).

Until next time ... Cheers!.

Tags for this post

- [Drupalcon](https://mariohernandez.io/tag/drupalcon/)
- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.


 [See more posts](https://mariohernandez.io/blog)

## Training Workshop Tips
[Skip to content](https://mariohernandez.io/blog/running-a-training-workshop/#main-content) [Training](https://mariohernandez.io/tag/training/)

![Developers looking at computer screen](https://mariohernandez.io/images/training-workshop.webp)

[Photo by: Unsplash.com](https://unsplash.com/)

**Update 1-10-19**

I wrote an extended version of this post at [Mediacurrent's blog](https://www.mediacurrent.com/blog/planning-effective-training/), check it out.

* * *

As long as I can remember I've enjoyed public speaking. This doesn't mean I am good at it, it simply means I enjoy it. School events, class president, my jobs, etc., they all taught me great lessons about public speaking. So when I started as a developer, sharing my knowledge with others at conferences or meetups came pretty natural.

I'd like to clarify, that after years of doing talks and other methods of public speaking, I am still terrified. I get nervous, my hands sweat, my legs shake, and my voice gets weird. Basically what I am trying to say is that I'm not an expert by any means, but I overcome the phobia of public speaking by doing it frequently.

For many years I have speaking at conferences, but in the past few years I started conducting longer workshops. I first started doing online workshops, which have their pros and cons. While they don't put you face to face with your audience, it also does not give you a good sense for how effective your training is because you can't see people reactions. For this reason I prefer to do face-to-face training.

As part of my job I conduct periodic Front-End training workshops for clients and recently I started conducting all-day training workshops at conferences. I really enjoy it and I'ld like to share some of the lessons learned.

## Picking a topic

Ideally you want to pick a topic you feel 100% confident about. I have learned that people attending your training or talks welcome any information you can share no matter how simple or elementary it may feel to you. Don't ever think what you know may not be of interest to others because you would be wrong.

Lately I have been challenging myself a little more when picking a topic to train about. While is good to know the topic well, it is also extremely rewarding to pick a topic you'd like to learn more about. This may feel contrary to what I said ealier but hear me out. When you decide to train on a topic, you will spend a lot of time preparing, training, testing and reharsing. This is exactly how you learn a new skill. I can't tell you how many times I come out of training I did knowing more about the topic than before and also learning from people who attended the training. If you want to learn a new skill, teaching others about it could be the best way for you to learn it.

## Preparing for the training

Everyone has their own style for teaching or doing a presentation. Some people like to use slides and screenshots, others show recordings of their project or code. My personal preference is to build a working prototype. This to me presents many advantages, but it also means you will spend more time getting ready.

My training workshops usually include very little slides because the majority of the training will be spent writing actual code and building the prototype during the training.

Here's my typical process for preparing for a training workshop:

- Identify a prototype that serves the purpose of the training. If I am teaching a workshop about component based development I would normally pick something that involves the different aspects of component based development (attoms, nested components, reusable components, etc.)

- Build the prototype upfront to ensure you have a working model to demo and go by.

- Once prototype is built, create a public repo so you can share the working prototype

- Write step-by-step instructions to building the prototype. Normally I would break the prototype down into small components, [atoms](http://bradfrost.com/blog/post/atomic-web-design/#atoms).

- Test, test and test. You want to make sure yoru audience will not run insto unexpected issues while following your instructions. For this reason you need to make sure you test your instructions. Ask a friend or colleague to go through each of your excercises to ensure thing work as expected.

- Provide a pre-training evaluation. A quick set of questions that will give you an idea of people's skills level as well as environment (Linux, Widows, OSX). This will help you plan ahead of time.

- Build a simple slide deck for introductions and agenda purposes. Mainly I move away from slides as soon as introduction and agenda is done. The rest of the training is all hands on.


## Communicate with your audience ahead of time

As you will learn, one thing that can really kill a lot of the time during training is assisting people with their local environment setup. I have conducted training workshops where I've spent half the time helping people with their environment. For this reason, nowadays I communicate with the people ahead of time to ensure everyone's local environment is ready to go.

I normally make myself available once or twice in an evening through a google hangout to assit anyone who may need help. I also provide detailed instructions on how to get their local environment ready. This could save you a lot of time during training. In addition, for those who did spend the time on getting their environment ready, it's not fair that they have to be held back because someone did not make an effort to setup their environment.

I make myself available ahead of training but if someone is still having issues because of neglect, I don't hold the rest of the class back. I try to help them but at some point I move on.

## During training

If possible, get help from someone who is also well-versed with the topic so they can assist you help people who may get stuck. Nothing is more frustrating that havign to break the flow of the training to help people who get stuck. Having someone else help you with this allows you to continue with the training and not have everyone loose momentum.

## Finally

Enjoy yourself. Make sure you and your audience have fun. If you show excitement in what you are doing people will get excited as well.

Tags for this post

- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

- ![Four black wall arts on brown wall](https://mariohernandez.io/images/thumbs/frames.webp)





  December 13, 2020



  Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

- ![Train tracks surrounded by tree lines](https://mariohernandez.io/images/thumbs/attributes.webp)





  January 10, 2019



  As a Front-End developer, working with Twig and Drupal is a pretty liberating thing which presents all kinds of posibilies, but it can also open the doors to breaking things Drupal counts on.

- ![Person taking a picture with their phone](https://mariohernandez.io/images/thumbs/crop-thumb.webp)





  August 18, 2024



  Cropping images in Drupal is a great way to ensure your images always look their best.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Component Integration
[Skip to content](https://mariohernandez.io/blog/demystifying-components-integration-with-drupal/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Image of a net showing interlaced mesh](https://mariohernandez.io/images/integrate.webp)

[Photo by: JJ ying](https://unsplash.com/@jjying)

Component-based development is something I have been doing for at least five years and it is incredible that I still find myself learning something new every time I work on a new project. In addition to development, I write training curriculums on the topic and this gives me more exposure to this topic than most people. You’d think by now I should have learned all there is to learn about components and integrating them with Drupal, but that’s not the case, and I love it because I alway look forward to learning something new.

## The inspiration for this post

I came across an outstanding blog series about _Building with Emulsify Part 3: Component Complexity_ by [Evan Willhite of Four Kitchens](https://www.fourkitchens.com/blog/development/building-emulsify-part-3-component-complexity/).

## It's not you, it's me

I’d say I’m about 90% onboard with how Evan approaches component integration, but the part I am not a fan of is writing preprocess functions to achieve full integration, mainly because I am not well-versed in preprocess functions or PHP in general. There is absolutely nothing wrong with this, but what if you are someone like me who is not comfortable with preprocess functions or custom modules? So I decided to use most of the work Evan put together, but will perform the integration slightly differently so we only work with Twig and not PHP.

Both instances for which PHP code was required in Evan’s post were the result of using a Paragraph type to reference nodes. My approach will be to eliminate the paragraph type and work directly with the node entity.

Let’s start. I will pick up from **Architecture** since everything prior to this is typically the approach I take as well.

## Architecture

We want administrators to create Nodes of any type and using a Display View Mode we can automatically display them using the card component. The one difference for me is that I don’t have a card variation.

## Passing data between entities

Following Evan’s instructions, create a new Display view mode called Card. Here's another minor difference in that my Card uses an image field and date field in addition to title, body, and link fields. Here’s what the card looks like.

![Woman smiling while looking up](https://mariohernandez.io/images/card.png)

In the Card display view mode of an Article content type, ensure Body and Image are available. All other fields should be placed under Disabled. The Title and Date fields don’t display in the Manage Display screens, but they are always available in all Entity templates.

## Integrating the Card component within a Node template

Just like in Evan’s post, we still need to associate a Node template with our Card. For this we will use the same template suggestion as Evan, `node--card.html.twig`.

```php

{% include '@molecules/card/card.twig' with {
    'image': content.field_image,
    'date': date,
    'title': label,
    'body': content.body,
    'link_url': url,
    'link_text': "Read the article",
  } only
%}

```

## Displaying a list of cards with Views

Now that the Card component has been integrated with Drupal, let’s create a simple view to display a collection of nodes displayed as Cards.

The views' settings can be seen below with description of the important configurations to note.

![Screenshot of settings for Latest Articles view](https://mariohernandez.io/images/view.png)

A few things about the view:

- It’s called Latest Articles
- The page built by the view can be viewed at /blog
- Rather than using fields it uses the Card view mode we created earlier. This is the biggest advantage of integrating the Card component with the Entity, any time a node is displayed using the Card Display View Mode, the node will be displayed automatically as a Card.
- It only pulls nodes of type Article

With some minor CSS the articles would look like this:

![List of latest articles shown as cards](https://mariohernandez.io/images/latestarticles.png)

### In closing

There will be times when writing a preprocess will be required based on the requirements, but whenever possible I’d like to avoid it.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)
- [Integration](https://mariohernandez.io/tag/integration/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- ![Watter color mountains](https://mariohernandez.io/images/thumbs/media.webp)





  December 1, 2023



  In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.


 [See more posts](https://mariohernandez.io/blog)

## Drupal and Storybook Integration
[Skip to content](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/#main-content) [Storybook](https://mariohernandez.io/tag/storybook/)

![Overlapped mountains painted with water colors](https://mariohernandez.io/images/mountains.webp)

[Photo by: Alex Shutin](https://unsplash.com/@fiveamstories)

Hey you're back! 🙂 In the [previous post](https://mariohernandez.io/blog/migrating-from-patternlab-to-storybook) we talked about how to build a custom Drupal theme using Storybook as the design system. We also built a simple component to demonstrate how Storybook, using custom extensions, can understand Twig. In this post, the focus will be on making Drupal aware of those components by connecting Drupal to Storybook.

If you are following along, we will continue where we left off to take advantage of all the prep work we did in the previous post. Topics we will cover in this post include:

1. What is Drupal integration
2. Installing and preparing Drupal for integration
3. Building components in Storybook
4. Building a basic front-end workflow
5. Integrating Drupal with Storybook components

## What is Drupal integration?

In the context of Drupal development using the component-driven methodology, Drupal integration means connecting Drupal presenter templates such as node.html.twig, block.html.twig, paragraph.html.twig, etc. to Storybook by mapping Drupal fields to component fields in Storybook. This in turn allows for your Drupal content to be rendered wrapped in the Storybook components.

The advantage of using a design system like Storybook is that you are in full control of the markup when building components, as a result your website is more semantic, accessible, and easier to maintain.

## Building more components in Storybook

The title component we built in the previous post may not be enough to demonstrate some of the advanced techniques when integrating components. We will build a larger component to put these techniques in practice. The component we will build is called **Card** and it looks like this:

![Palm trees in front of city buildings](https://mariohernandez.io/images/storybook-card.webp)

When building components, I like to take inventory of the different parts that make up the components I'm building. The card image above shows three parts: An image, a title, and teaser text. Each of these parts translates into fields when I am defining the data structure for the component or building the entity in Drupal.

## Building the Card component

- Open the Drupal site in your code editor and within your code editor navigate to the **storybook** theme ( `web/themes/custom/storybook`)
- Create two new directories inside _components_ called **01-atoms** and **02-molecules**
- Inside **02-molecules** create a new directory called **card**
- Inside the **card** directory add the following four files:
  - **card.css**: component's styles
  - **card.twig**: component's markup and logic
  - **card.stories.jsx**: Storybook's story
  - **card.yml**: component's demo data
- Add the following code snippet to **card.yml**:

```yml
---
modifier: ''
image: <img src="https://source.unsplash.com/cHRDevKFDBw/640x360" alt="Palm trees near city buildings" />
title:
  level: 2
  modifier: ''
  text: 'Tours & Experiences'
  url: 'https://mariohernandez.io'
teaser: 'Step inside for a tour. We offer a variety of tours and experiences to explore the building’s architecture, take you backstage, and uncover the best food and drink. Tours are offered in different languages and for different levels of mobility.'
```

- Add the following to **card.twig** to provide the markup and logic for the card:

```php
{{ attach_library('storybook/card') }}

<article class="card{{ modifier ? ' ' ~ modifier }}{{- attributes ? ' ' ~ attributes.class -}}" {{- attributes ? attributes|without(class) -}}>
  {% if image %}
    <div class="card__image">
      <figure>
        {{ image }}
      </figure>
    </div>
  {% endif %}

  <div class="card__content">
    {% if title %}
      {% include "@atoms/title/title.twig" with {
        'level': title.level,
        'modifier': title.modifier,
        'text': title.text,
        'url': title.url,
      } only %}
    {% endif %}

    {% if teaser %}
      <p class="card__teaser">{{ teaser }}</p>
    {% endif %}
  </div>
</article>
```

Code snippet for building card

- Copy and paste [these styles](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/components/02-molecules/card/card.css) into **card.css**.

- Finally, let's create the Storybook card story by adding the following to **card.stories.jsx**:


```js
import parse from 'html-react-parser';

import card from './card.twig';
import data from './card.yml';
import './card.css';

const component = {
  title: 'Molecules/Card',
};

export const Card = {
  render: (args) => parse(card(args)),
  args: { ...data },
};

export default component;
```

Let's go over a few things regarding the code above:

- The data structure in **card.yml** reflects the data structure and type we will use in Drupal.
  - The image field uses the entire `<img>` element rather than just using the image **src** and **alt** attributes. The reason for this is so when we get to Drupal, we can use Drupal's full image entity. This is a good practice for caching purposes.
- **card.twig** reuses the title component we created in the previous post. Rather than build a title from scratch for the Card and repeat the code we already wrote, reusing the existing components keeps us DRY.
- **card.stories.jsx** in the Storybook story for the Card, notice how the code in this file is very similar to the code in the **title.stories.jsx**. Even with complex components, when we port them into Storybook as stories, most times the code will be similar as what you see above because Storybook is simply parsing whatever is in **.twig** and **.yml** files. There are exceptions when the React code may have extra parameters or logic which typically happens when we're building stories variations. Maybe a topic for a different blog post. 😉

### Before we preview the Card, some updates are needed

You may have noticed in **card.twig** we used the namespace **@atoms** when nesting the **title** component. This namespace does not exist, and we need to create it now. In addition, we need to move the **title** component into the **01-atoms** directory:

- In your code editor or command line (whichever is easier), move the **title** directory into the **01-atoms** directory
- In your editor, open **title.stories.jsx** and change the line

**title: 'Components/Title'** to **title: 'Atoms/Title'**. This will display the title component within the Atoms category in Storybook's sidebar.
- Rather than have you make individual changes to **vite.config.js**, let's replace/overwrite all its content with the following:

```js
/* eslint-disable */
import { defineConfig } from 'vite'
import yml from '@modyfi/vite-plugin-yaml';
import twig from 'vite-plugin-twig-drupal';
import { join } from 'node:path'
export default defineConfig({
  root: 'src',
  publicDir: 'public',
  build: {
    emptyOutDir: true,
    outDir: '../dist',
    rollupOptions: {
      input: {
        'reset': './src/css/reset.css',
        'styles': './src/css/styles.css',
        'card': './src/components/02-molecules/card/card.css',
      },
      output: {
        assetFileNames: 'css/[name].css',
      },
    },
    sourcemap: true,
  },
  plugins: [\
    twig({\
      namespaces: {\
        atoms: join(__dirname, './src/components/01-atoms'),\
        molecules: join(__dirname, './src/components/02-molecules'),\
      },\
    }),\
    // Allows Storybook to read data from YAML files.\
    yml(),\
  ],
})
```

Let's go over some of the most noticeable updates inside **vite.config.js**:

- We have defined a few things to improve the functionality of our Vite project, starting with using **src** as our app root directory and **public** for publicDir. This helps the app understand the project structure in a relative manner.

- Next, we defined a Build task which provides the app with defaults for things like where should it compiled code to (i.e. **/dist**), and [`rollupOptions`](https://rollupjs.org/configuration-options/) for instructing the app which stylesheets to compile and what to call them.

- As part of the `rollupOptions` we also defined two stylesheets for global styles ( **reset.css** and **styles.css**). We'll create these next.

**Important**: This is as basic as it gets for a build workflow and in no way would I recommend this be your front-end build workflow. When working on bigger projects with more components, it is best to define a more robust and dynamic workflow that provides automation for all the repetitive tasks performed on a typical front-end project.

- Under the Plugins section, we have defined two new namespaces, **@atoms** and **@molecules**, each of which points to specific path within our _components_ directory. These are the namespaces Storybook understands when nesting components. You can have as many namespaces as needed.


### Adding global styles

- Inside **storybook/src**, create a new directory called **css**
- Inside the **css** directory, add two new files, **reset.css** and **styles.css**
- Here are the styles for [reset.css](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/css/reset.css) and [styles.css](https://raw.githubusercontent.com/mariohernandez/storybook/card/src/css/styles.css). Please copy them and paste them into each of the stylesheets.
- Now for Storybook to use _reset.css_ and _styles.css_, we need to update **/.storybook/preview.js** by adding these two imports directly after the current imports, around line 4.

```js
import '../dist/css/reset.css';
import '../dist/css/styles.css';
```

### Previewing the Card in Storybook

Remember, you need NodeJS v20 or higher as well as NVM installed on your machine.

- In your command line, navigate to the **storybook** directory and run:

```shell
nvm install
npm install
npm run build
npm run storybook
```

A quick note about the commands above:

- **nvm install** and **npm install** are typically only done once in your app. These commands will first install and use the node version specified in **.nvmrc**, and will install all the required node packages found in **package.json**. If you happen to be workign on another project that may use a different version of node, when you comeback to the Storybook project you will need to run **nvm use** in order to resume using the right node version.
- **npm run build** is usually only ran when you have made configuration changes to the project or are introducing new files.
- **npm run storybook** is the command you will use all the time when you want to run Storybook.

After Storybook launches, you should see two story categories in Storybook's sidebar, **Atoms** and **Molecules**. The title component should be under Atoms and the Card under Molecules. See below:

![Palm trees near city buildings](https://mariohernandez.io/images/card-shot.webp)

## Installing Drupal and setting up the Storybook theme

We have completed all the prep work in Storybook and our attention now will be all in Drupal. In the previous post all the work we did was in a standalone project which did not require Drupal to run. In this post, we need a Drupal site to be able to do the integration with Storybook. If you are following along and already have a Drupal 10 site ready, you can skip the first step below.

1. Build a basic Drupal 10 website ( [I recommend using DDEV](https://ddev.readthedocs.io/en/stable/users/quickstart/#drupal)).
2. Add the **storybook** theme to your website. If you completed the excercise in the previous post, you can copy the theme you built into your site's **/themes/custom/** directory, Otherwise, you can clone [the previous post repo](https://github.com/mariohernandez/storybook) into the same location so it becomes your theme. After this your theme's path should be **themes/custom/storybook**.
3. No need to enable the theme just yet, we'll come back to the theme shortly.
4. Finally, create a new Article post that includes a title, body content and an image. We'll use this article later in the process.

## Creating Drupal namespaces and adding Libraries

Earlier we created namespaces for Storybook, now we will do the same but this time for Drupal. It is best if the namesapces' names between Storybook and Drupal match for consistency. In addition, we will create Drupal libraries to allow Drupal to use the CSS we've written.

- Install and enable the [Components](https://www.drupal.org/project/components) module
- Add the following namespaces at the end of **storybook.info.yml** (mind your indentation):

```yml
components:
  namespaces:
    atoms: src/components/01-atoms
    molecules: src/components/02-molecules
```

- Replace all content in **storybook.libraries.yml** with the following:

```yml
global:
  version: VERSION
  css:
    base:
      dist/css/reset.css: {}
      dist/css/styles.css: {}

card:
  css:
    component:
      dist/css/card.css: {}

```

- Let's go over the changes to both, **storybook.info.yml** and **storybook.libraries.yml** files:

  - Using the Components module we created two namespaces: **@atoms** and **@molecules**. Each namespace is associated with a specific path to the corresponding components. This is important because Drupal by default only looks for Twig templates inside the **/templates** directory and without the Components module and the namespaces it would not know to look for our component's Twig templates inside the components directory.
  - Then we created two Drupal libraries: **global** and **card**. The Global library includes two CSS stylesheets (reset.css and styles.css), which handle base styles in our theme. the Card library includes the styles we wrote for the Card component. If you noticed, when we created the Card component, the first line inside **card.twig** is a Twig attach library statement. Basically **card.twig** is expecting a Drupal library called **card**.

## Turn Twig debugging on

All the pieces are in place to Integrate the Card component so Drupal can use it to render article nodes when viewed in teaser view mode.

- The first thing we need to do to begin the integration process is to determine which Twig template Drupal uses to render article nodes in teaser view mode. One easy way to do this is by turning Twig debugging on. This used to be a complex configuration but starting with Drupal 10.1 you can now do it directly in Drupal's UI:

  - While logged in with admin access, navigate to `/admin/config/development/settings` on your browser. This will bring up the Development settings page.
  - Check all the boxes on this page and click **Save settings**. This will enable Twig debugging and disable caching.
  - Now navigate to `/admin/config/development/performance` so we can turn CSS and JS aggregation off.
  - Under **Bandwidth optimization** cleared the two boxes for CSS and Javascript aggregation then click on **Save configuration**.
  - Lastly, click the **Clear all caches** button. This will ensure any CSS or JS we write will be available without having to clear caches.
- With Twig debugging on, go to the homepage where the Article we created should be displayed in teaser mode. If you right-click on any part of the article and select **inspect** from the context menu, you will see in detail all the templates Drupal is using to render the content on the current page. See example below.

**NOTE**: I am using a new basic Drupal site with Olivero as the default theme. If your homepage does not display Article nodes in teaser view mode, you could create a simple Drupal view to list Article nodes in teaser view mode to follow along.


![Code inspector showing Drupal debugging](https://mariohernandez.io/images/storybook-debug.webp)

In the example above, we see a list of templates that start with **node...**\*. These are called template suggestions and are the names Drupal is suggesting we can assign our custom templates. The higher the template appears on the list, the more specific it is to the piece of content being rendered. For example, changes made to **_**node.html.twig**_** would affect ALL nodes throughout the site, whereas changes made to **node--1--teaser.html.twig** will only affect the first node created on the site but only when it's viewed in **teaser** view mode.

Notice I marked the template name Drupal is using to render the Article node. We know this is the template because it has an **X** before the template name.

In addition, I also marked the template path. As you can see the current template is located in **core/themes/olivero/templates/content/node--teaser.html.twig**.

And finally, I marked examples of attributes Drupal is injecting in the markup. These attributes may not always be useful but it is a good practice to ensure they are available even when we are writing custom markup for our components.

## Create a template suggestion

By looking at the path of the template in the code inspector, we can see that the original template being used is located inside the Olivero core theme. The debugging screenshot above shows a pretty extensive list of templates suggestions, and based on our requirements, copying the file **node--teaser.html.twig** makes sense since we are going to be working with a node in teaser view mode.

- Copy **/core/themes/olivero/templates/content/node--teaser.html.twig** into your theme's **/storybook/templates/content/**. Create the directory if it does not exist.
- Now rename the newly copied template to **node--article--teaser.html.twig**.
- Clear Drupal's cache since we are introducing a new Twig template.

As you can see, by renaming the template **node--article--teaser** (one of the names listed as a suggestion), we are indicating that any changes we make to this template will only affect nodes of type Article which are displayed in Teaser view mode. So whenever an Article node is displayed, if it is in teaser view mode, it will use the Card component to render it.

The template has a lot of information that may or may not be needed when integrating it with Storybook. If you recall, the Card component we built was made up of three parts: an image, a title, and teaser text. Each of those are Drupal fields and these are the only fields we care about when integrating. Whenever when I copy a template from Drupal core or a module into my theme, I like to keep the comments on the template untouched. This is helpful in case I need to reference any variables or elements of the template.

## The actual integration ...Finally

1. Delete everything from the newly copied template except the comments and the **classes** array variable
2. At the bottom of what is left in the template add the following code snippet:

```php
{% set render_content = content|render %}

{% set article_title = {
    'level': 2,
    'modifier': 'card__title',
    'text': label,
    'url': url,
  }
%}

{% include '@molecules/card/card.twig' with {
  'attributes': attributes.addClass(classes),
  'image': content.field_image,
  'title': article_title,
  'teaser': content.body,
} only %}
```

- We set a variable with `content|render` as its value. The only purpose for this variable is to make Drupal aware of the entire content array for caching purposes. [More info here](https://www.previousnext.com.au/blog/ensuring-drupal-8-block-cache-tags-bubble-up-page).
- Next, we setup a variable called **article\_title** which we structured the same way as data inside **card.yml**. Having similar data structures between Drupal and our components provides many advantages during the integration process.
  - Notice how for the **text** and **url** properties we are using Drupal specific variables ( **label** and **url**), accordingly. If you look in the comments in _node--article--teaser.html.twig_ you will see these two variables.
- We are using a Twig **include** statement with the **@molecules** namespace to nest the Card component into the node template. The same way we nested the Title component into the Card.
- We mapped Drupal's attributes into the component's attributes placeholder so Drupal can inject any attributes such as CSS classes, IDs, Data attributes, etc. into the component.
- Finally, we mapped the image, title and teaser fields from Drupal to the component's equivalent fields.
- Save the changes to the template and clear Drupal's cache.

## Enable the Storybook theme

Before we forget, let's enable the Storybook theme an also make it your default theme, otherwise all the work we are doing will not be visible since we are currently using Olivero as the default theme. Clear caches after this is done.

## Previewing the Article node as a Card

Integration is done and we switched our default theme to Storybook. After clearing caches if you reload the homepage you should be able to see the Article node you wrote but this time displayed as a card. See below:

![Example of twig debugging](https://mariohernandez.io/images/integrated-card.webp)

- If you right-click on the article and select **Inspect**, you will notice the following:
  - Drupal is now using **node--article--teaser.html.twig**. This is the template we created.
  - The template path is now **themes/custom/storybook/src/templates/content/**.
  - You will also notice that the article is using the custom markup we wrote for the Card component which is more semantic, accessible, but in addition to this, the **`<article>`** tag is also inheriting several other attributes that were provided by Drupal through its Attributes variable. See below:

![Drupal template suggestions in code inspector](https://mariohernandez.io/images/attr.webp)

If your card's image size or aspect ratio does not look as the one in Storybook, this is probably due to the image style being used in the Article Teaser view mode. You can address this by:

- Going to the **Manage display** tab of the Article's Teaser view mode ( `/admin/structure/types/manage/article/display/teaser`).
- Changing the image style for the Image field for one that may work better for your image.
- Preview the article again on the homepage to see if this looks better.

### Download the code

For a full copy of the codebase which includes the work in this and the [previous post](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/), clone or [download the repo](https://github.com/mariohernandez/storybook/tree/card) and switch to the **card** branch. The **main** branch only includes the previous post code.

## In closing

This is only a small example of how to build a simple component in Storybook using Twig and then integrate it with Drupal, so content is rendered in a more semantic and accessible manner. There are many more advantages of implementing a system like this. I hope this was helpful and see the potential of a component-driven environment using Storybook. Thanks for visiting.

Tags for this post

- [Storybook](https://mariohernandez.io/tag/storybook/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Components](https://mariohernandez.io/tag/components/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.

- ![Rocks stack from big to small](https://mariohernandez.io/images/thumbs/rocks.webp)





  June 29, 2020



  As a trainer, having an environment that is easy to setup to achieve consistency among all students is key for a successful training workshop.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Attributes in Twig
[Skip to content](https://mariohernandez.io/blog/handling-drupal-attributes-in-components/#main-content) [Twig](https://mariohernandez.io/tag/twig/)

![Train tracks surrounded by tree lines](https://mariohernandez.io/images/attributes.webp)

[Photo by: Antoine Beauvillain](https://unsplash.com/@antoinebeauvillain)

In Drupal's twig templates you'll often see an attributes variable being output within the template. This variable is how core and contrib modules inject their CSS classes, an ID, or data attributes onto template markup. You'll also find `title_prefix` and `title_suffix` variables. These are used by core and contrib modules to inject markup into twig templates. A good example of this is the core Contextual Links module. If you were to remove the attributes , title\_prefix , and title\_suffix variables from a node template, for example, then the Contextual Links module would no longer have a way to add its drop-down to the display of nodes.

In some cases this may not be an issue for you, but in general it's best to plan to accommodate those Drupal-specific variables in your component markup so that when you integrate Drupal content into your components, other features can be available too.

Since the attributes variable can include class, id, and data attributes in one variable, we need to make sure we only combine Drupal’s classes with ours, and let the other attributes render without Drupal classes. This can be accomplished on the main wrapper of the component template.

```php

<article class="card{{ attributes ? ' ' ~ attributes.class }}"
  {{ attributes ? attributes|without(class) }}>
  {{ title_prefix }}
  {{ title_suffix }}
  {% if image %}
    <div class="card__image">
      {{ image }}
    </div>
  {% endif %}
  <div class="card__content">
    {% if heading %}
      {%
        include '@components/heading/heading.twig' with {
          "heading": {
            "title": heading.title,
            "url": heading.url,
            "heading_level": heading.heading_level,
            "classes": 'card__heading'
          }
        } only
      %}
    {% endif %}
  </div>
</article>

```

Note that the `without` twig filter in this example is a Drupal-specific filter, so for the component we'll want to make sure we’re using one that supports Drupal’s custom filters (most design systems such as KSS node, and Pattern Lab have configuration options that support Drupal twig filters).

Now if we integrate our card component with Drupal (i.e. `node--card.html.twig`), we can ensure Drupal's attributes and contextual links will be available when the component is rendered. The node template, also known as presenter template, would look something like this:

```php

{% set rendered_content = content|render %}
{%
   set heading = {
     title: label,
     url: url,
     heading_level: '4',
     attributes: title_attributes
 }
%}
{%
  embed '@components/card/card.twig' with {
    attributes: attributes,
    title_prefix: title_prefix,
    title_suffix: title_suffix,
    heading: heading,
    image: content.field_image is not empty ? content.field_image,
  } only
%}

```

- First we're triggering a full render of the content variable.
- Then we set up a variable for the Heading field,
- Finally we are using an `embed` twig statement to integrate the Card component. In the embed we are mapping all the Card fields with Drupal's data. We also pass in Drupal-specific items such as `title_prefix`, `title_suffix`, `attributes`, etc.

Our card component will be rendered with all Drupal's attributes and the ability to be edited inline thanks to the contextual links.

Hope this helps you in your component development journey.

Tags for this post

- [Twig](https://mariohernandez.io/tag/twig/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Four black wall arts on brown wall](https://mariohernandez.io/images/thumbs/frames.webp)





  December 13, 2020



  Styling web forms is not the most exciting thing when working on a project but they are essensial to most websites and is important to give them the attention they deserve.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Responsive Images Guide
[Skip to content](https://mariohernandez.io/tag/responsive-images/#main-content)

- December 8, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- December 1, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- November 24, 2023



Responsive image styles in Drupal are bundles that contain one or more image styles.

- November 17, 2023



I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- November 10, 2023



Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- November 3, 2023



In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- October 27, 2023



In this seven-part guide I cover everything you need to know about responsive images and how to manage them in a Drupal site.

## Drupal Themes and Media
[Skip to content](https://mariohernandez.io/blog/page/1/#main-content)

- April 14, 2024



Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- January 1, 2024



Take control of your image embeds in your site using Drupal's media.

- December 8, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- December 1, 2023



In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- November 24, 2023



Responsive image styles in Drupal are bundles that contain one or more image styles.

## Responsive Images Series
[Skip to content](https://mariohernandez.io/series/responsive-images/#main-content)

# Series: Responsive images

Responsive images is not one thing, it's a series of things and steps that need to take place for all the pieces to come together. In addition, there are various topics that drive the approach you take when managing responsive images. Learn all of it in this series.

- [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/) \- October 27, 2023
- [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/) \- November 3, 2023
- [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/) \- November 10, 2023
- [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/) \- November 17, 2023
- [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/) \- November 24, 2023
- [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/) \- December 1, 2023
- [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/) \- December 8, 2023

## Social Sharing Tips
[Skip to content](https://mariohernandez.io/tag/social-share/#main-content)

- September 10, 2018



Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

## Responsive Images in Drupal
[Skip to content](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![A book, tablet, mouse, keyboard and monitor on a desktop](https://mariohernandez.io/images/emily-bernal.webp)

[Photo by: Emily Bernal](https://unsplash.com/@emilybernal)

Images are an essential part of a website. They enhance the appeal of the site and make the user experience a more pleasant one. The challenge is finding the balance between enhancing the look of your website through the use of images and not jeopardizing performance. In this guide, we'll dig deep into how to find that balance by going over knowledge, techniques and practices that will provide you with a solid understanding of the best way to serve images to your visitors using the latest technologies and taking advantage of the advances of web browsers in recent years.

Hi, I hope you are ready to dig into responsive images. This is a seven-part guide that will cover everything you need to know about responsive images and how to manage them in a Drupal site. Although the excercises in this guide are Drupal-specific, the core principles of responsive images apply to any platform you use to build your sites.

## Where do we start?

Choosing Drupal as your CMS is a great place to start. Drupal has always been ahead of the game when it comes to managing images by providing features such as image compression, image styles, responsive images styles and media library to mention a few. All these features, and more, come out of the box in Drupal. In fact, most of what we will cover in this guide will be solely out of the box Drupal features. We may touch on third party or contrib techniques or tools but only to let you know what's available not as a hard requirement for managing images in Drupal.

It is important to become well-versed with the tools available in Drupal for managing images. Only then you will be able to make the most of those tools. Don't worry though, this guide will provide you with a lot of knowledge about all the pieces that take part in building a solid system for managing and serving responsive images.

Let's start by breaking down the topics this guide will cover:

1. [What are responsive images?](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/#responsive-images)
2. [Art Direction using the `<picture>` HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element)
3. [Image resolution switching using `srcset` and `sizes` attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes)
4. [Image styles](https://mariohernandez.io/blog/image-styles-in-drupal) and [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles) in Drupal
5. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media)
6. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up)

## What are responsive images?

A responsive image is one whose dimensions adjust to changes in screen resolutions. The concept of responsive images is one that developers and designers have been strugling with ever since Ethan Marcotte published his famous blog post, [Responsive Web Design](https://alistapart.com/article/responsive-web-design/), back in 2010 followed by his book of the same title. The concept itself is pretty straight forward, serve the right image to any device type based on various factors such as screen resolution, internet speed, device orientation, viewport size, and others. The technique for achieving this concept is not as easy. I can honestly say that over 10 years after reponsive images were introduced, we are still trying to figure out the best way to render images that are responsive. Read more about [responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).

So if the concept of responsive images is so simple, why don't we have one standard for effectively implementing it? Well, images are complicated. They bring with them all sorts of issues that can negatively impact a website if not properly handled. Some of these issues include: Resolution, file size or weight, file type, bandwidth demands, browser support, and more.

Some of these issues have been resolved by fast internet speeds available nowadays, better browser support for file tyes such as webp, as well as excellent image compression technologies. However, there are still some issues that will probably never go away and that's what makes this topic so complicated. One issue in particular is using poorly compressed images that are extremely big in file size. Unfortunately often times this is at the hands of people who lack the knowledge of creating images that are light in weight and properly compressed. So it's up to us, developers, to anticipate the problems and proactively address them.

### Ways to improve image files for your website

If you are responsible for creating or working with images in an image editor such as Photoshop, Illustrator, GIMP, and others, you have great tools at your disposal to ensure your images are optimized and sized properly. You can play around with the image quality scale as you export your images and ensure they are not bigger than they need to be. There are many other tools that can help you with compression. One little tool I've been using for years is this little app called [ImageOptim](https://imageoptim.com/howto.html), which allows you to drop in your images in it and it compresses them saving you some file size and improving compression.

Depending on your requirements and environment, you could also look at using different file types for your images. One highly recommended image type is **[webp](https://developers.google.com/speed/webp)**. With the ability to do lossless and lossy compression, webp provides significant improvements in file sizes while still maintaining your images high quality. The browser support for webp is excellent as it is supported by all major browsers, but do some research prior to start using it as there are some hosting platforms that do not support webp.

To give you an example of how good webp is, the image in the header of this blog post was originally exported from Photoshop as a `.JPG`, which resulted in a 317KB file size. This is not bad at all, but then I ran the image through the ImageOptim app and the file size was reduced to 120KB. That's a 62% file size reduction. Then I exported the same image from Photoshop but this time in `.webp` format and the file size became 93KB. That's 71% in file size reduction compared to the original JPG version.

## A must have CSS rule in your project

By now it should be clear that the goal for serving images on any website is doing it by using the responsive images approach. The way you implement responsive images on your site may vary depending on your platform, available tools, and skillset. Regardless, the following CSS rule should always be available within your project base CSS styles and should apply to all images on your site:

```css
img {
  display: block;
  max-width: 100%;
}
```

Easy right? That's it, we're done 😃

The CSS rule above will in fact make your images responsive (images will automatically adapt to the width of their containers/viewport). This rule should be added to your website's base styles so every image in your website becomes responsive by default. However, this should not be the extend of your responsive images solution. Although your images will be responsive with the CSS rule above, this does not address image compression nor optimization and this will result in performance issues if you are dealing with extremly large file sizes. [Take a look at this example](https://codepen.io/mariohernandez/full/ZEVVKab) where the rule above is being used. Resize your browser to any width including super small to simulate a mobile device. Notice how the image automatically adapts to the width of the browser. Here's the problem though, the image in this example measures `5760x3840` pixels and it weights 6.7 MB. This means, even if your browser width is super narrow, and the image is resized to a very small visual size, you are still loading an image that is 6.7 MB in weight. No good 👎

In the next post of this series, we will begin the process of implementing a solution for handling responsive images the right way.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.

- ![Watter color mountains](https://mariohernandez.io/images/thumbs/media.webp)





  December 1, 2023



  In Drupal, the core Media module manages the creation, editing, deletion, settings, and display of media entities.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Image Styles
[Skip to content](https://mariohernandez.io/tag/image-styles/#main-content)

- November 17, 2023



I'd like to think of Drupal's image styles as templates for cropping and sizing images.

## Responsive Images Guide
[Skip to content](https://mariohernandez.io/tag/picture-element/#main-content)

- November 3, 2023



In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

## Social Share Links
[Skip to content](https://mariohernandez.io/blog/adding-social-share-links-to-gatsby/#main-content) [Gatsby](https://mariohernandez.io/tag/gatsby/)

![Beach waves coming to shore](https://mariohernandez.io/images/beach.webp)

> Sharing is caring.

I've been working on my personal blog (this site), for a while. I built it with [Gatsby](https://www.gatsbyjs.org/) and little by little I have been adding extra functionality. Today I'm going to show you how I added social sharing links to allow visitors to share my posts with others using Twitter, Facebook, LinkedIn, and other channels.

For an example of the Sharing links, look at the icons above the hero image on this and every post on this site.

There are many ways to accomplish this but from the begining I wanted to use something that was simple and did not require too much overhead to run. There are solutions out there that require third libraries and scripts and I wanted to avoid that. A while back I was introduced to [Responsible Social Share Links](https://jonsuh.com/blog/social-share-links/). The beauty of Responsible Social Links is that they do not need any Javascript to work. They use the sharing links available for most social media channels.

Let's take a look at some examples of what these links look like:

**Facebook**

```html
https://www.facebook.com/sharer/sharer.php?u=URL_TO_SHARE
```

**Twitter**

```html
<a href="https://twitter.com/intent/tweet/
     ?text=Check this out
     &url=https://mariohernandez.io
     &via=imariohernandez"
   target="_blank">Share on Twitter</a>
```

Most of these links accepts several parameters. You can see these parameters in more details at the Responsible Social Share Links page for additional information. In addtion, some systems may require you to encode the links but luckily for us Reacts does this for us automatically.

## Using the links in a Gatsby site (or React for that matter)

You may think, that's so easy, just modify each of the links with my personal information and done. That's true to an extend. However, the tricky part is dynamically passing the current page's URL and post title to your sharing link. So here's how I did it:

1. Edit your blog post template. In my case my blog post template is `/src/templates/blog-post.js` This is based on the Gatsby starter I used. Your mileage may vary.

2. Add the following code where you wish to display the sharing links to generate a twitter share link:


```javascript
<Share>
    <ShareLink
      href={`https://twitter.com/intent/tweet/?text=${post.frontmatter.title}
      &url=https://mariohernandez.io${post.frontmatter.path}%2F&via=imariohernandez`}>
      // Optional icon
      <LinkLabel>Share on Twitter</LinkLabel>
    </ShareLink>
</Share>
```

The example above creates a twitter share link and uses the data variables I am already using to print the blog post content. As you know, Gatsby uses GraphQL to query the posts and by doing this you have access to each of the fields in your post (i.e. title, path, tags, date, etc.).

In the example above, I am passing `${post.frontmatter.title}` so when the post is shared the title of the post is included as your tweet text. In addition, I am linking to the current post by passing `${post.frontmatter.path}`. Finally I am passing my twitter handle.

There are other parameters you can pass to your share links. Things like hashtags, mentions, and more. Following the same pattern you can do the same for Facebook, LinkedIn and others.

## A much cleaner approach

You may have noticed that I created the sharing snippet directly in the blog-post.js template. A much cleaner approach would be to create a new React component for all yoru sharing links and include the component in your blog-post.js.

Here's the full snippet for all the social channels I am using:

```javascript
<Share>
  <ShareLabel>Share this post</ShareLabel>
  <ShareSocial>
    <ShareItem>
      <ShareLink
        href={`https://twitter.com/intent/tweet/?text=${
          post.frontmatter.title
        }&url=https://mariohernandez.io${post.frontmatter.path}%2F&via=imariohernandez`}
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-twitter"
          >
            <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" />
          </svg>
        </span>
        <LinkLabel>Share on Twitter</LinkLabel>
      </ShareLink>
    </ShareItem>
    <ShareItem>
      <ShareLink
        href={`https://www.facebook.com/sharer/sharer.php?u=https://mariohernandez.io${
          post.frontmatter.path
        }`}
        target="_blank"
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-facebook"
          >
            <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
          </svg>
        </span>
        <LinkLabel>Share on Facebook</LinkLabel>
      </ShareLink>
    </ShareItem>
    <ShareItem>
      <ShareLink
        href={`https://www.linkedin.com/shareArticle?mini=true&url=https://mariohernandez.io${
          post.frontmatter.path
        }&title=${post.frontmatter.title}&source=${post.frontmatter.title}`}
        target="_blank"
      >
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="icon icon-linkedin"
          >
            <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
            <rect x="2" y="9" width="4" height="12" />
            <circle cx="4" cy="4" r="2" />
          </svg>
        </span>
        <LinkLabel>Share on LinkedIn</LinkLabel>
      </ShareLink>
    </ShareItem>
  </ShareSocial>
</Share>
```

* * *

## In Closing

If you want to have a clean and light weight way to share your content with others, the Responsible Sharing Links may just be what you need.

Tags for this post

- [Gatsby](https://mariohernandez.io/tag/gatsby/)
- [Social Share](https://mariohernandez.io/tag/social-share/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Person holding a card](https://mariohernandez.io/images/thumbs/featured-image.webp)





  August 2, 2018



  Building components is a lot of fun but it takes good planning and attention to detail to build components which are flexible and reusable.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.


 [See more posts](https://mariohernandez.io/blog)

## Building Better Components
[Skip to content](https://mariohernandez.io/blog/five-principles-for-building-better-components/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Hand drawing website wireframes](https://mariohernandez.io/images/wireframes.webp)

[Photo by: Sigmund](https://unsplash.com/@sigmund)

When working on a component-based project, building components or patterns, can be a liberating experience because we are able to draft the best markup possible to build the most flexible, scalable and reusable components. If you work with third party platforms such as SharePoint, WordPress, Drupal, or others, this becomes even more rewarding as in most cases content management systems are not known for producing the best markup possible. However, this liberating experience can come a a price if you are not taking the appropriate measures and checks when building your library of patterns.

In this post I am going to discuss five critical principles I follow when building components. My goal is always to achieve first and foremost, semantic markup that works in all devices including assistive technologies, reusability, scalability, and finally, ease of use. In some cases it is hard to achieve all of these goals so it is important to understand where you draw the line and what is more important in the long term.

**Disclaimer**: _Components and Paterns are used interchangeably_.

## Find patterns in your patterns

Ideally, before you begin building patterns, or components, you want to fully understand how and when these patterns will be used. Certainly there are times when we don’t have all this information when we first start working on a project, but if you do, take a detailed inventory of your patterns. Doing this will help you build better and more reusable patterns.

Failing to identify the patterns in your patterns can lead to bad decisions when building them. For example, let’s say we have a card component for displaying latest news articles, if we don’t know that there are cards for events that look similar to news articles, we may miss an opportunity to turn the card component into one we can use for multiple purposes in our website. But don’t let this get you down, building a website is an iteration process. If you later discover that the news card component can be leveraged for events, it’s perfectly okay to update the card component so it can be used with events as well. My point is that it is preferred if you can catch these patterns early on, but we all know that sometimes designs are not always available in full when a project is started and when they become available we may need to re-think our process of component-building.

## Don't sacrifice simplicity over reusability

Reusability when working with components is important and should be at the forefront when building components, however, don’t paint yourself in a corner by over-engineering your components because you found a way to turn a component into a multi-level reusable machine. Trying to make your components do too much can lead to over complex development and in the long run, very hard to maintain. It is better to have components that are simple and easy to maintain even if it means you may have some components that are similar. It is hard to find the balance between simplicity and reusability and this discovery will only come as you work on your components. If you have to choose between simple and reusable, simple may be the way to go.

## One set of markup for all devices

Earlier I mentioned that before you start building components you should have a full picture of how and when those components will be used by looking at the design comps. Of course this is not always possible, but in an ideally designs comps give us opportunities to identify areas of improvement or areas that could lead to potential problems. An example of a problem would be if you are provided the designs for mobile, tablet, and desktop. This is great, but let’s say the information displayed at each device type changes in such a way that you don’t know how to best write the markup so it works on all devices. In a perfect world, you should not have to alter the markup of your components per breakpoint. Doing so could lead to confusion on how content is rendered, not to mention problems with accessibility or even SEO. If you find that markup may be a challenge from breakpoint to breakpoint, it is perfectly okay to go back to the designer and propose updates to the design so a unified markup structure could serve all devices. In my experience, the designer would be okay with your recommendations as long as you are not completely changing the layout of the website but instead are simply proposing minor adjustments that don’t change the overall look and feel of the website.

In some cases a designer may not be fully aware that the designs they are proposing could lead to issue when the site is rendered in different device sizes, so it’s okay to bring these issues to their attention and you may find that they are onboard with your suggestions.

## Find the right names for your patterns

Another way to paint yourself in a corner is by the name you choose for your components. Component names should be generic and yet descriptive so they can be used on different scenarios. Conversely, names that are too specific will limit when and how you can use those components. Let’s take a look at some bad component names and propose a better name:

- News Card: If we think back of how we can reuse components, naming a component News Card will limit us on what kind of content we can use this component on. What if Events use a similar card with minor differences? A better name for this component may be Card or Content Card. This allows us to use on any type of content.

- FAQ Accordion: We have seen this before, we want to build a collapsible list of Frequently Asked Questions so the name makes sense. However, what if we want the same functionality for other type of content such as Forums or Knowledge base content? A better name would simply be Accordion which describes the functionality of the component, not the content that it can hold.

- Latest News List: Again, we are limiting ourselves to only showing content of type news. A list of content should be generic so we can use them for any kind of content (i.e. Blog posts, events, popular content etc.). A more appropriate name would be Content List.

- Finally, Homepage Hero: It is not uncommon for Hero sections to be in multiple pages other than the homepage. By naming this component simply Hero, we can leverage it and use it in more than just the homepage. You may wonder, what if I have other types of heroes in non-homepage pages? Well, perhaps we can find alternative names for those, things like Hero Short, or Page Breaker, something that is descriptive and yet provides the ability to be used in multiple pages.


The above are only some examples of how a bad name can not only limit where or what type of content you can use your components with, but it can also lead to building unnecessary components.

## Document your components

One of the great things about design systems like Pattern Lab, Storybook and others, is that they provide a way to document the details of your components. Documenting components can go a long way to ensure your entire team is fully aware of the why and how of your components.

I practice that I follow when building components is documenting the technical aspects of the component such as its name, where it is used, and details about any variants of the components. Just as important, I like to define the components fields, their data type and values they accept. This architectural information ensures gives your team and your stakeholders a detailed view of a components role in your project.

In closing, before you begin building components, take the time to study your design comps and take notes of how you feel you can make the most out of your components library. You will not get it right the first time, that’s okay. As long as you are giving yourself the room to iterate through the process, you can always go back and update a component if it will give you more flexibility and will turn your project into a solid component-based system.

### In closing

You may not always get it righ the first time, but keeping these principles in mind will help you achieve better implementation of your website's patterns.

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.


 [See more posts](https://mariohernandez.io/blog)

## Managing Image Embeds
[Skip to content](https://mariohernandez.io/blog/managing-image-embeds-with-drupal-media/#main-content) [Drupal media](https://mariohernandez.io/tag/drupal-media/)

![Siluete of man in front of sphere](https://mariohernandez.io/images/media-embed.webp)

[Photo by: Greg Rakozy](https://unsplash.com/@grakozy)

Allowing your content creators to embed images in text fields is a big risk if you don't have the right measures in place to get properly rendered images without jeopardizing your site's performance. We faced this issue first-hand with embedded images due to not using the right configuration and this lead to extremely large images being rendered. In this post I'll go over the techniques I took for addressing those issues and set up a system for image embeds that is solid and performant.

I started by writing a seven-part guide on [how to setup responsive images](https://mariohernandez.io/blog/responsive-images-in-drupal-a-guide). In this post I'll focus on image embeds. If you followed or read the responsive images guide, you should be able to take advantage of some of the work we did there in this post. The guidelines covered here include:

- Defining requirements
- Image styles
- Media view modes
- Text format configuration

## Defining requirements

Before you write the first line of code or set the first drupal configuration for this issue, you need to have a clear understanding of your requirements. Here is a summary of my requirements:

- Only certain user roles can embed images

This means we need to figure out if the text formats used in our site will allow us to set the restrictions we need. Otherwise we may need to create or edit a text format for our target user roles.

- Users need to be able to choose the image size and aspect ratio when embedding images

We defined the image sizes and aspect ratios and assigned names that were user-friendly for non-technical users. We came up with name options we think our users will find easy to work with such as:

  - Small square, Small portrait, Small rectangular
  - Medium square, Medium portrait, Medium rectangular, Medium rectangular wide
  - Large square, Large rectangular, Large rectangular wide
  - Extra large square, Extra large rectangular, Extra large rectangular wide
- If no option is selected by users, set a default image size

For the default option when no selection is made by the user, we decided to use the Medium rectangular option. This has an aspect ratio of 3:2 and it measures about 720x480.

- Existing Media items need to be available for embedding

This was a tricky one because my original inclination was to create a new Media type so we can isolate all configuration for its view modes and not overpopulate our default Media type. However, this ended up not working for us because when you limit your image embeds to only use a new Media type, you don't get access to any of the media items (images), that have already been uploaded to the Media library using other media types. Ultimately we ended up using Drupal core's Media type, Image, and our dev team had to compromise on having a very busy list of view modes for this media type.

- Images need the ability to be cropped wihin the Media page

Since most of our images already provide the ability to be cropped at different aspect ratios, using the core Media type in the previous bullet point made this an easy solution.


## Image styles

It all starts with image styles. I'm not going to go over how to create image styles, you can read my post [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal). The one thing I am going to repeat however is the importance of creating reusable image styles. Reusable image styles can help you reduce the number of image styles you create while providing the flexibility you need with each use case.

Image styles are key as each of the size options we defined above translate into image styles. So Small square for example, is an image style that is defined as `1:1 (250px)`. Medium rectangular would be something like `3:2 (720x480)`, etc. You may be wondering, how do you plan on using fiendly names for your content editors when your image styles names are not very friendly? Great question. Since we are using Drupal's Media, content editors do not interact directly with image styles, they do with Media view modes and this is where we will use more friendly names.

## Media view modes

View modes are one of Drupal's powerful features. Being able to display content is different ways with little effort can turn a simple website into a dynamic content hub. The example I always give when someone asks me what view modes are or how do they work is the Amazon website. When you are viewing a product in [amazon.com](http://amazon.com/), or most retail websites for that matter, you will notice that the same product or similar ones appear all over the page but in slightly different ways, with different fields or styles. See the page below for an example.

![Screenshot of a computer mouse in Amazon.com](https://mariohernandez.io/images/modes.webp)

_The image above shows many ways in which a product can be displayed. I've numbered each display_.

In Drupal, every entity such as content types, media types, blocks, etc., offer the ability to create view modes. For the purpose of image embeds, we will create a Media type view mode for each image style we plan on using. The view modes is what content editors will interact with when choosing an image size or aspect ratio during the image embed process. This is where we will use the user-friendly names we defined earlier. Let's go over how this relationship between view modes and image styles works for image embeds.

### Configure view modes for the Image media type

1. In your Drupal site, create an image style for each image size option you wish to provide to users when embedding images.

2. Next, create a Media view mode for each image style ( `/admin/structure/display-modes/view`). **Very iimportant**: Remember the view mode's label (name) is where we are going to use the friendly name (i.e. Medium rectangular (720x480)). I like to keep the machine name similar to the label so it's easier to debug or identify in code (i.e. `medium_rectangular_720x480`).

3. Now, let's tie 1 & 2 together:

   - Go to the media type you plan on using for media embeds ( `/admin/structure/media/manage/image/display`). I am using Drupal core's **Image** media type.
   - Scroll down and expand the **Custom display settings** fieldset.
   - Check each of the view modes you created in step 2 and click **Save**.
4. Now click each of the view modes and update the image field to use the respective/matching image style.


## Configure the text format

View modes and image styles are all configured. Now let's configure the Text format that authorized users will use to embed images.

1. Go to the Text formats and editors page ( `/admin/config/content/formats`)
2. Click **Configure** next to the text format you plan on using (i.e. Full HTML)
3. Ensure the right user roles are selected
4. Within the **Toolbar configuration** section, drag the **Drupal media** button from the _Available buttons_ options to the _Active toolbar_ section. You could probably remove the original insert image button since you won't be using it.
5. Scroll to the **Enabled filters** section and check the **Embed media** checkbox
6. Scroll to the **Filter settings** section and set the following:
   - **Default view mode**: This is the default display that will be used if content editors don't pick an option when embedding images. Select any of the view modes that represents the image size you want to use as default.

   - **Media types selectable in the Media Library**: Select the Media type you plan on using. In my case is **Image**.

   - **View modes selectable in the 'Edit media' dialog**: Finally, select each of the view modes you created in the previous section. FYI: View modes will be sorted in alpha order by their machine name. In my case I had to prefix some of the machine names with either "a" or "b" so the list of options for the users to choose from would be nicely organized by their label name. See screnshot below.

   - Click **Save configuration**

## Testing your configuration

Now that we've completed all the configuration we should be able to take it for test drive.

- Go to any page where there is a text field with a WYSIWYG editor
- Make sure you are using the right text format by selecting it at the bottom of the text field where you want to embed an image
- Click the **Insert media** button from the editor's toolbar
- Select or upload the image you'd like to embed
- When the image has been inserted, click on it and you should see several options of actions you can do with the image. Things like align the image, add a caption, link it, and you should also see a selection box listing all the view modes you created.
- After making your selection you should immediately see the image size/aspect ratio change to the one you selected. When you are happy with your selection, click the **Save** button to save your page.

**Important**: Depending on your site's configuration, the options for changing your image size may look different than mine. In my case, I am only using Drupal's core modules and this is how the options look for me:

![Example of image embed editor options](https://mariohernandez.io/images/img-embed-demo.webp)

## In closing

Putting a system like this for your image embeds will give you the piece of mind that content editors have options to choose how big or small they would like images to be displayed, and from a performance point of view, if your image styles are done properly, you can rest assurred that bloated images will never be rendered because you have put the guard rails in place to avoid this from happening.

I hope you found this article useful and can put these techniques to use in your own Drupal project. Happy New Year! 🎉 🎊 🎆 👋

Tags for this post

- [Drupal media](https://mariohernandez.io/tag/drupal-media/)
- [Media](https://mariohernandez.io/tag/media/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![Colourful cacti in a row against a white background](https://mariohernandez.io/images/thumbs/variations-thumb.webp)





  July 1, 2024



  If your Drupal theme uses Storybook as its design system, learn how to create component variations or stories.

- ![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/thumbs/switch-thumb.webp)





  June 2, 2024



  If you are searching for the next front-end build tool for your Drupal project, or any project, you should try ViteJS.


 [See more posts](https://mariohernandez.io/blog)

## Building Card Components
[Skip to content](https://mariohernandez.io/blog/how-to-build-a-card-component/#main-content) [Components](https://mariohernandez.io/tag/components/)

![Person holding a card](https://mariohernandez.io/images/featured-image.webp)

One of the most popular components on any website I've worked on is the "Card" component. Depending on the website, the card component is used to group various pieces of content into a container which can be used throughout your website.

Read the full article on [how to build a card comonent](https://www.mediacurrent.com/blog/how-build-card-component/).

Tags for this post

- [Components](https://mariohernandez.io/tag/components/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.


 [See more posts](https://mariohernandez.io/blog)

## Art Direction in Images
[Skip to content](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![Pencils of different sizes over a blue background](https://mariohernandez.io/images/picture-element.webp)

[Photo by: Markus Spiske](https://unsplash.com/@markusspiske)

In the [previous article](https://mariohernandez.io/blog/responsive-images-in-drupal-a-guide) of this guide we covered the concept of responsive images and some of the challenges that come with implementing an effective system for them. In this article we will go in detail about the concept of "Art Direction" and how this applies to responsive images.

## What is art direction?

In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size. For example, a large landscape shot of a person rowing in the middle of a lake is shown when viewed on a large desktop device. If we were to use the same image on a mobile device, that image would shrunk down, making the person in the image very small and hard to see. A better option would be to show a different version of the image that zooms in and focuses on the most important part of the image, the person rowing. See an example of this image below.

![Person rowing shown in different devices](https://mariohernandez.io/images/art-direction.webp)

## Enter the `<picture>` HTML element

In order to achieve art direction we need to be able to query for the size of the device being used to view the website. Once we've identified the device size we instruct the browser which image to use based on the device size. This will allow us to provide a better user experience as each device will display an image intended specifically for that device. Going back to the image above, we can see that the main image has been cropped differently to ensure the most important part of the image is displayed on each divice.

So how do we query for the device size and how do we instruct the browser which image to use? This is where the `<picture>` element/tag comes in. Let's take a look at the code that makes all this possible and break it down.

```html
<picture>
  <source
    media="(min-width: 2400px)"
    srcset="images/rowing-2400.jpg 1x, images/rowing-4800.jpg 2x"
    type="image/webp">

  <source
    media="(min-width: 1280px)"
    srcset="images/rowing-1400.jpg 1x, images/rowing-2800.jpg 2x"
    type="image/webp">

  <source
    media="(min-width: 640px) and (max-width: 1279px)"
    srcset="images/rowing-1200.jpg 1x, images/rowing-2400.jpg 2x"
    type="images/webp">

  <img
    src="images/rowing-1200.jpg" srcset="images/rowing-2400.jpg 2x"
    alt="Person rowing on a lake" width="1200" height="800">
</picture>
```

**Note**: The order in which the media queries are written within the `<picture>` tag matters. The browser will use the first match it finds even if it's not the intended one. Therefore, consider the media query order very carefully to ensure the right image is served.

- `<picture>`: The `<picture>` tag is simply a wrapper. On its own it does not do anything.
- `<source>`: The `<picture>` HTML element contains zero or more `<source>` elements. The browser will consider each child `<source>` element and choose the best match among them. If no matches are found—or the browser doesn't support the `<picture>` element—the URL of the `<img>` element's src attribute is selected. The selected image is then presented in the space occupied by the `<img>` element.
- Within the `<source>` element, you will find some very handy attributes ( `media`, `srcset`, and `type`):
  - `media`: Rembember earlier we said we need to query for the device size? Well, within the `media` attribute you can write media queries much like the media queries you write in CSS ( `media="(min-width: 600px)"`). This is how we check the size of the device when a page is rendered.
  - `srcset`: This attribute allows us to provide a list of images the browser can use when the media query finds a match ( `srcset="img-768.jpg, img-1440.jpg"`).
  - `type`: The `type` attribute specifies a MIME type for the resource URL(s). This is optional if using common image types such as JPG, PNG, TIFF, etc. If you plan on providing images in different file formats, you can do so using the `type` attribute. This is handy in the event the browser does not support a specific file type ( `type="image/avif"`), as you can then provide a supported file type.
- `<img>`: The img element serves two purposes:
  - It describes the dimensions of the image and its presentation
  - It provides a fallback in case none of the offered `<source>` elements are able to provide a usable image.

And there you have it. The `<picture>` element is a great way to serve different images based on things like device size or screen density. When the `<picture>` element was first introduced it required a pollyfill as not all browsers supported it. Nowadays, unless you are supporting Internet Explorer 11 (sorry bro), all other major browsers provide native support for it. Take a look at the chart below for current browser support.

![List of all browsers that support the picture element](https://mariohernandez.io/images/picture.webp)

### Great! Let's use `<picture>` on all our images ...NOOOOOOOO!!!!!!

Say what? If the `<picture>` element is so great, why can't we use it for rendering all of our images? Well, as great as the `<picture>` element is, it should not be the default solution for serving responsive images in your site. The only use case for the `<picture>` element is when you are trying to achieve "Art Direction" (cropping your images differently for each device size).

Remember at the begining of this post when I said " _In order to achieve art direction we need to be able to query for the device size. Once we've identified the device size_ **_we instruct the browser which image to use_**..."? There lies the problem. Let me explain.

The issue with the statement above is that "we are telling the browser which image". Not only that, but we are doing so solely based on the size of the device. This may not always be the best way to determine which image a device should use. Imagine you are using a nice relatively new laptop with a super high density screen. Based on our rules established within the `<picture>` element code snippet above, we would end up with an image that is 4800px in size. This is a pretty large image but it's the one that meets our creteria defined in the media query above. If you're home with a decent wifi connection you will never see any issue loading an image this large, but imagine you are working out of a coffee shop, or at a conference with poor wifi connection, or worse yet, you're on the road using your phone as a hotspot and your signal is very bad, now you will really experience some performance issues because we are telling the browser to load the largest image possible because your computer screen is big (relatively speaking). With the `<picture>` element we can't check how fast your internet connection is, or whether there are browser preferences a user has configured to account for slow internet speeds. We are basing everything on the size of the device.

Then why use the picture element? Well, when developing a website, the developer does not have all the information they need to serve the best image. Likewise, when rendering a page and using the `<picture>` tag, the browser does not know everything about the environment. The table below shows this in more detail and exposes the gap between the developer and the browser.

## Identifying the gap when using `<picture>`

| Environment conditions | What the developer knows<br>during development | What the browser knows<br>during image rendering |
| --- | --- | --- |
| Viewport dimensions | No | Yes |
| Image size relative to the viewport | Yes | No |
| Screen density | No | Yes |
| Images dimensions | Yes | No |

You may be wondering: " _Why did you get us all excited about the `<picture>` element if we can't really use it?_" well, if you are trying to achieve art direction, then you use the `<picture>` element. It's the recommended approach for that use case. If you are looking for resolution switching, a use case for most images in the web, you need to use the `srcset` and `sizes` attributes approach. In the next post we'll dive deep into this technique.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Picture Element](https://mariohernandez.io/tag/picture-element/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.


 [See more posts](https://mariohernandez.io/blog)

## Automating Drupal Front-end
[Skip to content](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#main-content) [Vitejs](https://mariohernandez.io/tag/vitejs/)

![Digital on/off switch over a purple gradient](https://mariohernandez.io/images/switch.webp)

[Photo by: Joshua Reddekopp](https://unsplash.com/@joshuaryanphoto)

Modern web development relies heavily on automation to stay productive, validate code, and perform repetitive tasks that could slow developers down. Front-end development in particular has evolved, and it can be a daunting task to configure effective automation. In this post, I'll try to walk you through basic automation for your Drupal theme, which uses Storybook as its design system.

Recently I worked on a large Drupal project that needed to migrate its design system from Patternlab to Storybook. I knew switching design systems also meant switching front-end build tools. The obvious choice seemed to be Webpack, but as I looked deeper into build tools, I discovered [ViteJS](https://vitejs.dev/).

Vite is considered the _Next Generation Frontend Tooling_, and when tested, we were extremely impressed not only with how fast Vite is, but also with its plugin's ecosystem and its community support. Vite is relatively new, but it is solid and very well maintained. [Learn more about Vite](https://vitejs.dev/guide/).

The topics covered in this post can be broken down in two categories:

1. Preparing the Front-end environment

   - [Build the front-end environment with Vite & Storybook](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#setup)
   - [Restructure the project](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#restructure)
   - [Configure TwigJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#configure-twigjs)
   - [Configure postCSS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#configure-postcss)
   - [Storybook's CSS configuration](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#global-css)
2. Automating the environment

   - [Copying static assets](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#copying)
   - [The Watch task](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#watch)
   - [Linting CSS and JavaScript](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/#linting)

## 1\. Build the front-end environment with Vite & Storybook

In a [previous post](https://mariohernandez.io/blog/building-a-modern-drupal-theme-with-storybook), I wrote in detail how to build a front-end environment with Vite and Storybook, I am going to spare you those details here but you can reference them from the original post.

1. In your command line, navigate to the directory where you wish to build your environment. If you're building a new Drupal theme, navigate to your site's `web/themes/custom/`
2. Run the following commands (Storybook should launch at the end):

```shell
npm create vite@latest storybook
cd storybook
npx storybook@latest init --type react
```

Fig. 1: The first command builds the Vite project, and the last one integrates Storybook into it.

### Reviewing Vite's and Storybook's out of the box build scripts

Vite and Storybook ship with a handful of useful scripts. We may find some of them already do what we want or may only need minor tweaks to make them our own.

- In your code editor, open `package.json` from the root of your newly built project.
- Look in the **scripts** section and you should see something like this:

```shell
"scripts": {
  "dev": "vite",
  "build": "vite build",
  "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
  "preview": "vite preview",
  "storybook": "storybook dev -p 6006",
  "build-storybook": "storybook build"
},
```

Fig. 2: Example of default Vite and Storybook scripts out of the box.

To run any of those scripts, prefix them with `npm run`. For example: `npm run build`, `npm run lint`, etc. Let's review the scripts.

- **dev**: This is a Vite-specific command which runs the Vite app we just build for local development
- **build**: This is the "do it all" command. Running `npm run build` on a project runs every task defined in the build configuration we will do later. CI/CD runners run this command to build your app for production.
- **lint**: Will lint your JavaScript code inside `.js` or `.jsx` files.
- **preview**: This is also another Vite-specific command which runs your app in preview mode.
- **storybook**: This is the command you run to launch and keep Storybook running while you code.
- **build-storybook**: To build a static version of Storybook to package it or share it, or to run it as a static version of your project.

### Building your app for the first time

#### Getting a consistent environment

In front-end development, it is important everyone in your team use the same version of NodeJS while working in the same project. This ensures consistency in your project's behavior for everyone in your team. Differences in the node version your team uses can lead to inconsistencies when the project is built. One way to ensure your team is using the same node version when working in the same project, is by adding a **.nvmrc** file in the root of your project. This file specifies the node version your project uses. The node version is unique to each project, which means different projects can use different node versions.

- In the root of your theme, create a file called `.nvmrc` (mind the dot)
- Inside **.nvmrc** add the following: `v20.14.0`
- Stop Storybook by pressing **Ctrl + C** in your keyboard
- Build the app:

```bash
nvm install
npm install
npm run build
```

Fig. 3: Installs the node version defined in .nvmrc, then installs node packages, and finally builds the app.

**NOTE**: You need to have [NVM](https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/) installed in your system to execute nvm commands. You only need to run **nvm install** once per project unless the node version changes. If you switch to a project that uses a different node version, when you return to this project, run **nvm use** to set your environment back to the right node version.

The output in the command line should look like this:

![Output of build command](https://mariohernandez.io/images/blog-images/build.webp)

Fig. 4: Screenshot of files compiled by the build command.

By default, Vite names the compiled files by appending a random 8-character string to the original file name. This works fine for Vite apps, but for Drupal, the libraries we'll create expect for CSS and JS file names to stay consistent and not change. Let's change this default behavior.

- First, install the **glob** extension. We'll use this shortly to import multiple CSS files with a single import statement.

```shell
npm i -D glob
```

- Then, open `vite.config.js` in your code editor. This is Vite's main configuration file.
- Add these two imports around line 3 or directly after the last import in the file

```js
import path from 'path';
import { glob } from 'glob';
```

- Still in `vite.config.js`, replace the **export default...** with the following snippet which adds new settings for file names:

```js
export default defineConfig({
  plugins: [\
  ],
  build: {
    emptyOutDir: true,
    outDir: 'dist',
    rollupOptions: {
      input: glob.sync(path.resolve(__dirname,'./src/**/*.{css,js}')),
      output: {
        assetFileNames: 'css/[name].css',
        entryFileNames: 'js/[name].js',
      },
    },
  },
})
```

Fig. 5: Build object to modify where files are compiled as well as their name preferences.

- First we imported `path` and `{ glob }`. **path** is part of Vite and **glob** was added by the extension we installed earlier.
- Then we added a **build** configuration object in which we defined several settings:
  - **emptyOutDir**: When the build job runs, the **dist** directory will be emptied before the new compiled code is added.
  - **outDir**: Defines the App's output directory.
  - **rollupOptions**: This is Vite's system for bundling code and within it we can include neat configurations:
    - **input**: The directory where we want Vite to look for CSS and JS files. Here's where the **path** and **glob** imports we added earlier are being used. By using `src/**/**/*.{css,js}`, we are instructing Vite to look three levels deep into the **src** directory and find any file that ends with **.css** or **.js**.
    - **output**: The destination for where CSS and JS will be compiled into ( **dist/css** and **dist/js**), respectively. And by setting `assetFileNames: 'css/[name].css'`, and `entryFileNames: 'css/[name].js'`, CSS and JS files will retain their original names.

Now if we run `npm run build` again, the output should be like this:

![Second output of build command](https://mariohernandez.io/images/blog-images/build-after.webp)

Fig. 6: Screenshot of compiled code using the original file names.

The random 8-character string is gone and notice that this time the build command is pulling more CSS files. Since we configured the input to go three levels deep, the **src/stories** directory was included as part of the input path.

## 2\. Restructure the project

The out of the box Vite project structure is a good start for us. However, we need to make some adjustments so we can adopt the Atomic Design methodology. This is today's standards and will work well with our [Component-driven Development](https://drewl.com/blog/what-is-component-driven-development/) workflow. At a high level, this is the current project structure:

```md
> .storybook/
> dist/
> public/
> src/
  |- stories/
package.json
vite.config.js
```

Fig. 7: Basic structure of a Vite project listing only the most important parts.

- **\> .storybook** is the main location for Storybook's configuration.
- **\> dist** is where all compiled code is copied into and where the production app looks for all code.
- **\> public** is where we can store images and other static assets we need to reference from our site. Equivalent to Drupal's `/sites/default/files/`.
- **\> src** is the directory we work out of. We will update the structure of this directory next.
- **package.json** tracks all the different node packages we install for our app as well as the scripts we can run in our app.
- **vite.config.js** is Vite's main configuration file. This is probably where we will spend most of our time.

### Adopting the Atomic Design methodology

The [Atomic Design](https://bradfrost.com/blog/post/atomic-web-design/) methodology was first introduced by Brad Frost a little over ten years ago. Since then it has become the standard for building web projects. Our environment needs updating to reflect the structure expected by this methodology.

- First stop Storybook from running by pressing **Ctrl + C** in your keyboard.
- Next, inside **src**, create these directories: **base**, **components**, and **utilities**.
- Inside **components**, create these directories: **01-atoms**, **02-molecules**, **03-organisms**, **04-layouts**, and **05-pages**.
- While we're at it, delete the **stories** directory inside **src**, since we won't be using it.

**NOTE**: You don't need to use the same nomenclature as what Atomic Design suggests. I am using it here for simplicity.

### Update Storybook's stories with new paths

Since the project structure has changed, we need to make Storybook aware of these changes:

- Open **.storybook/main.js** in your code editor
- Update the **stories: \[\]** array as follows:

```js
stories: [\
  "../src/components/**/*.mdx",\
  "../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)",\
],
```

Fig. 8: Updating stories' path after project restructure.

The Stories array above is where we tell Storybook where to find our stories and stories docs, if any. In Storybook, stories are the components and their variations.

### Add pre-built components

As our environment grows, we will add components inside the new directories, but for the purpose of testing our environment's automation, I have created demo components.

- Download [demo components](https://github.com/mariohernandez/storybook/tree/variations) (button, title, card), from **src/components/**, and save them all in their content part directories in your project.
- Feel free to add any other components you may have built yourself. We'll come back to the components shortly.

## 3\. Configure TwigJS

Before we can see the newly added components, we need to configure Storybook to understands the Twig and YML code we are about to introduce within the demo components. To do this we need to install several node packages.

- In your command line run:

```shell
npm i -D vite-plugin-twig-drupal @modyfi/vite-plugin-yaml twig twig-drupal-filters html-react-parser
```

- Next, update `vite.config.js` with the following configuration. Add the snippet below at around line 5:

```js
import twig from 'vite-plugin-twig-drupal';
import yml from '@modyfi/vite-plugin-yaml';
import { join } from 'node:path';
```

Fig. 9: TwigJS related packages and Drupal filters function.

The configuration above is critical for Storybook to understand the code in our components:

- `vite-plugin-twig-drupal`, is the main TwigJS extension for our project.
- Added two new `import` s which are used by Storybook to understand Twig:
  - `vite-plugin-twig-drupal` handles transforming Twig files into JavaScript functions.
  - `@modyfi/vite-plugin-yaml` let's us pass data and variables through **YML** to our Twig components.

### Creating Twig namespaces

- Still in `vite.config.js`, add the **twig** and **yml()** plugins to add Twig namespaces for Storybook.

```js
  plugins: [\
    twig({\
      namespaces: {\
        atoms: join(__dirname, './src/components/01-atoms'),\
        molecules: join(__dirname, './src/components/02-molecules'),\
        organisms: join(__dirname, './src/components/03-organisms'),\
        layouts: join(__dirname, './src/components/04-layouts'),\
        pages: join(__dirname, './src/components/05-pages'),\
      },\
    }),\
    yml(),\
  ],
```

Fig. 10: Twig namespaces reflecting project restructure.

Since we removed the `react()` function by using the snippet above, we can remove **import react from '@vitejs/plugin-react'** from the imports list as is no longer needed.

With all the configuration updates we just made, we need to rebuild the project for all the changes to take effect. Run the following commands:

```shell
npm run build
npm run storybook
```

The components are available but as you can see, they are not styled even though each component contains a CSS stylesheet in its directory. The reason is Storybook has not been configured to find the component's CSS. We'll address this shortly.

## 4\. Configure postCSS

What is PostCSS? It is a JavaScript tool or transpiler that turns a special PostCSS plugin syntax into Vanilla CSS.

As we start interacting with CSS, we need to install several node packages to enable functionality we would not have otherwise. Native CSS has come a long way to the point that I no longer use Sass as a CSS preprocessor.

- Stop Storybook by pressing **Ctrl + C** in your keyboard
- In your command line run this command:

```shell
npm i -D postcss postcss-import postcss-import-ext-glob postcss-nested postcss-preset-env
```

- At the root of your theme, create a new file called **postcss.config.js**, and in it, add the following:

```js
import postcssImport from 'postcss-import';
import postcssImportExtGlob from 'postcss-import-ext-glob';
import postcssNested from 'postcss-nested';
import postcssPresetEnv from 'postcss-preset-env';

export default {
  plugins: [\
    postcssImportExtGlob(),\
    postcssImport(),\
    postcssNested(),\
    postcssPresetEnv({\
      stage: 4,\
    }),\
  ],
};
```

Fig. 11: Base configuration for postCSS.

One cool thing about Vite is that it comes with postCSS functionality built in. The only requirement is that you have a `postcss.config.js` file in the project's root. Notice how we are not doing much configuration for those plugins except for defining them. Let's review the code above:

- `postcss-import` the base for importing CSS stylesheets.
- `postcss-import-ext-glob` to do bulk `@import` of all CSS content in a directory.
- `postcss-nested` to unwrap nested rules to make its syntax closer to Sass.
- `postcss-preset-env` defines the CSS browser support level we need. [Stage 4](https://cssdb.org/#the-staging-process) means we want the "web standards" level of support.

## 5\. CSS and JavaScript configuration

The goal here is to ensure that every time a new CSS stylesheet or JS file is added to the project, Storybook will automatically be aware and begin consuming their code.

**NOTE**: This workflow is only for Storybook. In Drupal we will use [Drupal libraries](https://www.drupal.org/docs/develop/theming-drupal/adding-assets-css-js-to-a-drupal-theme-via-librariesyml) in which we will include any CSS and JS required for each component.

There are two types of styles to be configured in most project, global styles which apply site-wide, and components styles which are unique to each component added to the project.

### Global styles

- Inside **src/base**, add two stylesheets: `reset.css` and `base.css`.
- Copy and paste the styles for [reset.css](https://github.com/mariohernandez/storybook/blob/variations/src/css/reset.css) and [base.css](https://github.com/mariohernandez/storybook/blob/variations/src/css/base.css).
- Inside **src/utilities** create `utilities.css` and in it paste [these styles](https://github.com/mariohernandez/storybook/blob/variations/src/css/utilities.css).
- Inside **src/**, create a new stylesheet called `styles.css`.
- Inside **styles.css**, add the following imports:

```css
@import './base/reset.css';
@import './base/base.css';
@import './utilities/utilities.css';
```

Fig. 12: Imports to gather all global styles.

The order in which we have imported our stylesheets is important as the cascading order in which they load makes a difference. We start from `reset` to `base`, to `utilities`.

- `reset.css`: A reset stylesheet (or CSS reset) is a collection of CSS rules used to clear the browser's default formatting of HTML elements, removing potential inconsistencies between different browsers before any of our styles are applied.
- `base.css`: CSS Base applies a style foundation for HTML elements that is consistent for baseline styles such as typography, branding and colors, font-sizes, etc.
- `utilities.css`: Are a collection of pre-defined CSS rules we can apply to any HTML element. Rules such as variables for colors, font size, font color, as well as margin, sizes, z-index, animations, etc.

### Component styles

Before our components can be styled with their unique and individual styles, we need to make sure all our global styles are loaded so the components can inherit all the base/global styles.

- Inside **src/components** create a new stylesheet, `components.css`. This is where we are going to gather all components styles.
- Inside `components.css` add glob imports for each of the component's categories:

```css
@import-glob './01-atoms/**/*.css';
@import-glob './02-molecules/**/*.css';
```

Fig. 13: Glob import for all components of all categories.

**NOTE**: Since we only have Atoms and Molecules to work with, we are omitting imports for 03-organisms, 04-layouts, 05-pages. Feel free to add them if you have that kind of components.

### Updating Storybook's Preview

There are several ways in which we can make Storybook aware of our styles and javascript. We could import each component's stylesheet and javascript into each \* **.stories.js** file, but this could result in some components with multiple sub-components having several CSS and JS imports. In addition, this is not an automated system which means we need to manually do imports as they become available. The approach we are going to take is importing the stylesheets we created above into Storybook's preview system. This provides a couple of advantages:

- The component's \*.stories.js files are clean without any css imports as all CSS will already be available to Storybook.
- As we add new components with individual stylesheets, these stylesheets will automatically be recognized by Storybook.

Remember, the order in which we import the styles makes a difference. We want all global and base styles to be imported first, before we import component styles.

- In `.storybook/preview.js` add these imports at the top of the page around line 2.

```js
import Twig from 'twig';
import drupalFilters from 'twig-drupal-filters';
import '../src/styles.css'; /* Contains reset, base, and utilities styles. */
import '../src/components/components.css'; /* Contains all components CSS. */

function setupFilters(twig) {
  twig.cache();
  drupalFilters(twig);
  return twig;
}

setupFilters(Twig);
```

Fig. 14: Importing all styles, global and components.

In addition to importing two new extensions: **twig** and **twig-drupal-filters**, we setup a **setupFilters** function for Storybook to read Drupal filters we may use in our components. We are also importing two of the stylesheets we created earlier:

- `styles.css` contains all the CSS code from reset.css, base.css, and utilities.css (in that order)
- `components.css` contains all the CSS from all components. As new components are added and they have their own stylesheets, they will automatically be included in this import.

**IMPORTANT**: For Storybook to immediately display changes you make in your CSS, the imports above need to be from the **src** directory and not **dist**. I learned this the hard way.

### JavaScript compiling

On a typical project, you will find that the majority of your components don't use JavaScript, and for this reason, we don't need such an elaborate system for JS code. Importing the JS files in the component's \* **.stories.js** should work just fine. Since the demo components dont use JS, I have commented near the top of **card.stories.js** how the component's JS file would be imported if JS was needed.

If the need for a more automated JavaScript processing workflow arose, we could easily repeat the same CSS workflow but for JS.

### Build the project again

Now that our system for CSS and JS is in place, let's build the project to ensure everything is working as we expect it.

```shell
npm run build
npm run storybook
```

You may notice that now the components in Storybook look styled. This tells us our new system is working as expected. However, the Card component, if you used the demo components, is missing an image. We will address this issue in the next section.

This concludes the preparation part of this post. The remaining part will focus on creating automation tasks for compiling, minifying and linting code, copying static assets such as images, and finally, watching for code changes as we code.

## 6\. Copying images and other assets

Copying static assets like images, icons, JS, and other files from `src` into `dist` is a common practice in front-end projects. Vite comes with built-in functionality to do this. Your assets need to be placed in the **public** directory and Vite will automatically copy them on build. However, sometimes we may have those assets alongside our components or other directories within our project.

In Vite, there are many ways to accomplish any task, in this case, we will be using a nice plugin called `vite-plugin-static-copy`. Let's set it up.

- If Storybook is running, kill it with **Ctrl + C** in your keyboard
- Next, install the extension by running:

```shell
npm i -D vite-plugin-static-copy
```

- Next, right after all the existing imports in `vite.config.js`, import one more extension:

```js
import { viteStaticCopy } from 'vite-plugin-static-copy';
```

- Lastly, still in `vite.config.js`, add the `viteStaticCopy` function configuration inside the `plugins:[]` array:

```js
viteStaticCopy({
  targets: [\
  {\
    src: './src/components/**/*.{png,jpg,jpeg,svg,webp,mp4}',\
    dest: 'images',\
  }],
}),
```

Fig. 15: Adds tasks for copying JavaScript and Images from src to dist.

The `viteStaticCopy` function we added allows us to copy any type of static assets anywhere within your project. We added a target array in which we included **src** and **dest** for the images we want copied. Every time we run **npm run build**, any images inside any of the components, will be copied into **dist/images**.

If you need to copy other static assets, simply create new targets for each.

- Build the project again:

```shell
npm run build
npm run storybook
```

The missing image for the Card component should now be visible, see below. Pretty sweet! 🍰

![Card component in Storybook](https://mariohernandez.io/images/blog-images/storybook.webp)

Fig. 16: Screenshot of the Card component in Storybook.

## 7\. The Watch task

A watch task makes it possible for developers to see the changes they are making as they code, and without being interrupted by running commands. Depending on your configuration, a watch task watches for any changes you make to CSS, JavaScript and other file types, and upon saving those changes, code is automatically compiled, and a Hard Module Reload (HMR) is evoked, making the changes visible in Storybook.

Although there are extensions to create watch tasks, we will stick with Storybook's out of the box watch functionality because it does everything we need. In fact, I have used this very approach on a project that supports over one hundred sites.

I actually learned this the hard way, I originally was importing the key stylesheets in **.storybook/preview.js** using the files from **dist**. This works to an extend because the code is compiled upon changes, but Storybook is not aware of the changes unless we restart Storybook. I spent hours debugging this issue and tried so many other options, but at the end, the simple solution was to import CSS and JS into Storybook's preview using the source files. For example, if you look in **.storybook/preview.js**, you will see we are importing two CSS files which contain all of the CSS code our project needs:

```js
import '../src/styles.css';
import '../src/components/components.css';
```

Fig. 17: Importing source assets into Storybook's preview.

Importing source CSS or JS files into Storybook's preview allows Storybook to become aware immediately of any code changes.

The same, or kind of the same works for JavaScript. However, the difference is that for JS, we import the JS file in the component's \* **.stories.js**, which in turn has the same effect as what we've done above for CSS. The reason for this is that typically not every component we build needs JS.

### A real watch task

Currently we are running `npm run storybook` as a watch task. Nothing wrong with this. However, to keep up with standards and best practices, we could rename the **storybook** command, **watch**, so we can run `npm run watch`. Something to consider.

You could also make a copy of the **storybook** command and name it **watch** and add additional commands you wish to run with **watch**, while leaving the original **storybook** command intact. Choices, choices.

## 8\. Linting CSS and JavaScript

Our workflow is coming along nicely. There are many other things we can do but for now, we will end with one last task: **CSS and JS linting**.

- Install the required packages. There are several of them.

```shell
npm i -D eslint stylelint vite-plugin-checker stylelint-config-standard stylelint-order stylelint-selector-pseudo-class-lvhfa
```

- Next, after the last import in `vite.config.js`, add one more:

```js
import checker from 'vite-plugin-checker';
```

- Then, let's add one more plugin in the `plugins:[]` array:

```js
checker({
  eslint: {
    lintCommand: 'eslint "./src/components/**/*.{js,jsx}"',
  },
  stylelint: {
    lintCommand: 'stylelint "./src/components/**/*.css"',
  },
}),
```

Fig. 18: Checks for linting CSS and JavaScript.

So we can execute the above checks on demand, we can add them as commands to our app.

- In **package.json**, within the **scripts** section, add the following commands:

```json
"eslint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
"stylelint": "stylelint './src/components/**/*.css'",
```

Fig. 19: Two new npm commands to lint CSS and JavaScript.

- We installed a series of packages related to ESLint and Stylelint.
- `vite-plugin-checker` is a plugin that can run TypeScript, VLS, vue-tsc, ESLint, and Stylelint in worker thread.
- We imported `vite-plugin-checker` and created a new plugin with two checks, one for ESLint and the other for Stylelint.
- By default, the new checks will run when we execute `npm run build`, but we also added them as individual commands so we can run them on demand.

### Configure rules for ESLint and Stylelint

Both ESLint and Stylelint use configuration files where we can configure the various rules we want to enforce when writing code. The files they use are `eslint.config.js` and `.stylelintrc.yml` respectively. For the purpose of this post, we are only going to add the **.stylelintrc.yml** in which we have defined basic CSS linting rules.

- In the root of your theme, create a new file called **.stylelintrc.yml** (mind the dot)
- Inside **.stylelintrc.yml**, add the following code:

```yml
extends:
  - stylelint-config-standard
plugins:
  - stylelint-order
  - stylelint-selector-pseudo-class-lvhfa
ignoreFiles:
  - './dist/**'
rules:
  at-rule-no-unknown: null
  alpha-value-notation: number
  color-function-notation: null
  declaration-empty-line-before: never
  declaration-block-no-redundant-longhand-properties: null
  hue-degree-notation: number
  import-notation: string
  no-descending-specificity: null
  no-duplicate-selectors: true
  order/order:
    - - type: at-rule
        hasBlock: false
      - custom-properties
      - declarations
    - unspecified: ignore
      disableFix: true
  order/properties-alphabetical-order: error
  plugin/selector-pseudo-class-lvhfa: true
  property-no-vendor-prefix: null
  selector-class-pattern: null
  value-keyword-case:
    - lower
    - camelCaseSvgKeywords: true
      ignoreProperties:
        - /^--font/
```

Fig. 20: Basic CSS Stylelint rules.

The CSS rules above are only a starting point, but should be able to check for the most common CSS errors.

Test the rules we've defined by running either `npm run build` or `npm run stylelint`. Either command will alert you of a couple of errors our current code contains. This tells us the linting process is working as expected. You could test JS linting by creating a dummy JS file inside a component and writing bad JS in it.

## 9\. One last thing

It goes without saying that we need to add **storybook.info.yml** and **storybook.libraries.yml** files for this to be a true Drupal theme. In addition, we need to create the **templates** directory somewhere within our theme.

### storybook.info.yml

The same way we did for Storybook, we need to create namespaces for Drupal. This requires the [Components](https://www.drupal.org/project/components) module and **storybook.info.yml** configuration is like this:

```yml
components:
 namespaces:
    atoms:
      - src/components/01-atoms
    molecules:
      - src/components/02-molecules
    organisms:
      - src/components/03-organisms
    layouts:
      - src/components/04-layouts
    pages:
      - src/components/05-pages
    templates:
      - src/templates
```

Fig. 21: Drupal namespaces for nesting components.

### storybook.libraries.yml

The recommended method for adding CSS and JS to components or a theme in Drupal is by using [Drupal libraries](https://www.drupal.org/docs/develop/creating-modules/adding-assets-css-js-to-a-drupal-module-via-librariesyml). In our project we would create a library for each component in which we will include any CSS or JS the component needs. In addition, we need to create a **global** library which includes all the global and utilities styles. Here are examples of libraries we can add in **storybook.libraries.yml**.

```yml
global:
  version: VERSION
  css:
    base:
      dist/css/reset.css: {}
      dist/css/base.css: {}
      dist/css/utilities.css: {}

button:
  css:
    component:
      dist/css/button.css: {}

card:
  css:
    component:
      dist/css/card.css: {}

title:
  css:
    component:
      dist/css/title.css: {}
```

Fig. 22: Drupal libraries for global styles and component's styles.

#### /templates

Drupal's templates' directory can be created anywhere within the theme. I typically like to create it inside the **src** directory. Go ahead and create it now.

- Inside **storybook.info.yml**, add a new Twig namespace for the **templates** directory. See example above. Update your path accordingly based on where you created your **templates** directory.

**P.S**: When the Vite project was originally created at the begining of the post, Vite created files such as **App.css**, **App.js**, **main.js**, and **index.html**. All these files are in the root of the project and can be deleted. It won't affect any of the work we've done, but Vite will no longer run on its own, which we don't need it to anyway.

## In closing

I realize this is a very long post, but there is really no way around it when covering these many topics in a single post. I hope you found the content useful and can apply it to your next Drupal project. There are different ways to do what I've covered in this post, and I challenge you to find better and more efficient ways. For now, thanks for visiting.

#### Download the theme

A full version of the Drupal theme built with this post can be downloaded.

[Download the theme](https://github.com/mariohernandez/storybook/tree/theme)

Make sure you are using the **theme** branch from the repo.

Tags for this post

- [Vitejs](https://mariohernandez.io/tag/vitejs/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Storybook](https://mariohernandez.io/tag/storybook/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![White measuring tape on a yellow background](https://mariohernandez.io/images/thumbs/srcset-sizes.webp)





  November 10, 2023



  Resolution switching uses identical images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings.


 [See more posts](https://mariohernandez.io/blog)

## Improve Image Performance
[Skip to content](https://mariohernandez.io/blog/using-modern-image-formats-to-improve-performance/#main-content) [Drupal](https://mariohernandez.io/tag/drupal/)

![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/heroes/webp.webp)

I've always been drawn to working with images, and when responsive images came onto the scene, I dove deep into learning everything I could about them.

I've written extensively about [Responsive images](https://mariohernandez.io/series/responsive-images) if you need a refresher, but today, let's focus on modern image formats. In particular, **WebP**.

## WebP

WebP is a modern image format developed by Google that provides superior compression and quality compared to traditional formats like JPEG and PNG. It supports both lossy and lossless compression, transparency, and animation, making it a versatile choice for web images. WebP helps improve website performance by reducing file sizes, which leads to faster loading times and better user experience.

### Is WebP widely supported?

Since 2020, all major browsers support WebP. ( [Check caniuse for details](https://caniuse.com/?search=webp)). My site, this site, uses WebP exclusively for most images and although it is not a big site, I still see performance improvements.

## Updating Drupal to use WebP

You would think that a big upgrade like this would be a complex task but you'll be surprised to learn that enabling WebP for new and existing images in Drupal is straightforward. Let's quickly go over the steps.

1. Edit each of your image styles and add the **Convert** effect.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/exibit-webp.png)

Fig. 1: Selecting the Convert effect for an image style.

2. Select and add the WebP format to the image style.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/exibit-webp2.png)

Fig. 2: Adding the WebP format to an image style.


That's it!

**Fun fact!**: WebP support was introduced to Drupal core in [Drupal 9.2.0](https://gorannikolovski.com/blog/drupal-92-will-support-webp-images-out-box), which was released on June 16, 2021. Before this core integration, WebP support in Drupal was only available through contributed modules or custom code. The inclusion in core made the format's benefits available to all Drupal 9.2+ sites without requiring additional modules.

## Demo

I did a quick and simple test to show the difference in file size when adding a typical JPEG image to an article, then converting it to WebP using the steps above. The test was done in Drupal 10.x.

### First: Using a JPEG image

Using a JPEG image on an article node, shows a file size of `289kb`.

![Article with JPEG image showing browser's dev tools](https://mariohernandez.io/images/blog-images/img-jpg.webp)

Fig. 3: Example shows using a JPEG format.

### Then: Using a WebP image

After converting the imag eto Webp by updating the image style of that image, the file size was reduced to `76kb`. That's about 60% file size reduction.

![Article with Webp image showing browser's dev tools](https://mariohernandez.io/images/blog-images/img-webp.webp)

Fig. 3: Example shows using a WebP format.

**NOTE**: This was a pretty basic comparison test. File size reduction will vary depending on original file zize, format, and other preferences on your site.

## What about other formats like Avif?

The Avif image format is also a great option with many benefits. The browser support is really good at the time of this post (See [caniuse](https://caniuse.com/?search=avif)), and it's worth looking into it as an alternative to WebP, or even combining the two depending on your media needs.

## In closing

It's all about the small wins. This one is pretty simple but can provide significant performance benefits. Give it a try!

### Resources

- [Google's page on WebP](https://developers.google.com/speed/webp)
- [WebP files explained](https://www.adobe.com/creativecloud/file-types/image/raster/webp-file.html)
- [Mozilla's Image file type formats guide](https://developer.mozilla.org/en-US/docs/Web/Media/Guides/Formats/Image_types#webp_image)

Tags for this post

- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

- ![Person confronted with two paths to choose from](https://mariohernandez.io/images/thumbs/paths.webp)





  September 27, 2023



  There are times when building a Drupal site you need to dynamically point to an asset or resource that may not be saved in the database but instead is located somewhere in the site's file system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.

- ![Stacked rocks by the beach](https://mariohernandez.io/images/thumbs/flexible-headings.webp)





  July 21, 2018



  Headings are normally used for page or section titles and are a big part of making your website SEO friendly and more accessible. For these reasons, headings need to be carefully planned.


 [See more posts](https://mariohernandez.io/blog)

## Automated DDEV Drupal Setup
[Skip to content](https://mariohernandez.io/blog/building-an-automated-ddev-based-drupal-environment/#main-content) [Ddev](https://mariohernandez.io/tag/ddev/)

![Rocks stack from big to small](https://mariohernandez.io/images/rocks.webp)

[Photo by: Markus Spiske](https://unsplash.com/photos/IiEFmIXZWSw)

A successful training experience begins before we step foot in the training room. Or, in these days of distance learning, it begins before students login to your training platform. The challenge is having an environment that is easy for students to setup and provides all the tooling required for the training. Configuring a native development environment is no easy task. Web development tools have gotten more complex with the years and it's a huge barrier for even experienced developers. My goal in setting up this new environment was to have everything completely configured and automated so students only needed to run one command. Very ambitious.

**WARNING**: The codebase shared in this post is only intended for local development. **DO NOT** use this project in a production website.

**About DDEV**: The official name is [DDEV-Local](https://ddev.readthedocs.io/en/stable/). For simplicity I use DDEV in this tutorial.

* * *

**Here are the tools and configuration requirements for this environment**:

- Docker
- DDEV
- Composer
- Drush
- Drupal 8 and contrib modules
- Pre-built Drupal entities (content types, paragraph types, views, view modes, taxonomy, image styles, and more)
- Custom Drupal 8 theme
- Twig debugging enabled by default and Drupal cache disabled by default
- NodeJS, NPM, and NVM
- Pattern Lab
- Gulp, ESLint, Sass Lint, BrowserSync, Autoprefixer, and many many more node dependencies

## Desired behavior

My main objective was to simplify the building and interaction with the environment, by:

- Only require Docker and DDEV to be installed on host computer
- Reducing the number of steps for building the environment to one command, `ddev start`
- Execute most if not all commands in the containers, not the host machine (Drush, Composer, Pattern Lab, etc.)
- Access Pattern Lab running in the web container, from the host machine

**Yes, it is crazy, but let's see how this turned out**

First things first. As I said before, installing Docker and DDEV are the only two things students will need to install. There is no way around this. Luckily there are a lot of resources to help you with this. [The DDEV docs](https://ddev.readthedocs.io/en/stable/#installation) is a great place to start.

## Setting up a Drupal site

Before we start, I'd like to clarify that this post focuses on outlining the process and steps for automating a local environment. However, before we can automate, we need to build all the pieces. If you just want to grab the final product [here's the repo](https://github.com/mariohernandez/drupaltraining), otherwise, read on.

As of Drupal 8.8.0, [Composer project templates](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates) are now available as part of Drupal core. These project templates are recommended for building new Drupal sites as they serve as a starting point for creating a Composer-managed Drupal site.

Two things we will be doing with our Drupal project:

1. Drupal dependencies and modules will not be commited to the git repo. They will be downloaded with Composer when the project is being built.
2. Composer will not be installed in the host system, instead, we will use the composer version that comes with DDEV's web container.

### Let's start

01. Create a new directory for your project. The directory name should be lowercase and alpha-numeric characters only. For this example I will name it **drupaltraining** and will create it in my **/Sites** directory. Using your command line tool create the new directory


    ```bash
    mkdir drupaltraining
    ```

02. Now navigate into the newly created directory


    ```bash
    cd drupaltraining
    ```

03. Run the DDEV command below to setup a new Drupal project


    ```bash
    ddev config --project-type=drupal8 --docroot=web --create-docroot
    ```


    - This will create a `.ddev` directory with basic Drupal configuration.
    - It will also create `settings.php` and settings.ddev.php\` files inside **web/sites/default**.
    - Finally, it creates a Drush directory.
    - Keep in mind, Drupal is not in place yet, this simply sets the environment for it.
04. Now start DDEV to create the containers.


    ```bash
    ddev start
    ```


    - After the project has been built, you will see a link to open Drupal in the browser. For this project the link should be `https://drupaltraining.ddev.site` (ignore for now). If you have not installed **mkcert** ( `mkcert -install`), the link you see may use `http` instead of `https`. That's fine, but I'd recommend always using https by installing `mkcert`.
05. Now we are going to create the codebase for Drupal by using the official [Drupal community\\
    \\
    Composer template](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates).


    ```bash
    ddev composer create "drupal/recommended-project:^8"
    ```


    _Respond **Yes** when asked if it's okay to override everything in the existing directory_.

    - This will setup the codebase for Drupal. This could take a while depending on your connection.
    - `composer.json` will be updated so Drupal is added as a project's dependency.
    - New `settings.php` and `settings.ddev.php` files are created.
    - Using `ddev composer create` uses the version of composer that comes as part of the DDEV's web container. This means composer is not required to be installed in the host's computer.
    - One thing I love about using the new composer template is the nice list of next steps you get after downloading Drupal's code base. So useful!
06. Now let's grab some modules


    ```bash
    ddev composer require drupal/devel drupal/admin_toolbar drupal/paragraphs drupal/components drupal/viewsreference drupal/entity_reference_revisions drupal/twig_field_value
    ```


    - This will download the modules and update **composer.json** to set them as dependencies along with Drupal. The modules and Drupal's codebase will not be commited to our repo.
07. Let's add Drush to the project


    ```bash
    ddev composer require drush/drush
    ```


    - Installing Drush as part of the project which will run in the web container will make it possible to run drush commands ( `ddev drush <command>`), even if the host does not have drush installed.
08. Now launch Drupal in the browser to complete the installation


    ```bash
    ddev launch
    ```


    - This will launch Drupal's intall page. Drupal's url will be **[https://drupaltraining.ddev.site](https://drupaltraining.ddev.site/)**. Complete the installation by using the Standard profile. Since the `settings.ddev.php` file already exists, the database configuration screen will be skipped from the installation.
09. Make a copy of `example.settings.local.php` into **web/sites/default**


    ```bash
    cp web/sites/example.settings.local.php web/sites/default/settings.local.php
    ```


    - This is recommended to override or add new configuration to your Drupal site.
10. Update `settings.php` to include `settings.local.php`.


    ```php
    if (file_exists($app_root . '/' . $site_path . '/settings.local.php')) {
      include $app_root . '/' . $site_path . '/settings.local.php';
    }
    ```


    - I'd suggest adding the above code right after the `settings.ddev.php` include already in settings.php. This will allow us to override configuration found in settings.ddev.php.
11. Let's change Drupal's default config directory. Doing this will export any configuration outside the `web` directory in Drupal. This is a good security measure. Let's also ignore a couple of folders to avoid drupal errors.


    ```php
    if (empty($settings['config_sync_directory'])) {
      $settings['config_sync_directory'] = '../config/sync';
    }

    $settings['file_scan_ignore_directories'] = [\
      'node_modules',\
      'bower_components',\
    ];
    ```


    - First block changes the default sync directory to `drupaltraining/config/sync`. If you look inside settings.ddev.php you will see that this directory is inside `web`. We want to store any configuration changes outside the web directory.
    - Second block sets up Drupal to ignore `node_modules` and `bower_components`. Drupal may look for twig templates inside these directories and could cause Drupal to crash. Ignoring these directories solves these issues.
12. Since we've made changes to DDEV's configuration, restart DDEV


    ```bash
    ddev restart
    ```


That's quite the process, isn't it? The good news is this entire process will be eliminated when we finish automating the environment.

## Drupal 8 custom theme

The project's theme is called `training_theme`. This is a node-based theme, and will be built with [Mediacurrent's theme generator](https://github.com/mediacurrent/theme_generator_8), which will provide:

- A best-practices Drupal 8 theme
- Pattern Lab integration
- Automated Front-End workflow
- Component-based-ready environment
- Production-ready theme

The final DDEV project will include the new Drupal 8 theme so there is no need to create it now, but if you want to see how the Theme Generator works, [Watch the video tutorial](https://mariohernandez.io/blog/mediacurrent-theme-generator) I recorded.

## Automating our environment

Now that Drupal has been setup let's begin the automation process.

### Dockerfile

A web Docker container comes with Node and NPM installed. This will work in most cases, but the Drupal theme may use a version of node not currently available in the container. In addition, the web container does not include Node Version Manager ( [NVM](https://github.com/nvm-sh/nvm)), to manage multiple node versions. If the tools we need are not available in the web or db images/containers, there are ways to modify them to include the required tools. One of those ways is an add-onDockerfile in your project's **.ddev/web-build** or **.ddev/db-build**, depending which container you are trying to modify.

Inside **.ddev/web-build** create a file called **Dockerfile** (case sensitive), and in it, add the following code:

```bash
ARG BASE_IMAGE
FROM $BASE_IMAGE
ENV NVM_DIR=/usr/local/nvm
ENV NODE_DEFAULT_VERSION=v14.2.0
RUN curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh -o install_nvm.sh
RUN mkdir -p $NVM_DIR && bash install_nvm.sh
RUN echo "source $NVM_DIR/nvm.sh" >>/etc/profile
RUN bash -ic "nvm install $NODE_DEFAULT_VERSION && nvm use $NODE_DEFAULT_VERSION"
RUN chmod -R ugo+w $NVM_DIR
```

The code above sets an environment variable for default node version (v14.2.0), which is the node version the theme uses at the time of this setup. It installs and configures NVM, and makes NVM executable by updating the container's bash profile. A Dockerfile runs while the image or container is being built to alter any default configuration with the code found in the Dockerfile.

### Custom DDEV commands

The Drupal 8 theme for this project uses Node for most of its tasks. To compile CSS, JavaScript, and Twig we need to run commands such as `npm install`, `npm run build`, `npm run watch`, and others. Our goal is to be able to run these commands in the web container, not the host computer. Doing this eliminates the need for students to install any node-related tools which can get really complicated. While we could achieve this by asking students to first SSH into the web container ( `ddev ssh`), then navigate into **/web/themes/custom/training\_theme/**, then run the commands, I want to make it even easier for them. I want them to be able to run the commands from any directory within the project and to not have to ssh into the web container. To achieve this we need to create a couple of custom commands.

Custom commands can be created to run in containers as well as the host machine. Since we want to run these commands in the web container, we are going to create the commands inside **.ddev/commands/web/**. Custom commands are bash script files.

#### NVM custom command

- Inside **.ddev/commands/web/** create a new file called **nvm**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run any nvm command.
## Usage: nvm [flags] [args]
## Example: "nvm use or nvm install"
source /etc/profile && cd /var/www/html/web/themes/custom/training_theme && nvm $@
```

- Since this is a bash script, `#!/bin/bash` is required as the first line in the file.
- A description of the script is a good practice to explain what the script does.
- Pay close attention to `## Usage: nvm [flgas] [args]`. This is what makes the commands work. The \[flags\] and \[args\] are ways to pass arguments to the command. For example, `nvm` on its own won't do much, but `use` or `install` can be passed as parameters to complete the commands `nvm use` or `nvm install`. Being able to run these commands will allow us to install new versions of Node later on if needed.
- Next we are adding examples of potential commands that can be run.
- Finally, you see the code or actual commands. `source /etc/profile` is basically resetting the container's bash profile so NVM can run. Then we navigate into the `training_theme` directory within the container where the nvm commands will be executed. So technically in the script above we are running 3 commands in one. Using `&&` in between each command lets us combine or concatenate them. The `$@` after nvm represent the flags or arguments we can pass (i.e. _use_ or _install_).

**Running the new commands**: Every custom command needs to be executed by adding `ddev` before the command. For example: `ddev nvm use`. Using ddev infront of the command instructs the system to run the commands in the containers, rather than the host computer.

#### NPM custom commands

We will also create a custom script to run NPM commands. This will be similar to the NVM script. This new script will be executed as `ddev npm install` or `ddev npm run build`, etc. The npm commands will allow us to install node dependencies by the theme as well as execute tasks like compiling code, linting code, compressing assets, and more.

- Create a new file inside **.ddev/commands/web** and call it **npm**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run npm commands inside theme.
## Usage: npm [flags] [args]
## Example: "npm install or npm rebuild node-sass or npm run build or npm run watch"
cd /var/www/html/web/themes/custom/training_theme && npm $@
```

- Most of the code here is similar to the previous script, except instead of **nvm** we will run **npm**.
- Notice we are again navigating into the theme directory before running the command. This make is possible for the custom commands we are creating to be ran from any directory within our project while still being executed inside the **training\_theme** directory in the container.

#### Drush custom command

Let's create one last custom command to run drush commands within the DDEV containers

- Create a new file inside **.ddev/commands/web** and call it **drush**
- Add the following code in the file:

```bash
#!/bin/bash
## Description: Run drush inside the web container
## Usage: drush [flags] [args]
## Example: "ddev drush uli" or "ddev drush sql-cli" or "ddev drush --version"
drush $@
```

- This will allow us to run drush commands in the container but using `ddev drush <command>` (i.e. `ddev drush cr`, `ddev drush updb -y`, etc.).

So that's it for custom commands. By having custom commands for nvm and npm, we can now successfully run any theming related tasks.

## Automating Drupal's setup

We want to streamline the drupal installation process. In addition, we want to be able to import a custom database file to have access to all the infrastructure needed during training. This includes content types, paragraph types, views, view modes, image styles, and more. Enter [DDEV hooks](https://ddev.readthedocs.io/en/stable/users/extending-commands/).

### DDEV Hooks

Hooks are a great way to perform tasks before or after DDEV starts. There are tasks that need to happen in specific sequence and hooks allow us to do just that. So what's the differnce between custom commands and hooks? Technically hooks can be considered custom commands, but the difference is that they are executed automatically before or after DDEV starts, whereas custom commands are ran on demand at any time. DDEV needs to be running if custom commands are intended to run in containers. Back to hooks, Let's build a **post-start** hook.

Hooks can be ran as **pre-start**, **post-start**, and **after-db-import**. Also, hooks can be executed inside containers and/or the host machine. In our case all the tasks we outlined above will be ran after DDEV starts and most of them in Docker's containers.

- Open **.ddev/config.yaml** and add the following code at the bottom of the file. There may already be a **hooks** section in your file. Be sure indentation in the file is correct.

```yaml
  hooks:
      post-start:
        - composer: install
        - exec: /var/www/html/db/import-db.sh
        - exec: drush updb -y
        - exec: drush cim -y
        - exec-host: cp -rf web/sites/example.development.services.yml web/sites/development.services.yml
        - exec-host: cp -rf web/assets/images/* web/sites/default/files/images/
        - exec: drush cr
        - exec-host: ddev launch /user
```

- **post-start:** indicates tasks declared will run after DDEV container's have started. We want the web and db containers available before running any of the tasks.
- `composer: install` will download all dependencies found in `composer.json` (Drupal core, modules, drush and others).
- `exec: /var/www/html/db/import-db.sh` is a custom script which imports a custom database file (provided in this project). We will go over this script shortly. Importing a custom database builds the Drupal site without having to install Drupal as long as Drupal's codebase exists.
- `exec: drush cim -y`, `exec: drush updb -y`, and `exec: drush cr`, are basic drush commands.
- `exec-host: cp -rf web/sites/example.development.services.yml web/sites/development.services.yml` will create a new `development.services.yml`. This is needed because when Drupal is setup, `development.services.yml` is overridden and since we are using custom configuration in that file to enable twig debugging, we need to restore the configuration by replacing the file with a copy of our own.
- `exec-host: cp -rf web/assets/images/* web/sites/default/files/images/` copies a collection of images used in the demo content added to the site.
- Finally, `exec-host: ddev launch /user` will open a fully configured Drupal website in the browser.

**Login to Drupal**: Username: `admin`, password: `admin`

### Import database script

Now let's write the script to import the database we are using in the hook above.

- In your project's root, create a new directory called **db**
- In the new directory create a new file called `import-db.sh` and add the following code:

```bash
#!/bin/bash
# Use a table that should exist in your database.
if ! mysql -e 'SELECT * FROM node__field_hero;' db 2>/dev/null; then
  echo 'Importing the database'
  # Provide path to custom database.
  gzip -dc /var/www/html/db/drupaltraining.sql.gz | mysql db
fi
```

- This is again another bash script which performs a database import but only if the database is empty or clean. We do this by checking if one of the tables we expect in the database exists ( `node__field_hero`). If it does, the database is not imported, but if it doesn't it will import the database. This table can be any table you know it should exist.

- Notice the script calls for a database file named `drupaltraining.sql.gz`. This means the database file shold exist inside the **db** directory alongside the `import-db.sh` script. This database file was created/exported after Drupal was configured with all training required infrastructure and settings.

- Make the script executable


```bash
chmod +x db/import-db.sh
```

- This will ensure the script can be executed by DDEV, otherwise we would get a **permission denied** error.

This does it for automation. The next few tasks are things that improve the development environment. Some of these tasks are optional.

## Exposing Pattern Lab's port in host computer

Since our goal is to not have to install any Front-End tools in the host computer, running Pattern Lab has to be done in the web container. The problem is we can't open Pattern Lab in the host's browser if Pattern Lab is running in the container. For this to work we need to expose the port in which Pattern Lab runs to the host machine. In this environment, that port is 3000 (this port number may vary). We identify this port by running `npm run watch` inside the `training_theme` directory. This will provide a series of links to access Pattern Lab in the browser.

Under the hood, DDEV uses docker-compose to define and run the multiple containers that make up the local environment for a project. docker-compose supports defining multiple compose files to facilitate sharing Compose configurations between files and projects, and DDEV is designed to leverage this ability.

### Creating a new docker-compose.\*.yaml

A docker-compose file allows to do many things including exposing ports from the containers to the host computer.

On a typical Pattern lab project if you run `npm start` you will see Pattern Lab running on `http://localhost:3000`. In this environment the equivalent command is `ddev npm run watch`. Since this environment is running Pattern Lab in the web container, the only way to access Pattern Lab in the browser is by having access to the container's port 3000. Exposing the port via the `http` or `https` protocols makes it possible to access Pattern Lab's UI page from the host machine.

1. Inside **.ddev/**, create a new file called **docker-compose.patternlab.yaml**

2. In the new file add the following code:


```yaml
# Override the web container's standard HTTP_EXPOSE and HTTPS_EXPOSE
# to access patternlab on https://drupaltraining.ddev.site:3000, or http://drupaltraining.ddev.site:3001.
version: '3.6'
services:
     web:
       # ports are a list of exposed *container* ports
       ports:
      - "3000"
    environment:
      - HTTP_EXPOSE=${DDEV_ROUTER_HTTP_PORT}:80,${DDEV_MAILHOG_PORT}:8025,3001:3000
      - HTTPS_EXPOSE=${DDEV_ROUTER_HTTPS_PORT}:80,${DDEV_MAILHOG_HTTPS_PORT}:8025,3000:3000
```

   - The name of the file is completely optional. It makes sense to use a name that is related to the action, app, or service you are trying to implement. In this example the name **docker-compose.patternlab.yaml** made sense.
   - How did we arrive at the content above for this file? DDEV comes with two files that can be used as templates for new configuration, one of those files is called **.ddev-docker-compose-base.yaml**. You can find all the code we added above in this file.
3. Restart DDEV to allow for the new changes to take effect:


```bash
ddev restart
```


   - The basics of the code above is modifying the web container's port 3000. We are exposing this port through the `http` and `https` protocols on the host machine.
4. For the above to work Pattern Lab needs to be running in the container:


```bash
ddev npm run watch
```


**Viewing Pattern Lab in the host machine**

- [https://drupaltraining.ddev.site:3000](https://drupaltraining.ddev.site:3000/) or
- [http://drupaltraining.ddev.site:3001](http://drupaltraining.ddev.site:3001/)

## Using NFS (optional)

Last but not least, enabling NFS in DDEV can help with performance of your application. NFS (Network File System) is a classic, mature Unix technique to mount a filesystem from one device to another. It provides significantly improved webserver performance on macOS and Windows. This is completely optional and in most cases you may not even need to do this. The steps below are for macOS only. [Learn more about NFS](https://ddev.readthedocs.io/en/stable/users/performance/#using-nfs-to-mount-the-project-into-the-web-container) and how to enable it in other Operating Systems like Windows.

- In your command line run

```bash
id
```

- Make note of `uid` (user id) and `gid` (group id).
- Open `etc/exports` in your code editor, and add the following code, preferably at the top of the file:

```bash
/System/Volumes/Data/Users/xxxx/Sites/Docker -alldirs -mapall=502:20 localhost
```

- Replace `xxxx` with your username. The full path shown above is required if you are using macOS Catalina.

- Replace `Sites/Docker` (This is my personal project's directory), with the directory name where your DDEV projects are created. Most people would mount the entire user's home directory, but I think only mounting the directory where your projects live is good enough ( `/Sites/Docker/`).

- Replace `502` and `20` with the values you got when you ran the `id` command above.

- Update DDEV's config.yml to enable NFS


```yaml
nfs_mount_enabled: true
```

- Restart DDEV

```bash
ddev restart
```

You should notice an improvement in performance in your Drupal website.

## In closing

I realize there is a lot here, but I am pretty happy with how this turned out. Thanks to all the work in this article, when one of the students wants to setup their training environment, all the have to do is run `ddev start`. I think that's pretty sweet! 🙌 Happy DDEVing!

* * *

### Giving credit

Before I started on this journey, I knew very little about DDEV. Thanks to the amazing help from [Randy Fray](https://www.drupal.org/u/rfay) from [Drud.com](http://drud.com/) and [Michael Anello](https://www.drupal.org/u/ultimike) from [DrupalEasy.com](http://drupaleasy.com/), I have learned a lot in the past weeks and wanted to share with other community members. You can find both, Randy and Michael on [Drupal's DDEV Slack Channel](https://drupal.slack.com/#/). They are extremely helpful and responsive.

### Resources

- [Final product repo](https://github.com/mariohernandez/drupaltraining)
- [Drupal composer project template](https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates)
- [DDEV docs](https://ddev.readthedocs.io/en/stable/#installation)
- [Local Web Development with DDEV Explained](https://www.drupaleasy.com/blogs/ultimike/2018/11/new-book-local-web-development-ddev-explained) (Book)

Tags for this post

- [Ddev](https://mariohernandez.io/tag/ddev/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Training](https://mariohernandez.io/tag/training/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Two picture frames on a counter](https://mariohernandez.io/images/thumbs/picture-frames.webp)





  November 24, 2023



  Responsive image styles in Drupal are bundles that contain one or more image styles.

- ![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/thumbs/storybook-thumb.webp)





  April 14, 2024



  Storybook has emerged as a promising tool for building a modern front-end Drupal environment in recent years. In this post we are going to build a Drupal theme with Storybook as its design system.

- ![Overlapped mountains painted with water colors](https://mariohernandez.io/images/thumbs/mountains-thumb.webp)





  May 2, 2024



  In this post we'll go over the process of making Drupal aware of the components we have built in Storybook.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Theme Migration
[Skip to content](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/#main-content) [Storybook](https://mariohernandez.io/tag/storybook/)

![Wooden hammer painted in yellow in a yellow background](https://mariohernandez.io/images/storybook.webp)

[Photo by: Markus Spiske](https://unsplash.com/@markusspiske)

Building a custom Drupal theme nowadays is a more complex process than it used to be. Most themes require some kind of build tool such as Gulp, Grunt, Webpack or others to automate many of the repeatitive tasks we perform when working on the front-end. Tasks like compiling and minifying code, compressing images, linting code, and many more. As Atomic Web Design became a thing, things got more complicated because now if you are building components you need a styleguide or Design System to showcase and maintain those components. One of those design systems for me has been Patternlab. I started using Patternlab in all my Drupal projects almost ten years ago with great success. In addition, Patternlab has been the design system of choice at my place of work but one of my immediate tasks was to work on migrating to a different design system. We have a small team but were very excited about the challenge of finding and using a more modern and robust design system for our large multi-site Drupal environment.

## Enter Storybook

After looking a various options for a design system, [Storybook](https://storybook.js.org/) seemed to be the right choice for us for a couple of reasons: one, it has been around for about 10 years and during this time it has matured significantly, and two, it has become a very popular option in the Drupal ecosystem. In some ways, Storybook follows the same model as Drupal, it has a pretty active community and a very healthy ecosystem of plugins to extend its core functionality.

Storybook looks very promising as a design system for Drupal projects and with the recent release of [Single Directory Components or SDC](https://www.drupal.org/project/sdc), and the new [Storybook module](https://www.drupal.org/project/storybook), we think things can only get better for Drupal front-end development. Unfortunately for us, technical limitations in combination with our specific requirements, prevented us from using SDC or the Storybook module. Instead, we built our environment from scratch with a stand-alone integration of Storybook 8.

**INFO**: At the time of our implementation, TwigJS did not have the capability to resolve [SDC's](https://www.drupal.org/project/sdc) namespace. It appears this has been addressed and using SDC should now be possible with this custom setup. I haven't personally tried it and therefore I can't confirm.

## Our process and requirements

In choosing Storybook, we went through a rigorous research and testing process to ensure it will not only solve our immediate problems with our current environment, but it will be around as a long term solution. As part of this process, we also tested several available options like [Emulsify](https://www.emulsify.info/) and [Gesso](https://github.com/forumone/gesso) which would be great options for anyone looking for a ready-to-go system out of the box. Some of our requirements included:

### 1\. No components refactoring

The first and non-negotiable requirement was to be able to migrate components from Patternlab to a new design system with the least amount of refactoring as possible. We have a decent amount of components which have been built within the last year and the last thing we wanted was to have to rebuild them again because we are switching design system.

### 2\. A new Front-end build workflow

I personally have been faithful to Gulp as a front-end build tool for as long as I can remember because it did everything I needed done in a very efficient manner. The Drupal project we maintain also used Gulp, but as part of this migration, we wanted to see what other options were out there that could improve our workflow. The obvious choice seemed to be Webpack, but as we looked closer into this we learned about [ViteJS](https://vitejs.dev/), " _The Next Genration Frontend Tooling_". Vite delivers on its promise of being " _blazing fast_", and its ecosystem is great and growing, so we went with it.

### 3\. No more Sass in favor of PostCSS

CSS has drastically improved in recent years. It is now possible with plain CSS, to do many of the things you used to be able to only do with Sass or similar CSS Preprocessor. Eliminating Sass from our workflow meant we would also be able to get rid of many other node dependencies related to Sass. The goal for this project was to use plain CSS in combination with PostCSS and one bonus of using Vite is that Vite offers PostCSS processing out of the box without additional plugins or dependencies. Ofcourse if you want to do more advance PostCSS processing you will probably need some external dependencies.

## Building a new Drupal theme with Storybook

Let's go over the steps to building the base of your new Drupal theme with ViteJS and Storybook. This will be at a high-level to callout only the most important and Drupal-related parts. This process will create a brand new theme. If you already have a theme you would like to use, make the appropriate changes to the instructions.

### 1\. Setup Storybook with ViteJS

#### ViteJS

- In your Drupal project, navigate to the theme's directory (i.e. `/web/themes/custom/`)
- Run the following command:

```shell
npm create vite@latest storybook
```

- When prompted, select the framework of your choice, for us the framework is React.
- When prompted, select the variant for your project, for us this is JavaScript

After the setup finishes you will have a basic Vite project running.

#### Storybook

- Be sure your system is running NodeJS version 18 or higher
- Inside the newly created theme, run this command:

```shell
npx storybook@latest init --type react
```

- After installation completes, you will have a new Storybook instance running
- If Storybook didn't start on its own, start it by running:

```shell
npm run storybook
```

#### TwigJS

Twig templates are server-side templates which are normally rendered with TwigPHP to HTML by Drupal, but Storybook is a JS tool. TwigJS is the JS-equivalent of TwigPHP so that Storybook understands Twig. Let's install all dependencies needed for Storybook to work with Twig.

- If Storybook is still running, press **Ctrl + C** to stop it
- Then run the following command:

```shell
npm i -D vite-plugin-twig-drupal html-react-parser twig-drupal-filters @modyfi/vite-plugin-yaml
```

- [vite-plugin-twig-drupal](https://github.com/larowlan/vite-plugin-twig-drupal): If you are using Vite like we are, this is a Vite plugin that handles transforming twig files into a Javascript function that can be used with Storybook. This plugin includes the following:
  - [Twig](https://www.npmjs.com/package/twig) or TwigJS: This is the JavaScript implementation of the Twig PHP templating language. This allows Storybook to understand Twig.

    **Note**: TwigJS may not always be in sync with the version of Twig PHP in Drupal and you may run into issues when using certain Twig functions or filters, however, we are adding other extensions that may help with the incompatability issues.
  - [drupal attribute](https://github.com/ericmorand/drupal-attribute): Adds the ability to work with Drupal attributes.
- [twig-drupal-filters](https://www.npmjs.com/package/twig-drupal-filters): TwigJS implementation of Twig functions and filters.
- [html-react-parser](https://www.npmjs.com/package/html-react-parser): This extension is key for Storybook to parse HTML code into react elements.
- [@modifi/vite-plugin-yaml](https://github.com/Modyfi/vite-plugin-yaml): Transforms a YAML file into a JS object. This is useful for passing the component's data to React as args.

#### ViteJS configuration

Update your **vite.config.js** so it makes use of the new extensions we just installed as well as configuring the namesapces for our components.

```js
import { defineConfig } from "vite"
import yml from '@modyfi/vite-plugin-yaml';
import twig from 'vite-plugin-twig-drupal';
import { join } from "node:path"
export default defineConfig({
  plugins: [\
    twig({\
      namespaces: {\
        components: join(__dirname, "./src/components"),\
        // Other namespaces maybe be added.\
      },\
    }),\
    // Allows Storybook to read data from YAML files.\
    yml(),\
  ],
})
```

#### Storybook configuration

Out of the box, Storybook comes with **main.js** and **preview.js** inside the **.storybook** directory. These two files is where a lot of Storybook's configuration is done. We are going to define the location of our components, same location as we did in **vite.config.js** above (we'll create this directory shortly). We are also going to do a quick config inside **preview.js** for handling drupal filters.

- Inside **.storybook/main.js** file, update the stories array as follows:

```js
stories: [\
  "../src/components/**/*.mdx",\
  "../src/components/**/*.stories.@(js|jsx|mjs|ts|tsx)",\
],
```

- Inside **.storybook/preview.js**, update it as follows:

```js
/** @type { import('@storybook/react').Preview } */
import Twig from 'twig';
import drupalFilters from 'twig-drupal-filters';

function setupFilters(twig) {
  twig.cache();
  drupalFilters(twig);
  return twig;
}

setupFilters(Twig);

const preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
  },
};

export default preview;
```

#### Creating the components directory

- If Storybook is still running, press **Ctrl + C** to stop it
- Inside the **src** directory, create the **components** directory. Alternatively, you could rename the existing **stories** directory to **components**.

## Creating your first component

With the current system in place we can start building components. We'll start with a very simple component to try things out first.

- Inside **src/components**, create a new directory called **title**
- Inside the **title** directory, create the following files: _title.yml_ and _title.twig_

### Writing the code

- Inside **title.yml**, add the following:

```yaml
---
level: 2
modifier: 'title'
text: 'Welcome to your new Drupal theme with Storybook!'
url: 'https://mariohernandez.io'
```

- Inside **title.twig**, add the following:

```php
<h{{ level|default(2) }}{% if modifier %} class="{{ modifier }}"{% endif %}>
  {% if url %}
    <a href="{{ url }}">{{ text }}</a>
  {% else %}
    <span>{{ text }}</span>
  {% endif %}
</h{{ level|default(2) }}>
```

We have a simple title component that will print a title of anything you want. The **level** key allows us to change the heading level of the title (i.e. h1, h2, h3, etc.), and the **modifier** key allows us to pass a modifier class to the component, and the **url** will be helpful when our title needs to be a link to another page or component.

Currently the title component is not available in storybook. Storybook uses a special file to display each component as a story, the file name is **component-name.stories.jsx**.

- Inside **title** create a file called **title.stories.jsx**
- Inside the stories file, add the following:

```js
/**
 * First we import the `html-react-parser` extension to be able to
 * parse HTML into react.
 */
import parse from 'html-react-parser';

/**
 * Next we import the component's markup and logic (twig), data schema (yml),
 * as well as any styles or JS the component may use.
 */
import title from './title.twig';
import data from './title.yml';

/**
 * Next we define a default configuration for the component to use.
 * These settings will be inherited by all stories of the component,
 * shall the component have multiple variations.
 * `component` is an arbitrary name assigned to the default configuration.
 * `title` determines the location and name of the story in Storybook's sidebar.
 * `render` uses the parser extension to render the component's html to react.
 * `args` uses the variables defined in title.yml as react arguments.
 */
const component = {
  title: 'Components/Title',
  render: (args) => parse(title(args)),
  args: { ...data },
};

/**
 * Export the Title and render it in Storybook as a Story.
 * The `name` key allows you to assign a name to each story of the component.
 * For example: `Title`, `Title dark`, `Title light`, etc.
 */
export const TitleElement = {
  name: 'Title',
};

/**
 * Finally export the default object, `component`. Storybook/React requires this step.
 */
export default component;
```

- If Storybook is running you should see the title story. See example below:
- Otherwise start Storybook by running:

```shell
npm run storybook
```

With Storybook running, the title component should look like the image below:

![Computer screenshot of a demo story in Storybook](https://mariohernandez.io/images/storybook-demo.webp)

_The controls highlighted at the bottom of the title allow you to change the values of each of the fields for the title._

I wanted to start with the simplest of components, the title, to show how Storybook, with help from the extensions we installed, understands Twig. The good news is that the same approach we took with the title component works on even more complex components. Even the React code we wrote does not change much on large components.

In the [next blog post](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components), we will build more components that nest smaller components, and we will also add Drupal related parts and configuration to our theme so we can begin using the theme in a Drupal site. Finally, we will integrate the components we built in Storybook with Drupal so our content can be rendered using the component we're building. Stay tuned. For now, if you want to grab a copy of all the code in this post, you can do so below.

[Download the code](https://github.com/mariohernandez/storybook)

## Resources

- [Storybook docs](https://storybook.js.org/docs/get-started)
- [How to write stories](https://storybook.js.org/docs/writing-stories)
- [Single Directory Components](https://www.drupal.org/project/sdc)
- [Storybook Drupal module](https://www.drupal.org/project/storybook)

## In closing

Getting to this point was a team effort and I'd like to thank [Chaz Chumley](https://github.com/chazchumley), a Senior Software Engineer, who did a lot of the configuration discussed in this post. In addition, I am thankful to the Emulsify and Gesso teams for letting us pick their brains during our research. Their help was critical in this process.

I hope this was helpful and if there is anything I can help you with in your journey of a Storybook-friendly Drupal theme, feel free to reach out.

Tags for this post

- [Storybook](https://mariohernandez.io/tag/storybook/)
- [Drupal](https://mariohernandez.io/tag/drupal/)

### Series: Storybook

1. [Migrating your Drupal theme from Patternlab to Storybook](https://mariohernandez.io/blog/migrating-your-drupal-theme-from-patternlab-to-storybook/)
2. [Integrating Drupal with Storybook components](https://mariohernandez.io/blog/integrating-drupal-with-storybook-components/)
3. [Components variations in Storybook](https://mariohernandez.io/blog/components-variations-in-storybook/)
4. [Automating your Drupal Front-end with ViteJS](https://mariohernandez.io/blog/automating-your-drupal-front-end-with-vitejs/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Siluete of man in front of sphere](https://mariohernandez.io/images/thumbs/media-embed-small.webp)





  January 1, 2024



  Take control of your image embeds in your site using Drupal's media.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.

- ![Team members conducting training workshop](https://mariohernandez.io/images/thumbs/students.webp)





  April 20, 2019



  DrupalCon Seattle 2019 proved to be our best experience yet at conducting a training workshop and would like to share the good and bad with you.


 [See more posts](https://mariohernandez.io/blog)

## Drupal Image Cropping Fix
[Skip to content](https://mariohernandez.io/blog/solved-cannot-crop-based-on-original-image-after-initial-crop-has-been-set/#main-content) [Drupal](https://mariohernandez.io/tag/drupal/)

![Person taking a picture with their phone](https://mariohernandez.io/images/crop.webp)

[Photo by: Kipras Štreimikis](https://unsplash.com/@kkipras)

If you have read my posts about responsive images you will know I have done quite a bit of work with Drupal media and in particular, images. However, I recently ran into an issue I had not experienced before and it was quite challenging to comprehend. The issue was related to image cropping.

In our Drupal platform we allow content editors to manually crop images using a hand-full of crop types for various aspect ratios such as 1:1, 3:4, 4:3, 16:9, etc. To achieve the manual crop we use the [Crop API](https://www.drupal.org/project/crop) and [Image Widget Crop](https://www.drupal.org/project/image_widget_crop) Drupal modules.

The issue we started noticing is that no matter the image we were using, all cropping settings were limited to a predefined aspect ratio of 1:1 or square, rather than the original image's aspect ratio. This was causing big problems for us because editors were not able to properly crop images and as a result images were rendered with odd cropping settings.

After some research, I found an issue that had been reported in the Image Widget Crop module, [issue #3222406](https://www.drupal.org/project/image_widget_crop/issues/3222406). This was exactly the issue we were having and was relieved it wasn't something unique to our platform.

## Cause of the issue

Looking back, I think this issue was partly of my own making, but seeing that others were experiencing the same it's also possible it was just an odd bug. Long story short, the issue was caused by using an image style with specific hard dimension, as the **crop preview** image, See **Fig. 1** below.

![Image crop preview settings](https://mariohernandez.io/images/blog-images/crop-preview.png)

Fig. 1: Screenshot of Crop preview configuration.

You may not know this but you can change image styles for almost any image within Drupal's admin. I recently completed a lot of work around image styles within our platform and perhaps I unknowingly changed the image style used by Drupal's crop preview. I can't say for sure.

## Solution

The issue was not so much the aspect ratio used in the image style used as the crop preview, but rather the hard dimensions of the image style. These dimensions were forcing all images, regardless of their aspect ratio, to use the square aspect ratio as the starting point for cropping, rather than the original image.

The solution is to use an image style that uses the **Scale** image effect, as the crop preview. The Scale image effect does not require image dimensions and thus allows your cropping area to always reset to the original image.

If you read [comment #5](https://www.drupal.org/project/image_widget_crop/issues/3222406#comment-14903564) in the issue page you will see **juamerico** explanation of the issue in more detail and what he did to fix it.

### Steps taken to address the issue

1. I created a new image style called **Crop preview** with the Scale image effect as well as using a wide aspect ratio or crop type such as 16:9.
2. I configured the **Manage form display** for the **Image** media type ( `admin/structure/media/manage/image/form-display`), so it uses the new image style I just created. See **Fig. 2** below

![Image crop preview settings](https://mariohernandez.io/images/blog-images/crop-preview-img.png)

Fig. 2: Screenshot of Manage form display settings for images.

**NOTE**: Your environment may be configured differently than mine and you may not have the same options as I do.

With the changes to the Crop preview image style, every time you crop the image you are dealing with the original image rather than an already cropped image.

## In closing

The main reason for writing about this topic is so I know what to do next time I run into this issue. I hope you find this helpful.

Tags for this post

- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Media](https://mariohernandez.io/tag/media/)
- [Crop](https://mariohernandez.io/tag/crop/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

- ![Pencils of different sizes over a blue background](https://mariohernandez.io/images/thumbs/picture-element.webp)





  November 3, 2023



  In the context of responsive images, art direction is the ability to display differently-cropped images based on the device size.

- ![A person rowin behind a water color painted sky](https://mariohernandez.io/images/thumbs/image-styles.webp)





  November 17, 2023



  I'd like to think of Drupal's image styles as templates for cropping and sizing images.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.


 [See more posts](https://mariohernandez.io/blog)

## Image Resolution Switching
[Skip to content](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/#main-content) [Responsive Images](https://mariohernandez.io/tag/responsive-images/)

![White measuring tape on a yellow background](https://mariohernandez.io/images/srcset-sizes.webp)

[Photo by: Diana Polekhina](https://unsplash.com/@diana_pole)

In the [previous article](https://mariohernandez.io/blog/responsive-images-and-the-picture-html-element) we defined what art direction is and how to address it using the `<picture>` element. In this post, the focus will be how to address responsive images when the requirement is image resolution switching. Resolution switching, in the context of responsive images, is rendering identical image content on all devices. Unlike art direction where each device gets a differently cropped image that may vary on aspect ratio, resolution switching uses images that are simply larger or smaller based on the device but retain the same aspect ratio and cropping settings. Resolution switching is how most images are rendered (the rule), the `<picture>` element approach is the exception to the rule. Take a look at an example of resolution switching below.

![Image of lights show displayed in different device sizes](https://mariohernandez.io/images/res-switching.webp)

The image above demonstrate how multiple resolutions of the same image can be served to different devices. All the images in the example above are cropped exactly the same maintaining the same aspect ratio from large to small.

## Using `srcset` and `sizes` attributes

Using the `srcset` and `sizes` image attributes is how most images are rendered in the web today. As indicated before, this is the recommended way for configuring responsive images if all you need is to switch resolution of images rather than art direction. So how does this approach work? Let's take a look at a typical configuration of the `<img>` tag using the image above as an example of the different image sizes we will want the browser to choose from:

```html
<img
  srcset="original-image.jpg 2400w, extra-large.jpg 2000w,
          large.jpg 1600w, medium.jpg 1080w, small.jpg 800w, x-small.jpg 500w"
  sizes="100vw"
  src="large.jpg"
  alt="Image of sky shown at different resolutions" />
```

Let's break things down so we can understand this approach better.

- `<img>`: Right off the bat we start by using a widely supported html tag.
- `srcset`: The `srcset` attribute in the img tag serves two important roles, 1) It stores a list of images that can be used by the browser, 2) Each image provides its width value which plays a role on the browser choosing the right image.
- `sizes`: The `sizes` attribute tells the browser the width, in relation to the viewport, the image should be rendered at. The value of `100vw` shown above, means the image will be rendered at 100% the viewport width on all the devices. You could also use media queries like `(max-width: 720px) 100vw, 50vw`. This means that if the device does not exceed 720px in width, the image will be rendered at 100% the viewport width, otherwise (if the device is larger than 720px), the image will be rendered at 50% the viewport width.
- `src`: The `src` attribute is used as a fallback if everything fails.

## What does it all mean?

Let me explain things in more detail because it is important we understand how this approach is so much better than using the `<picture>` element.

The biggest difference/advantage of using `srcset` and `sizes` versus `<picture>`, is the fact that we let the browser decide which image is the best image to render on any device. This is possible thanks to all the information we have supplied to the browser. For example, in the `srcset` we are not only providing the browser with a list of images to choose from, but we are also telling the browser how big each image is. This is very important because the browser will use this information when choosing the image to render. In the `<picture>` element approach, the image size descriptors are not available.

The `sizes` value tells the browser the size the image needs to be rendered at in relation to the viewport. This too is extremely important information we are providing the browser because if the browser knows the dimensions of all the images to choose from and how big/small the image needs to be rendered, then the browser is able to pick the best image possible.

But that's not all, the browser is smarter and knows more about the web environment than we do when a page or image is rendered. For example, the browser knows the viewport width used when viewing a website, it knows how fast/slow your internet connection is, and it knows about any browser preference settings (if any), setup by the user. Using all this information the browser is able to determine which image from the `srcset` is the best to use. In contrast, with the `<picture>` element, we tell the browser which image to use solely based on the device size.

## Closing the gap

Now let's see how using the `srcset` and `sizes` attributes closes the gap we identified when using the `<picture>` tag.

| Environment conditions | What the developer knows<br>during development | What the browser knows<br>during image rendering |
| --- | --- | --- |
| Viewport dimensions | No | Yes |
| Image size relative to the viewport | Yes | ~~No~~ Yes via `sizes` |
| Screen density | No | Yes |
| Images dimensions | Yes | ~~No~~ Yes via `srcset` |

Pretty nice huh? Now thanks to the `srcset` and `sizes` attributes we've closed the gap and the browser has all the information it needs to ensure the best image is served to each device.

The next post of this series will focus on image styles. These are fun but can also get you in a lot of trouble if not properly done. See you there.

## In closing

Time for a story: I recently did an experiment that 100% proves the use of resolution switching using `srcset` and `sizes` attributes. As most people nowadays, I use a very large second display when working on projects to fit more apps and see things better. My second display is nice but it's not a 4K display. It's double the physical size of my mac's screen, but the mac's screen resolution is higher by almost double (twice the number of pixels). When I look at an image of a project where I've implemented the practices in this guide, in the large display, and inspected the page, I see the browser has selected an image that is 720px which makes complete sense for the use case I am testing. I then unplugged the second display and viewed the page on my mac's screen (higher resolution), I reloaded the page and inspected it, I noticed the browser has now selected an image that is double the size of the first image. This is exactly the behavior I would expect because my mac screen is of higher resolution and my connection speed is very fast. So the browser was able to make the smart decision to use a different images based on my environment.

Tags for this post

- [Responsive Images](https://mariohernandez.io/tag/responsive-images/)
- [Drupal](https://mariohernandez.io/tag/drupal/)
- [Srcset](https://mariohernandez.io/tag/srcset/)
- [Sizes](https://mariohernandez.io/tag/sizes/)

### Series: Responsive images

1. [Responsive images in Drupal - a series](https://mariohernandez.io/blog/responsive-images-in-drupal-a-series/)
2. [Art Direction using the picture HTML element](https://mariohernandez.io/blog/art-direction-using-the-picture-html-element/)
3. [Image resolution switching using srcset and sizes attributes](https://mariohernandez.io/blog/image-resolution-switching-using-srcset-and-sizes-attributes/)
4. [Image styles in Drupal](https://mariohernandez.io/blog/image-styles-in-drupal/)
5. [Responsive image styles](https://mariohernandez.io/blog/responsive-image-styles/)
6. [Responsive images and Media](https://mariohernandez.io/blog/responsive-images-and-media/)
7. [Responsive images, wrapping up](https://mariohernandez.io/blog/responsive-images-wrapping-up/)

![Headshot of Mario Hernandez](https://mariohernandez.io/images/mario-avatar.webp)

Sr. Front-end Software Engineer

I welcome your feedback about this post.

utterances

# 0 Comments _\- powered by_ _[utteranc.es](https://utteranc.es/)_

![@anonymous](<Base64-Image-Removed>)

Nothing to preview


- ![Hand drawing website wireframes](https://mariohernandez.io/images/thumbs/wireframes.webp)





  September 4, 2021



  With great power comes great responsibility.

- ![Google Lighthouse Metrics for MarioHernandez.io](https://mariohernandez.io/images/thumbs/webp-thumb.webp)





  April 12, 2025



  Media, in particular images, have always been a hot topic for discussion as it relates to website performance. Learn about this relatively easy approach to reduce image file sizes.

- ![Beach waves coming to shore](https://mariohernandez.io/images/thumbs/beach.webp)





  September 10, 2018



  Don't know about you but one of the first things I look for after reading a great article online is how to share it with others.


 [See more posts](https://mariohernandez.io/blog)
